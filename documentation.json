{
    "pipes": [],
    "interfaces": [
        {
            "name": "DIMXExportOptions",
            "id": "interface-DIMXExportOptions-e366b4038f7b1d782e30f684ceb98b986524ebd5fc9855acf616b4aaec74f5ea887b51fec31d67460a3eb0487a141f37866229e7219ea6d5e3ca3d9122ef846c",
            "file": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, ViewContainerRef } from \"@angular/core\";\r\nimport { PepAddonBlockLoaderService } from \"@pepperi-addons/ngx-lib/remote-loader\";\r\n\r\nexport interface DIMXHostObject {\r\n    DIMXAddonUUID: string;\r\n    DIMXResource: string;\r\n}\r\n\r\nexport interface DIMXImportOptions {\r\n    OverwriteObject?: boolean;\r\n    Delimiter?: string;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveImportOptions {\r\n    OverwriteObject?: boolean;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXExportOptions {\r\n    DIMXExportFormat?: string;\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    DIMXExportDelimiter?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveExportOptions {\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\n@Injectable()\r\nexport class PepDIMXHelperService {\r\n    private dimxFunctions!: {\r\n        DIMXImport: (options?: DIMXImportOptions) => void,\r\n        DIMXRecursiveImport: (options?: DIMXRecursiveImportOptions) => void,\r\n        DIMXExport: (options?: DIMXExportOptions) => void,\r\n        DIMXRecursiveExport: (options?: DIMXRecursiveExportOptions) => void\r\n    };\r\n\r\n    constructor(\r\n        private addonBlockLoaderService: PepAddonBlockLoaderService\r\n    ) {\r\n    }\r\n\r\n    register(viewContainerRef: ViewContainerRef, dimxHostObject: DIMXHostObject, onDIMXProcessDoneCallback: (dimxEvent: any) => void) {\r\n        return this.addonBlockLoaderService.loadAddonBlockInContainer({\r\n            container: viewContainerRef,\r\n            name: 'DIMX',\r\n            hostObject: dimxHostObject,\r\n            hostEventsCallback: (event: any) => {\r\n                if (event.action === 'DIMXFunctionsRegister') {\r\n                    this.dimxFunctions = event.value;\r\n                } else if (event.action === 'DIMXProcessDone') {\r\n                    onDIMXProcessDoneCallback(event.value);\r\n                } else {\r\n                    console.error('Unknown event action: ' + event.action);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    import(options?: DIMXImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXImport) === 'function') {\r\n            this.dimxFunctions.DIMXImport(options);\r\n        } else {\r\n            console.error('DIMXImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_import(options?: DIMXRecursiveImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveImport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveImport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    export(options?: DIMXExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXExport) === 'function') {\r\n            this.dimxFunctions.DIMXExport(options);\r\n        } else {\r\n            console.error('DIMXExport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_export(options?: DIMXRecursiveExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveExport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveExport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveExport function not found, are you registered?');\r\n        }\r\n    }\r\n}",
            "properties": [
                {
                    "name": "ActionID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "AdditionalData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "DIMXExportDelimiter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "DIMXExportFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "DIMXExportFileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "DIMXExportFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "DIMXExportIncludeDeleted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "DIMXExportWhere",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DIMXHostObject",
            "id": "interface-DIMXHostObject-e366b4038f7b1d782e30f684ceb98b986524ebd5fc9855acf616b4aaec74f5ea887b51fec31d67460a3eb0487a141f37866229e7219ea6d5e3ca3d9122ef846c",
            "file": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, ViewContainerRef } from \"@angular/core\";\r\nimport { PepAddonBlockLoaderService } from \"@pepperi-addons/ngx-lib/remote-loader\";\r\n\r\nexport interface DIMXHostObject {\r\n    DIMXAddonUUID: string;\r\n    DIMXResource: string;\r\n}\r\n\r\nexport interface DIMXImportOptions {\r\n    OverwriteObject?: boolean;\r\n    Delimiter?: string;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveImportOptions {\r\n    OverwriteObject?: boolean;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXExportOptions {\r\n    DIMXExportFormat?: string;\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    DIMXExportDelimiter?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveExportOptions {\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\n@Injectable()\r\nexport class PepDIMXHelperService {\r\n    private dimxFunctions!: {\r\n        DIMXImport: (options?: DIMXImportOptions) => void,\r\n        DIMXRecursiveImport: (options?: DIMXRecursiveImportOptions) => void,\r\n        DIMXExport: (options?: DIMXExportOptions) => void,\r\n        DIMXRecursiveExport: (options?: DIMXRecursiveExportOptions) => void\r\n    };\r\n\r\n    constructor(\r\n        private addonBlockLoaderService: PepAddonBlockLoaderService\r\n    ) {\r\n    }\r\n\r\n    register(viewContainerRef: ViewContainerRef, dimxHostObject: DIMXHostObject, onDIMXProcessDoneCallback: (dimxEvent: any) => void) {\r\n        return this.addonBlockLoaderService.loadAddonBlockInContainer({\r\n            container: viewContainerRef,\r\n            name: 'DIMX',\r\n            hostObject: dimxHostObject,\r\n            hostEventsCallback: (event: any) => {\r\n                if (event.action === 'DIMXFunctionsRegister') {\r\n                    this.dimxFunctions = event.value;\r\n                } else if (event.action === 'DIMXProcessDone') {\r\n                    onDIMXProcessDoneCallback(event.value);\r\n                } else {\r\n                    console.error('Unknown event action: ' + event.action);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    import(options?: DIMXImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXImport) === 'function') {\r\n            this.dimxFunctions.DIMXImport(options);\r\n        } else {\r\n            console.error('DIMXImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_import(options?: DIMXRecursiveImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveImport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveImport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    export(options?: DIMXExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXExport) === 'function') {\r\n            this.dimxFunctions.DIMXExport(options);\r\n        } else {\r\n            console.error('DIMXExport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_export(options?: DIMXRecursiveExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveExport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveExport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveExport function not found, are you registered?');\r\n        }\r\n    }\r\n}",
            "properties": [
                {
                    "name": "DIMXAddonUUID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "DIMXResource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DIMXImportOptions",
            "id": "interface-DIMXImportOptions-e366b4038f7b1d782e30f684ceb98b986524ebd5fc9855acf616b4aaec74f5ea887b51fec31d67460a3eb0487a141f37866229e7219ea6d5e3ca3d9122ef846c",
            "file": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, ViewContainerRef } from \"@angular/core\";\r\nimport { PepAddonBlockLoaderService } from \"@pepperi-addons/ngx-lib/remote-loader\";\r\n\r\nexport interface DIMXHostObject {\r\n    DIMXAddonUUID: string;\r\n    DIMXResource: string;\r\n}\r\n\r\nexport interface DIMXImportOptions {\r\n    OverwriteObject?: boolean;\r\n    Delimiter?: string;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveImportOptions {\r\n    OverwriteObject?: boolean;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXExportOptions {\r\n    DIMXExportFormat?: string;\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    DIMXExportDelimiter?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveExportOptions {\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\n@Injectable()\r\nexport class PepDIMXHelperService {\r\n    private dimxFunctions!: {\r\n        DIMXImport: (options?: DIMXImportOptions) => void,\r\n        DIMXRecursiveImport: (options?: DIMXRecursiveImportOptions) => void,\r\n        DIMXExport: (options?: DIMXExportOptions) => void,\r\n        DIMXRecursiveExport: (options?: DIMXRecursiveExportOptions) => void\r\n    };\r\n\r\n    constructor(\r\n        private addonBlockLoaderService: PepAddonBlockLoaderService\r\n    ) {\r\n    }\r\n\r\n    register(viewContainerRef: ViewContainerRef, dimxHostObject: DIMXHostObject, onDIMXProcessDoneCallback: (dimxEvent: any) => void) {\r\n        return this.addonBlockLoaderService.loadAddonBlockInContainer({\r\n            container: viewContainerRef,\r\n            name: 'DIMX',\r\n            hostObject: dimxHostObject,\r\n            hostEventsCallback: (event: any) => {\r\n                if (event.action === 'DIMXFunctionsRegister') {\r\n                    this.dimxFunctions = event.value;\r\n                } else if (event.action === 'DIMXProcessDone') {\r\n                    onDIMXProcessDoneCallback(event.value);\r\n                } else {\r\n                    console.error('Unknown event action: ' + event.action);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    import(options?: DIMXImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXImport) === 'function') {\r\n            this.dimxFunctions.DIMXImport(options);\r\n        } else {\r\n            console.error('DIMXImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_import(options?: DIMXRecursiveImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveImport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveImport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    export(options?: DIMXExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXExport) === 'function') {\r\n            this.dimxFunctions.DIMXExport(options);\r\n        } else {\r\n            console.error('DIMXExport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_export(options?: DIMXRecursiveExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveExport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveExport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveExport function not found, are you registered?');\r\n        }\r\n    }\r\n}",
            "properties": [
                {
                    "name": "ActionID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "AdditionalData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "Delimiter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "OverwriteObject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "OwnerID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DIMXRecursiveExportOptions",
            "id": "interface-DIMXRecursiveExportOptions-e366b4038f7b1d782e30f684ceb98b986524ebd5fc9855acf616b4aaec74f5ea887b51fec31d67460a3eb0487a141f37866229e7219ea6d5e3ca3d9122ef846c",
            "file": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, ViewContainerRef } from \"@angular/core\";\r\nimport { PepAddonBlockLoaderService } from \"@pepperi-addons/ngx-lib/remote-loader\";\r\n\r\nexport interface DIMXHostObject {\r\n    DIMXAddonUUID: string;\r\n    DIMXResource: string;\r\n}\r\n\r\nexport interface DIMXImportOptions {\r\n    OverwriteObject?: boolean;\r\n    Delimiter?: string;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveImportOptions {\r\n    OverwriteObject?: boolean;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXExportOptions {\r\n    DIMXExportFormat?: string;\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    DIMXExportDelimiter?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveExportOptions {\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\n@Injectable()\r\nexport class PepDIMXHelperService {\r\n    private dimxFunctions!: {\r\n        DIMXImport: (options?: DIMXImportOptions) => void,\r\n        DIMXRecursiveImport: (options?: DIMXRecursiveImportOptions) => void,\r\n        DIMXExport: (options?: DIMXExportOptions) => void,\r\n        DIMXRecursiveExport: (options?: DIMXRecursiveExportOptions) => void\r\n    };\r\n\r\n    constructor(\r\n        private addonBlockLoaderService: PepAddonBlockLoaderService\r\n    ) {\r\n    }\r\n\r\n    register(viewContainerRef: ViewContainerRef, dimxHostObject: DIMXHostObject, onDIMXProcessDoneCallback: (dimxEvent: any) => void) {\r\n        return this.addonBlockLoaderService.loadAddonBlockInContainer({\r\n            container: viewContainerRef,\r\n            name: 'DIMX',\r\n            hostObject: dimxHostObject,\r\n            hostEventsCallback: (event: any) => {\r\n                if (event.action === 'DIMXFunctionsRegister') {\r\n                    this.dimxFunctions = event.value;\r\n                } else if (event.action === 'DIMXProcessDone') {\r\n                    onDIMXProcessDoneCallback(event.value);\r\n                } else {\r\n                    console.error('Unknown event action: ' + event.action);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    import(options?: DIMXImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXImport) === 'function') {\r\n            this.dimxFunctions.DIMXImport(options);\r\n        } else {\r\n            console.error('DIMXImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_import(options?: DIMXRecursiveImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveImport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveImport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    export(options?: DIMXExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXExport) === 'function') {\r\n            this.dimxFunctions.DIMXExport(options);\r\n        } else {\r\n            console.error('DIMXExport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_export(options?: DIMXRecursiveExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveExport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveExport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveExport function not found, are you registered?');\r\n        }\r\n    }\r\n}",
            "properties": [
                {
                    "name": "ActionID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "AdditionalData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "DIMXExportFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "DIMXExportFileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "DIMXExportIncludeDeleted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "DIMXExportWhere",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DIMXRecursiveImportOptions",
            "id": "interface-DIMXRecursiveImportOptions-e366b4038f7b1d782e30f684ceb98b986524ebd5fc9855acf616b4aaec74f5ea887b51fec31d67460a3eb0487a141f37866229e7219ea6d5e3ca3d9122ef846c",
            "file": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, ViewContainerRef } from \"@angular/core\";\r\nimport { PepAddonBlockLoaderService } from \"@pepperi-addons/ngx-lib/remote-loader\";\r\n\r\nexport interface DIMXHostObject {\r\n    DIMXAddonUUID: string;\r\n    DIMXResource: string;\r\n}\r\n\r\nexport interface DIMXImportOptions {\r\n    OverwriteObject?: boolean;\r\n    Delimiter?: string;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveImportOptions {\r\n    OverwriteObject?: boolean;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXExportOptions {\r\n    DIMXExportFormat?: string;\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    DIMXExportDelimiter?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveExportOptions {\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\n@Injectable()\r\nexport class PepDIMXHelperService {\r\n    private dimxFunctions!: {\r\n        DIMXImport: (options?: DIMXImportOptions) => void,\r\n        DIMXRecursiveImport: (options?: DIMXRecursiveImportOptions) => void,\r\n        DIMXExport: (options?: DIMXExportOptions) => void,\r\n        DIMXRecursiveExport: (options?: DIMXRecursiveExportOptions) => void\r\n    };\r\n\r\n    constructor(\r\n        private addonBlockLoaderService: PepAddonBlockLoaderService\r\n    ) {\r\n    }\r\n\r\n    register(viewContainerRef: ViewContainerRef, dimxHostObject: DIMXHostObject, onDIMXProcessDoneCallback: (dimxEvent: any) => void) {\r\n        return this.addonBlockLoaderService.loadAddonBlockInContainer({\r\n            container: viewContainerRef,\r\n            name: 'DIMX',\r\n            hostObject: dimxHostObject,\r\n            hostEventsCallback: (event: any) => {\r\n                if (event.action === 'DIMXFunctionsRegister') {\r\n                    this.dimxFunctions = event.value;\r\n                } else if (event.action === 'DIMXProcessDone') {\r\n                    onDIMXProcessDoneCallback(event.value);\r\n                } else {\r\n                    console.error('Unknown event action: ' + event.action);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    import(options?: DIMXImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXImport) === 'function') {\r\n            this.dimxFunctions.DIMXImport(options);\r\n        } else {\r\n            console.error('DIMXImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_import(options?: DIMXRecursiveImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveImport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveImport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    export(options?: DIMXExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXExport) === 'function') {\r\n            this.dimxFunctions.DIMXExport(options);\r\n        } else {\r\n            console.error('DIMXExport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_export(options?: DIMXRecursiveExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveExport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveExport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveExport function not found, are you registered?');\r\n        }\r\n    }\r\n}",
            "properties": [
                {
                    "name": "ActionID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "AdditionalData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "OverwriteObject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "OwnerID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IParamemeter",
            "id": "interface-IParamemeter-8bdec15e0c0d59458e3440bac140f3364c68f3e88abdc5d01c50f82ef571f3840a8546c1062f3699660b0692d0d44310a6ae34ed255c0e59d15f76215223db52",
            "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DataViewFieldType, SchemeFieldType } from \"@pepperi-addons/papi-sdk\";\r\n\r\n// import { DebugFlowResult, FlowObject, LogicBlock } from \"shared\";\r\n// import { IPepDraggableItem } from \"@pepperi-addons/ngx-lib/draggable-items\";\r\n// import { PepStyleType } from \"@pepperi-addons/ngx-lib\";\r\n\r\n// export interface LogicBlockEditorOptions extends IAddonBlockLoaderDialogOptions {\r\n//     block: LogicBlock;\r\n// }\r\n\r\n// export interface LogicBlockRelation extends NgComponentRelation {\r\n//     BlockExecutionRelativeURL: string;\r\n// }\r\n\r\n// export type ActionType = 'Add' | 'Edit' | 'Delete' | 'Duplicate' | 'Logs' | 'Test';\r\n\r\n// export interface ActionClickedEventData {\r\n//     ActionType: ActionType,\r\n//     ItemKey?: string\r\n// }\r\n\r\n// export const GL_PAGE_SIZE = 30;\r\n// export const API_PAGE_SIZE = 100;\r\n// export const SELECTION_FIELD_PREFIX = 'ValueSelectionType_';\r\n\r\n// export const SECOND = 1000;\r\n// export const MINUTE = 60 * SECOND;\r\n\r\nexport type ParameterFormType = 'add' | 'edit';\r\n\r\nexport interface IParametersColumn {\r\n    Key: string; // This is the property name of the parameter.\r\n    Title: string;\r\n    Type: DataViewFieldType,\r\n    Width: number;\r\n}\r\n\r\nexport interface IParamemeter {\r\n    Key: string;\r\n    Type: SchemeFieldType;\r\n    Description?: string;\r\n    DefaultValue: any;\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface IParameterFormData {\r\n    Mode: ParameterFormType;\r\n    Parameter: IParamemeter;\r\n    ShowType?: boolean;\r\n    ShowAccessibility?: boolean;\r\n}\r\n\r\n// export interface FlowDraggableItem extends IPepDraggableItem {\r\n//     data: {\r\n//         key: string;\r\n//         addonUUID: string;\r\n//         blockExecutionRelativeURL: string;\r\n//         moduleName: string;\r\n//         componentName: string;\r\n//     }\r\n// }\r\n\r\n// export interface FlowPickerData {\r\n//     runFlowData?: FlowObject\r\n//     fields?: AddonDataScheme['Fields']\r\n// }\r\n\r\n// export interface PageTitleButton {\r\n//     Key: string;\r\n//     Title: string;\r\n//     StyleType: PepStyleType;\r\n//     Disabled: boolean\r\n// }\r\n\r\n// export type PollResultCallback = (status: DebugFlowResult)=> void;",
            "properties": [
                {
                    "name": "DefaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "Description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "Key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "Type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SchemeFieldType",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-8bdec15e0c0d59458e3440bac140f3364c68f3e88abdc5d01c50f82ef571f3840a8546c1062f3699660b0692d0d44310a6ae34ed255c0e59d15f76215223db52",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "IParameterFormData",
            "id": "interface-IParameterFormData-8bdec15e0c0d59458e3440bac140f3364c68f3e88abdc5d01c50f82ef571f3840a8546c1062f3699660b0692d0d44310a6ae34ed255c0e59d15f76215223db52",
            "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DataViewFieldType, SchemeFieldType } from \"@pepperi-addons/papi-sdk\";\r\n\r\n// import { DebugFlowResult, FlowObject, LogicBlock } from \"shared\";\r\n// import { IPepDraggableItem } from \"@pepperi-addons/ngx-lib/draggable-items\";\r\n// import { PepStyleType } from \"@pepperi-addons/ngx-lib\";\r\n\r\n// export interface LogicBlockEditorOptions extends IAddonBlockLoaderDialogOptions {\r\n//     block: LogicBlock;\r\n// }\r\n\r\n// export interface LogicBlockRelation extends NgComponentRelation {\r\n//     BlockExecutionRelativeURL: string;\r\n// }\r\n\r\n// export type ActionType = 'Add' | 'Edit' | 'Delete' | 'Duplicate' | 'Logs' | 'Test';\r\n\r\n// export interface ActionClickedEventData {\r\n//     ActionType: ActionType,\r\n//     ItemKey?: string\r\n// }\r\n\r\n// export const GL_PAGE_SIZE = 30;\r\n// export const API_PAGE_SIZE = 100;\r\n// export const SELECTION_FIELD_PREFIX = 'ValueSelectionType_';\r\n\r\n// export const SECOND = 1000;\r\n// export const MINUTE = 60 * SECOND;\r\n\r\nexport type ParameterFormType = 'add' | 'edit';\r\n\r\nexport interface IParametersColumn {\r\n    Key: string; // This is the property name of the parameter.\r\n    Title: string;\r\n    Type: DataViewFieldType,\r\n    Width: number;\r\n}\r\n\r\nexport interface IParamemeter {\r\n    Key: string;\r\n    Type: SchemeFieldType;\r\n    Description?: string;\r\n    DefaultValue: any;\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface IParameterFormData {\r\n    Mode: ParameterFormType;\r\n    Parameter: IParamemeter;\r\n    ShowType?: boolean;\r\n    ShowAccessibility?: boolean;\r\n}\r\n\r\n// export interface FlowDraggableItem extends IPepDraggableItem {\r\n//     data: {\r\n//         key: string;\r\n//         addonUUID: string;\r\n//         blockExecutionRelativeURL: string;\r\n//         moduleName: string;\r\n//         componentName: string;\r\n//     }\r\n// }\r\n\r\n// export interface FlowPickerData {\r\n//     runFlowData?: FlowObject\r\n//     fields?: AddonDataScheme['Fields']\r\n// }\r\n\r\n// export interface PageTitleButton {\r\n//     Key: string;\r\n//     Title: string;\r\n//     StyleType: PepStyleType;\r\n//     Disabled: boolean\r\n// }\r\n\r\n// export type PollResultCallback = (status: DebugFlowResult)=> void;",
            "properties": [
                {
                    "name": "Mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterFormType",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "Parameter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IParamemeter",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "ShowAccessibility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "ShowType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IParametersColumn",
            "id": "interface-IParametersColumn-8bdec15e0c0d59458e3440bac140f3364c68f3e88abdc5d01c50f82ef571f3840a8546c1062f3699660b0692d0d44310a6ae34ed255c0e59d15f76215223db52",
            "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DataViewFieldType, SchemeFieldType } from \"@pepperi-addons/papi-sdk\";\r\n\r\n// import { DebugFlowResult, FlowObject, LogicBlock } from \"shared\";\r\n// import { IPepDraggableItem } from \"@pepperi-addons/ngx-lib/draggable-items\";\r\n// import { PepStyleType } from \"@pepperi-addons/ngx-lib\";\r\n\r\n// export interface LogicBlockEditorOptions extends IAddonBlockLoaderDialogOptions {\r\n//     block: LogicBlock;\r\n// }\r\n\r\n// export interface LogicBlockRelation extends NgComponentRelation {\r\n//     BlockExecutionRelativeURL: string;\r\n// }\r\n\r\n// export type ActionType = 'Add' | 'Edit' | 'Delete' | 'Duplicate' | 'Logs' | 'Test';\r\n\r\n// export interface ActionClickedEventData {\r\n//     ActionType: ActionType,\r\n//     ItemKey?: string\r\n// }\r\n\r\n// export const GL_PAGE_SIZE = 30;\r\n// export const API_PAGE_SIZE = 100;\r\n// export const SELECTION_FIELD_PREFIX = 'ValueSelectionType_';\r\n\r\n// export const SECOND = 1000;\r\n// export const MINUTE = 60 * SECOND;\r\n\r\nexport type ParameterFormType = 'add' | 'edit';\r\n\r\nexport interface IParametersColumn {\r\n    Key: string; // This is the property name of the parameter.\r\n    Title: string;\r\n    Type: DataViewFieldType,\r\n    Width: number;\r\n}\r\n\r\nexport interface IParamemeter {\r\n    Key: string;\r\n    Type: SchemeFieldType;\r\n    Description?: string;\r\n    DefaultValue: any;\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface IParameterFormData {\r\n    Mode: ParameterFormType;\r\n    Parameter: IParamemeter;\r\n    ShowType?: boolean;\r\n    ShowAccessibility?: boolean;\r\n}\r\n\r\n// export interface FlowDraggableItem extends IPepDraggableItem {\r\n//     data: {\r\n//         key: string;\r\n//         addonUUID: string;\r\n//         blockExecutionRelativeURL: string;\r\n//         moduleName: string;\r\n//         componentName: string;\r\n//     }\r\n// }\r\n\r\n// export interface FlowPickerData {\r\n//     runFlowData?: FlowObject\r\n//     fields?: AddonDataScheme['Fields']\r\n// }\r\n\r\n// export interface PageTitleButton {\r\n//     Key: string;\r\n//     Title: string;\r\n//     StyleType: PepStyleType;\r\n//     Disabled: boolean\r\n// }\r\n\r\n// export type PollResultCallback = (status: DebugFlowResult)=> void;",
            "properties": [
                {
                    "name": "Key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "Title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "Type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataViewFieldType",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "Width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericFormData",
            "id": "interface-IPepGenericFormData-a273083f98ac6c9bfe6feaa899ef8c9288f445f80e0c7c5e3ea2698f3a02142189c208f052ea3785d27691eca65070d8f34299493785aada49aee297cf7ed3cd",
            "file": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormDataView, BaseFormDataViewField } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\n\r\n/**\r\n * Interface represending the form data view\r\n */\r\nexport interface IPepGenericFormDataView extends FormDataView {\r\n    UID?: string;\r\n    Fields: IPepGenericFormDataViewField[];\r\n}\r\n\r\nexport interface IPepGenericFormDataViewField extends BaseFormDataViewField {\r\n    OptionalValues: Array<KeyValuePair<string>>;\r\n    AdditionalProps: { [key: string]: any };\r\n}\r\n\r\n/**\r\n * Interface representing form data\r\n */\r\nexport interface IPepGenericFormData {\r\n    UID: string;\r\n    Values: { [key: string]: any };\r\n}\r\n\r\nexport interface IPepGenericFormValueChange {\r\n    UID: string;\r\n    ApiName: string;\r\n    Value: any;\r\n}\r\n\r\nexport interface IPepGenericFormFieldUpdate {\r\n    FieldId: string;\r\n    Params: IPepGenericFormDataParams;\r\n}\r\n\r\nexport interface IPepGenericFormDataParams {   \r\n    Value?: any;   \r\n    Visible?: boolean;     \r\n    Enabled?: boolean;      \r\n    BackgroundColor?: string;\r\n    TextColor?: string;\r\n    Highlighted?: boolean;   \r\n    OptionalValues?: Array<KeyValuePair<string>>;   \r\n    [key: string]: any;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "UID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "Values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Interface representing form data</p>\n",
            "rawdescription": "\n\nInterface representing form data\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericFormDataParams",
            "id": "interface-IPepGenericFormDataParams-a273083f98ac6c9bfe6feaa899ef8c9288f445f80e0c7c5e3ea2698f3a02142189c208f052ea3785d27691eca65070d8f34299493785aada49aee297cf7ed3cd",
            "file": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormDataView, BaseFormDataViewField } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\n\r\n/**\r\n * Interface represending the form data view\r\n */\r\nexport interface IPepGenericFormDataView extends FormDataView {\r\n    UID?: string;\r\n    Fields: IPepGenericFormDataViewField[];\r\n}\r\n\r\nexport interface IPepGenericFormDataViewField extends BaseFormDataViewField {\r\n    OptionalValues: Array<KeyValuePair<string>>;\r\n    AdditionalProps: { [key: string]: any };\r\n}\r\n\r\n/**\r\n * Interface representing form data\r\n */\r\nexport interface IPepGenericFormData {\r\n    UID: string;\r\n    Values: { [key: string]: any };\r\n}\r\n\r\nexport interface IPepGenericFormValueChange {\r\n    UID: string;\r\n    ApiName: string;\r\n    Value: any;\r\n}\r\n\r\nexport interface IPepGenericFormFieldUpdate {\r\n    FieldId: string;\r\n    Params: IPepGenericFormDataParams;\r\n}\r\n\r\nexport interface IPepGenericFormDataParams {   \r\n    Value?: any;   \r\n    Visible?: boolean;     \r\n    Enabled?: boolean;      \r\n    BackgroundColor?: string;\r\n    TextColor?: string;\r\n    Highlighted?: boolean;   \r\n    OptionalValues?: Array<KeyValuePair<string>>;   \r\n    [key: string]: any;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "BackgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "Enabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "Highlighted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "OptionalValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValuePair<string>>",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "TextColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "Value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "Visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-a273083f98ac6c9bfe6feaa899ef8c9288f445f80e0c7c5e3ea2698f3a02142189c208f052ea3785d27691eca65070d8f34299493785aada49aee297cf7ed3cd",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericFormDataView",
            "id": "interface-IPepGenericFormDataView-a273083f98ac6c9bfe6feaa899ef8c9288f445f80e0c7c5e3ea2698f3a02142189c208f052ea3785d27691eca65070d8f34299493785aada49aee297cf7ed3cd",
            "file": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormDataView, BaseFormDataViewField } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\n\r\n/**\r\n * Interface represending the form data view\r\n */\r\nexport interface IPepGenericFormDataView extends FormDataView {\r\n    UID?: string;\r\n    Fields: IPepGenericFormDataViewField[];\r\n}\r\n\r\nexport interface IPepGenericFormDataViewField extends BaseFormDataViewField {\r\n    OptionalValues: Array<KeyValuePair<string>>;\r\n    AdditionalProps: { [key: string]: any };\r\n}\r\n\r\n/**\r\n * Interface representing form data\r\n */\r\nexport interface IPepGenericFormData {\r\n    UID: string;\r\n    Values: { [key: string]: any };\r\n}\r\n\r\nexport interface IPepGenericFormValueChange {\r\n    UID: string;\r\n    ApiName: string;\r\n    Value: any;\r\n}\r\n\r\nexport interface IPepGenericFormFieldUpdate {\r\n    FieldId: string;\r\n    Params: IPepGenericFormDataParams;\r\n}\r\n\r\nexport interface IPepGenericFormDataParams {   \r\n    Value?: any;   \r\n    Visible?: boolean;     \r\n    Enabled?: boolean;      \r\n    BackgroundColor?: string;\r\n    TextColor?: string;\r\n    Highlighted?: boolean;   \r\n    OptionalValues?: Array<KeyValuePair<string>>;   \r\n    [key: string]: any;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "Fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericFormDataViewField[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "UID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Interface represending the form data view</p>\n",
            "rawdescription": "\n\nInterface represending the form data view\n",
            "methods": [],
            "extends": [
                "FormDataView"
            ]
        },
        {
            "name": "IPepGenericFormDataViewField",
            "id": "interface-IPepGenericFormDataViewField-a273083f98ac6c9bfe6feaa899ef8c9288f445f80e0c7c5e3ea2698f3a02142189c208f052ea3785d27691eca65070d8f34299493785aada49aee297cf7ed3cd",
            "file": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormDataView, BaseFormDataViewField } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\n\r\n/**\r\n * Interface represending the form data view\r\n */\r\nexport interface IPepGenericFormDataView extends FormDataView {\r\n    UID?: string;\r\n    Fields: IPepGenericFormDataViewField[];\r\n}\r\n\r\nexport interface IPepGenericFormDataViewField extends BaseFormDataViewField {\r\n    OptionalValues: Array<KeyValuePair<string>>;\r\n    AdditionalProps: { [key: string]: any };\r\n}\r\n\r\n/**\r\n * Interface representing form data\r\n */\r\nexport interface IPepGenericFormData {\r\n    UID: string;\r\n    Values: { [key: string]: any };\r\n}\r\n\r\nexport interface IPepGenericFormValueChange {\r\n    UID: string;\r\n    ApiName: string;\r\n    Value: any;\r\n}\r\n\r\nexport interface IPepGenericFormFieldUpdate {\r\n    FieldId: string;\r\n    Params: IPepGenericFormDataParams;\r\n}\r\n\r\nexport interface IPepGenericFormDataParams {   \r\n    Value?: any;   \r\n    Visible?: boolean;     \r\n    Enabled?: boolean;      \r\n    BackgroundColor?: string;\r\n    TextColor?: string;\r\n    Highlighted?: boolean;   \r\n    OptionalValues?: Array<KeyValuePair<string>>;   \r\n    [key: string]: any;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "AdditionalProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "OptionalValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValuePair<string>>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseFormDataViewField"
            ]
        },
        {
            "name": "IPepGenericFormFieldUpdate",
            "id": "interface-IPepGenericFormFieldUpdate-a273083f98ac6c9bfe6feaa899ef8c9288f445f80e0c7c5e3ea2698f3a02142189c208f052ea3785d27691eca65070d8f34299493785aada49aee297cf7ed3cd",
            "file": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormDataView, BaseFormDataViewField } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\n\r\n/**\r\n * Interface represending the form data view\r\n */\r\nexport interface IPepGenericFormDataView extends FormDataView {\r\n    UID?: string;\r\n    Fields: IPepGenericFormDataViewField[];\r\n}\r\n\r\nexport interface IPepGenericFormDataViewField extends BaseFormDataViewField {\r\n    OptionalValues: Array<KeyValuePair<string>>;\r\n    AdditionalProps: { [key: string]: any };\r\n}\r\n\r\n/**\r\n * Interface representing form data\r\n */\r\nexport interface IPepGenericFormData {\r\n    UID: string;\r\n    Values: { [key: string]: any };\r\n}\r\n\r\nexport interface IPepGenericFormValueChange {\r\n    UID: string;\r\n    ApiName: string;\r\n    Value: any;\r\n}\r\n\r\nexport interface IPepGenericFormFieldUpdate {\r\n    FieldId: string;\r\n    Params: IPepGenericFormDataParams;\r\n}\r\n\r\nexport interface IPepGenericFormDataParams {   \r\n    Value?: any;   \r\n    Visible?: boolean;     \r\n    Enabled?: boolean;      \r\n    BackgroundColor?: string;\r\n    TextColor?: string;\r\n    Highlighted?: boolean;   \r\n    OptionalValues?: Array<KeyValuePair<string>>;   \r\n    [key: string]: any;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "FieldId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "Params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericFormDataParams",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericFormValueChange",
            "id": "interface-IPepGenericFormValueChange-a273083f98ac6c9bfe6feaa899ef8c9288f445f80e0c7c5e3ea2698f3a02142189c208f052ea3785d27691eca65070d8f34299493785aada49aee297cf7ed3cd",
            "file": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormDataView, BaseFormDataViewField } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\n\r\n/**\r\n * Interface represending the form data view\r\n */\r\nexport interface IPepGenericFormDataView extends FormDataView {\r\n    UID?: string;\r\n    Fields: IPepGenericFormDataViewField[];\r\n}\r\n\r\nexport interface IPepGenericFormDataViewField extends BaseFormDataViewField {\r\n    OptionalValues: Array<KeyValuePair<string>>;\r\n    AdditionalProps: { [key: string]: any };\r\n}\r\n\r\n/**\r\n * Interface representing form data\r\n */\r\nexport interface IPepGenericFormData {\r\n    UID: string;\r\n    Values: { [key: string]: any };\r\n}\r\n\r\nexport interface IPepGenericFormValueChange {\r\n    UID: string;\r\n    ApiName: string;\r\n    Value: any;\r\n}\r\n\r\nexport interface IPepGenericFormFieldUpdate {\r\n    FieldId: string;\r\n    Params: IPepGenericFormDataParams;\r\n}\r\n\r\nexport interface IPepGenericFormDataParams {   \r\n    Value?: any;   \r\n    Visible?: boolean;     \r\n    Enabled?: boolean;      \r\n    BackgroundColor?: string;\r\n    TextColor?: string;\r\n    Highlighted?: boolean;   \r\n    OptionalValues?: Array<KeyValuePair<string>>;   \r\n    [key: string]: any;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "ApiName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "UID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "Value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericListActions",
            "id": "interface-IPepGenericListActions-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "data",
                            "type": "PepSelectionData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<literal type[]>",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "PepSelectionData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "IPepGenericListDataRow",
            "id": "interface-IPepGenericListDataRow-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "isEditable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "isSelectableForActions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "isSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericListDataSource",
            "id": "interface-IPepGenericListDataSource-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "inputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListListInputs",
                    "optional": true,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "params",
                            "type": "IPepGenericListParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<IPepGenericListInitData>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "IPepGenericListParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "params",
                            "type": "IPepGenericListParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "Promise<any[]>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "IPepGenericListParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "IPepGenericListDataViewField",
            "id": "interface-IPepGenericListDataViewField-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "OptionalValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValuePair<string>>",
                    "optional": true,
                    "description": "",
                    "line": 91
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseFormDataViewField"
            ]
        },
        {
            "name": "IPepGenericListEmptyState",
            "id": "interface-IPepGenericListEmptyState-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "show",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 96
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericListInitData",
            "id": "interface-IPepGenericListInitData-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "dataView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GridDataView | CardDataView | LineDataView",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "isPepRowData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[] | IPepGenericListDataRow[]",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "totalCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericListListInputs",
            "id": "interface-IPepGenericListListInputs-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "emptyState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListEmptyState",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "hideSelectAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "noDataFoundMsg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "pager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListPager",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "selectionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepListSelectionType",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "smartFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListSmartFilter",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "supportSorting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "tableViewType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepListTableViewType",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "zebraStripes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 60
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericListPager",
            "id": "interface-IPepGenericListPager-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepListPagerType",
                    "optional": false,
                    "description": "",
                    "line": 73
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericListParams",
            "id": "interface-IPepGenericListParams-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "fromIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "pageIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "searchString",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "sorting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepListSortingChangeEvent",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "toIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericListSmartFilter",
            "id": "interface-IPepGenericListSmartFilter-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepSmartFilterData[]",
                    "optional": true,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "dataView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuDataView",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 81
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepSmartFilters",
            "id": "interface-IPepSmartFilters-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepSmartFilterData[]",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepSmartFilterBaseField[]",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-dcc5c3137cd472dd0002d85b562efd23162e3eff53ca4438a6251e6c46e3b8299076255380d1d42f386510cb6f2cbaab49fa5b5f253be459cdc3869428c5c400",
            "file": "stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "DataViewBuilderService",
            "id": "injectable-DataViewBuilderService-90c5f2d9313602740df19dd30cffce62647d738e26812d2679c2b5733bf816221fc9a553a5731c3047ec18e52e18a91c2f88538e74e413285c1f0ce17d8d7ac5",
            "file": "projects/ngx-composite-lib/data-view-builder/data-view-builder.service.ts",
            "properties": [
                {
                    "name": "_isGrabbingSubject",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changeCursorOnDragEnd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "changeCursorOnDragStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onDragEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragEnd",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragEnd",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragStart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragStart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { CdkDragEnd, CdkDragStart } from '@angular/cdk/drag-drop';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DataViewBuilderService {\r\n    \r\n    // This subject is for is grabbing mode.\r\n    private _isGrabbingSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n    get isGrabbingChange$(): Observable<boolean> {\r\n        return this._isGrabbingSubject.asObservable().pipe(distinctUntilChanged());\r\n    }\r\n\r\n    constructor() { \r\n        //\r\n    }\r\n\r\n    private changeCursorOnDragStart() {\r\n        document.body.classList.add('inheritCursors');\r\n        document.body.style.cursor = 'grabbing';\r\n        this._isGrabbingSubject.next(true);\r\n    }\r\n\r\n    private changeCursorOnDragEnd() {\r\n        document.body.classList.remove('inheritCursors');\r\n        document.body.style.cursor = 'unset';\r\n        this._isGrabbingSubject.next(false);\r\n    }\r\n    \r\n    onDragStart(event: CdkDragStart) {\r\n        this.changeCursorOnDragStart();\r\n    }\r\n\r\n    onDragEnd(event: CdkDragEnd) {\r\n        this.changeCursorOnDragEnd();\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "accessors": {
                "isGrabbingChange$": {
                    "name": "isGrabbingChange$",
                    "getSignature": {
                        "name": "isGrabbingChange$",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 13
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FlowPickerService",
            "id": "injectable-FlowPickerService-f6f78b069b2ceb0f1e27800438c86e2fb21f7ed250735cc87e961937e82ccf3323e4184d26a28b3485308ec70edd30e370f2ed2294cd351631d160cb9dd16a1e",
            "file": "projects/ngx-composite-lib/flow-picker-button/flow-picker-button.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "searchFlows",
                    "args": [
                        {
                            "name": "flowKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "flowKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { PepHttpService, PepSessionService } from '@pepperi-addons/ngx-lib';\r\nimport { lastValueFrom } from \"rxjs\";\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class FlowPickerService {\r\n    \r\n    constructor(\r\n        private httpService: PepHttpService\r\n        ) {\r\n    }\r\n    \r\n    async searchFlows(flowKey: string): Promise<any> {\r\n        return lastValueFrom(await this.httpService.postPapiApiCall('/user_defined_flows/search', { KeyList: [flowKey], Fields: ['Key', 'Name']}));\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "PepHttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "PepHttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FlowPickerService",
            "id": "injectable-FlowPickerService-d97d93743da2089bba5263a7f9259630966f35d4542d47ad309027fbdf7c03ff0194465b7e98ee7d864a4923e85ef0194326badfccfc0659644d225adbf05199-1",
            "file": "projects/ngx-composite-lib/icon-picker/icon-picker.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { PepHttpService } from '@pepperi-addons/ngx-lib';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class FlowPickerService {\r\n    \r\n    constructor(\r\n        private httpService: PepHttpService\r\n        ) {\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "PepHttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "PepHttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "FlowPickerService-1"
        },
        {
            "name": "ManageParametersService",
            "id": "injectable-ManageParametersService-62bd6f7de00ef3314070fb50a4ed19435b261b8ea91874230fa2a42f3c143d4be43dce6f71f6e799312b9a64c223ee286351af4ec0c3570793973f5e077618c0",
            "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "convertParamsTypeToDVType",
                    "args": [
                        {
                            "name": "paramType",
                            "type": "SchemeFieldType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DataViewFieldType",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "paramType",
                            "type": "SchemeFieldType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAvailableTypes",
                    "args": [],
                    "optional": false,
                    "returnType": "KeyValuePair[]",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getDataViewField",
                    "args": [
                        {
                            "name": "fieldId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "DataViewFieldType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mandatory",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "readOnly",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "optionalValues",
                            "type": "any[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        },
                        {
                            "name": "additionalProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        },
                        {
                            "name": "layout",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "fieldId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "DataViewFieldType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mandatory",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "readOnly",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "optionalValues",
                            "type": "any[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "additionalProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "layout",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getParameterFormDataView",
                    "args": [
                        {
                            "name": "formMode",
                            "type": "ParameterFormType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "paramType",
                            "type": "SchemeFieldType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "showType",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "showAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IPepGenericFormDataView",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formMode",
                            "type": "ParameterFormType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "paramType",
                            "type": "SchemeFieldType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showType",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getParametersListDataView",
                    "args": [
                        {
                            "name": "parametersColumns",
                            "type": "IParametersColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "showType",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "showAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "GridDataView",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "parametersColumns",
                            "type": "IParametersColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showType",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { TranslateService } from \"@ngx-translate/core\";\r\nimport { IPepGenericFormDataView } from \"@pepperi-addons/ngx-composite-lib/generic-form\";\r\nimport { KeyValuePair } from \"@pepperi-addons/ngx-lib\";\r\nimport { DataViewFieldType, GridDataView, SchemeFieldType, SchemeFieldTypes } from \"@pepperi-addons/papi-sdk\";\r\nimport { IParametersColumn, ParameterFormType } from \"./manage-parameters.model\";\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\nexport class ManageParametersService {\r\n    \r\n    constructor (private translate: TranslateService) {\r\n\r\n    }\r\n\r\n    private getAvailableTypes(): KeyValuePair<string>[] {\r\n        const types = SchemeFieldTypes.filter(type => ['Array', 'DateTime', 'Resource', 'ContainedResource', 'DynamicResource', 'ContainedDynamicResource', 'MultipleStringValues'].includes(type) === false);\r\n        return types.map(type => {\r\n            return {\r\n                Key: type,\r\n                Value: type\r\n            }\r\n        })\r\n    }\r\n\r\n    private convertParamsTypeToDVType(paramType: SchemeFieldType): DataViewFieldType {\r\n        let res: DataViewFieldType = 'TextBox';\r\n        switch (paramType) {\r\n            case 'Bool': {\r\n                res = 'Boolean';\r\n                break;\r\n            }\r\n            case 'Integer': {\r\n                res = 'NumberInteger';\r\n                break;\r\n            }\r\n            case 'Double': {\r\n                res = 'NumberReal';\r\n                break;\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private getDataViewField(fieldId: string, type: DataViewFieldType, title: string, mandatory: boolean, readOnly: boolean, \r\n        optionalValues: any[] | undefined = undefined, additionalProps: any = undefined, layout: any = undefined): any {\r\n\r\n        const res: any = {\r\n            FieldID: fieldId,\r\n            Type: type,\r\n            Title: title,\r\n            Mandatory: mandatory,\r\n            ReadOnly: readOnly\r\n        }\r\n\r\n        if (optionalValues) {\r\n            res['OptionalValues'] = optionalValues;\r\n        }\r\n\r\n        if (additionalProps) {\r\n            res['AdditionalProps'] = additionalProps;\r\n        }\r\n\r\n        if (layout) {\r\n            res['Layout'] = layout;\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    getParametersListDataView(parametersColumns: IParametersColumn[], showType: boolean, showAccessibility: boolean): GridDataView {\r\n        let fields;\r\n        let columns;\r\n\r\n        // If columns are defined, use them. Otherwise, use the default columns.\r\n        if (parametersColumns.length > 0) {\r\n            fields = parametersColumns.map(column => {\r\n                return this.getDataViewField(column.Key, column.Type, column.Title, false, true, [], {});\r\n            });\r\n\r\n            columns = parametersColumns.map(column => {\r\n                return { Width: column.Width }\r\n            });\r\n        } else {\r\n            // Add Key and Description fields.\r\n            fields = [\r\n                this.getDataViewField('Key', 'Link', this.translate.instant('MANAGE_PARAMETERS.KEY_TITLE'), false, true),\r\n                this.getDataViewField('Description', 'TextBox', this.translate.instant('MANAGE_PARAMETERS.DESCRIPTION_TITLE'), false, true),\r\n            ];\r\n\r\n            // Add Type field only if showType is true.\r\n            if (showType) {\r\n                fields.push(this.getDataViewField('Type', 'TextBox', this.translate.instant('MANAGE_PARAMETERS.TYPE_TITLE'), false, true));\r\n            }\r\n\r\n            // Add DefaultValue field.\r\n            fields.push(this.getDataViewField('DefaultValue', 'TextBox', this.translate.instant('MANAGE_PARAMETERS.DEFAULT_VALUE_TITLE'), false, true));\r\n\r\n            // Add Internal field.\r\n            if (showAccessibility) {\r\n                fields.push(this.getDataViewField('Internal', 'Boolean', this.translate.instant('MANAGE_PARAMETERS.INTERNAL_TITLE'), false, true));\r\n            }\r\n\r\n            columns = fields.map(field => {\r\n                return { Width: 100 / fields.length }\r\n            });\r\n        }\r\n\r\n        return {\r\n            Context: {\r\n                Name: '',\r\n                Profile: { InternalID: 0 },\r\n                ScreenSize: 'Landscape'\r\n            },\r\n            Type: 'Grid',\r\n            Title: '',\r\n            Fields: fields,\r\n            Columns: columns,\r\n            FrozenColumnsCount: 0,\r\n            MinimumColumnWidth: 0\r\n        }\r\n    }\r\n\r\n    getParameterFormDataView(formMode: ParameterFormType, paramType: SchemeFieldType, showType: boolean, showAccessibility: boolean): IPepGenericFormDataView {\r\n        const fieldTypes = this.getAvailableTypes();\r\n        const noEmptyOption = { emptyOption: false };\r\n\r\n        // Add Key and Description fields.\r\n        const fields = [\r\n            this.getDataViewField('Key', 'TextBox', this.translate.instant('MANAGE_PARAMETERS.KEY_TITLE'), formMode === 'add', formMode != 'add', [], \r\n                { regex: '^([a-zA-Z0-9-_])*$', regexError: this.translate.instant('MANAGE_PARAMETERS.KEY_REGEX_ERROR')}\r\n            ),\r\n            this.getDataViewField('Description', 'TextArea', this.translate.instant('MANAGE_PARAMETERS.DESCRIPTION_TITLE'), false, false, [], {}, \r\n                { Size: { Width:1, Height:2 } }\r\n            )\r\n        ];\r\n\r\n        // Add Type field only if showType is true.\r\n        if (showType) {\r\n            this.getDataViewField('Type', 'ComboBox', this.translate.instant('MANAGE_PARAMETERS.TYPE_TITLE'), false, formMode != 'add', fieldTypes, noEmptyOption);\r\n        }\r\n        \r\n        // Add DefaultValue field.\r\n        fields.push(this.getDataViewField('DefaultValue', this.convertParamsTypeToDVType(paramType), this.translate.instant('MANAGE_PARAMETERS.DEFAULT_VALUE_TITLE'), \r\n            false, false, [], {}))\r\n            \r\n        // Add Internal and Accessibility_Description fields.\r\n        if (showAccessibility) {\r\n            const accessibilityDescAdditionalProps = { renderTitle: false, renderEnlargeButton: false };\r\n            const accessibilityDescLayout = { Size: { Height: 0, Width: 1 } };\r\n\r\n            fields.push(this.getDataViewField('Accessibility_Description', 'RichTextHTML', this.translate.instant('MANAGE_PARAMETERS.INTERNAL_DESCRIPTION'), \r\n            false, true, [], accessibilityDescAdditionalProps, accessibilityDescLayout)\r\n            );\r\n                \r\n            const accessibilityOptionalValues = [{ Key: 'Internal', Value: 'Internal' }, { Key: 'External', Value: 'External' }];\r\n            fields.push(this.getDataViewField('Accessibility', 'ComboBox', this.translate.instant('MANAGE_PARAMETERS.ACCESSIBILITY_TITLE'), \r\n                false, false, accessibilityOptionalValues, noEmptyOption)\r\n            );\r\n        }\r\n\r\n        return {\r\n            Type: 'Form',\r\n            Fields: fields,\r\n            Context: {\r\n                Name: '',\r\n                Profile: { },\r\n                ScreenSize: 'Tablet'\r\n            }\r\n        };\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PepCompositeLibUtilitiesService",
            "id": "injectable-PepCompositeLibUtilitiesService-d394ea8f6abb5accfecb818463afdff7981a63774224cd2d7b41deffda659490b6b2044b1c1d43cc9c03631d1ac56688aacda5523fee59c3fa7d051e95ee3811",
            "file": "projects/ngx-composite-lib/src/core/common/services/utilities.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n/*\r\n    This service is for utillity usege.\r\n*/\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class PepCompositeLibUtilitiesService {\r\n    constructor(\r\n        // private sessionService: PepSessionService,\r\n        // private httpService: PepHttpService,\r\n        // private loaderService: PepLoaderService\r\n    ) {\r\n        //\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PepDIMXHelperService",
            "id": "injectable-PepDIMXHelperService-e366b4038f7b1d782e30f684ceb98b986524ebd5fc9855acf616b4aaec74f5ea887b51fec31d67460a3eb0487a141f37866229e7219ea6d5e3ca3d9122ef846c",
            "file": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
            "properties": [
                {
                    "name": "dimxFunctions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "options",
                            "type": "DIMXExportOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "DIMXExportOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "import",
                    "args": [
                        {
                            "name": "options",
                            "type": "DIMXImportOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "DIMXImportOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recursive_export",
                    "args": [
                        {
                            "name": "options",
                            "type": "DIMXRecursiveExportOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "DIMXRecursiveExportOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recursive_import",
                    "args": [
                        {
                            "name": "options",
                            "type": "DIMXRecursiveImportOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "DIMXRecursiveImportOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "viewContainerRef",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dimxHostObject",
                            "type": "DIMXHostObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "onDIMXProcessDoneCallback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "dimxEvent",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "viewContainerRef",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dimxHostObject",
                            "type": "DIMXHostObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onDIMXProcessDoneCallback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "dimxEvent",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, ViewContainerRef } from \"@angular/core\";\r\nimport { PepAddonBlockLoaderService } from \"@pepperi-addons/ngx-lib/remote-loader\";\r\n\r\nexport interface DIMXHostObject {\r\n    DIMXAddonUUID: string;\r\n    DIMXResource: string;\r\n}\r\n\r\nexport interface DIMXImportOptions {\r\n    OverwriteObject?: boolean;\r\n    Delimiter?: string;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveImportOptions {\r\n    OverwriteObject?: boolean;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXExportOptions {\r\n    DIMXExportFormat?: string;\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    DIMXExportDelimiter?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveExportOptions {\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\n@Injectable()\r\nexport class PepDIMXHelperService {\r\n    private dimxFunctions!: {\r\n        DIMXImport: (options?: DIMXImportOptions) => void,\r\n        DIMXRecursiveImport: (options?: DIMXRecursiveImportOptions) => void,\r\n        DIMXExport: (options?: DIMXExportOptions) => void,\r\n        DIMXRecursiveExport: (options?: DIMXRecursiveExportOptions) => void\r\n    };\r\n\r\n    constructor(\r\n        private addonBlockLoaderService: PepAddonBlockLoaderService\r\n    ) {\r\n    }\r\n\r\n    register(viewContainerRef: ViewContainerRef, dimxHostObject: DIMXHostObject, onDIMXProcessDoneCallback: (dimxEvent: any) => void) {\r\n        return this.addonBlockLoaderService.loadAddonBlockInContainer({\r\n            container: viewContainerRef,\r\n            name: 'DIMX',\r\n            hostObject: dimxHostObject,\r\n            hostEventsCallback: (event: any) => {\r\n                if (event.action === 'DIMXFunctionsRegister') {\r\n                    this.dimxFunctions = event.value;\r\n                } else if (event.action === 'DIMXProcessDone') {\r\n                    onDIMXProcessDoneCallback(event.value);\r\n                } else {\r\n                    console.error('Unknown event action: ' + event.action);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    import(options?: DIMXImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXImport) === 'function') {\r\n            this.dimxFunctions.DIMXImport(options);\r\n        } else {\r\n            console.error('DIMXImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_import(options?: DIMXRecursiveImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveImport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveImport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    export(options?: DIMXExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXExport) === 'function') {\r\n            this.dimxFunctions.DIMXExport(options);\r\n        } else {\r\n            console.error('DIMXExport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_export(options?: DIMXRecursiveExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveExport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveExport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveExport function not found, are you registered?');\r\n        }\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "addonBlockLoaderService",
                        "type": "PepAddonBlockLoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "addonBlockLoaderService",
                        "type": "PepAddonBlockLoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PepGenericFormService",
            "id": "injectable-PepGenericFormService-b444cdc7b8648be9cc71f79338a72ec3dbeb14e9af926323cb444b1f1f0d6ddc897da863f6f7959de24180f1577985ccfe93c2a3ef415f9705849536404e263d",
            "file": "projects/ngx-composite-lib/generic-form/generic-form.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "convertToUiControlField",
                    "args": [
                        {
                            "name": "field",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createFormField",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasProperty",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks if the object contains property\n",
                    "description": "<p>checks if the object contains property</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 220,
                                "end": 223,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "obj"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 214,
                                "end": 219,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>object</p>\n"
                        },
                        {
                            "name": {
                                "pos": 246,
                                "end": 250,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "prop"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 240,
                                "end": 245,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>property name</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 274,
                                "end": 281,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if contains, false otherwise</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n\r\n@Injectable()\r\nexport class PepGenericFormService { \r\n\r\n    constructor() {\r\n        // \r\n    }\r\n  \r\n    /**\r\n     * checks if the object contains property\r\n     * @param obj object\r\n     * @param prop property name\r\n     * @returns true if contains, false otherwise\r\n    */\r\n    hasProperty(obj: any, prop: string) {\r\n        return Object.prototype.hasOwnProperty.call(obj, prop);\r\n    }\r\n\r\n    createFormField(data: any) {\r\n        const field: any = {};\r\n       \r\n        field.ApiName = data.ApiName;\r\n        field.Value = data.controlFieldValue;\r\n        field.FormattedValue =  data.controlFieldValue;\r\n        field.FieldType = data.FieldType;\r\n        field.Enabled = !data.ReadOnly;\r\n        field.Visible = !data.Hidden;\r\n        field.GroupFields = [];\r\n        field.Highlighted = false;\r\n        field.OptionalValues = data.OptionalValues;\r\n        field.AdditionalProps = data.AdditionalProps;    \r\n\r\n        return field;\r\n    }\r\n\r\n    convertToUiControlField(field: any): any {\r\n        return {\r\n            ApiName: field.ApiName,\r\n            FieldType: field.FieldType,\r\n            Title: field.Title,\r\n            ReadOnly: field.ReadOnlyField,\r\n            Mandatory: field.MandatoryField,\r\n            Hidden: field.Hidden,\r\n            ColumnWidth: field.ColumnWidth,\r\n            ColumnWidthType: 1,\r\n            MaxFieldCharacters: field.MaxCharacters,\r\n            MinValue: field.MinValue,\r\n            MaxValue: field.MaxValue,\r\n            Layout: {\r\n                X: field.Layout.X,\r\n                Y: field.Layout.Y,\r\n                Width: field.Layout.Width,\r\n                Height: field.Layout.Field_Height,\r\n                XAlignment: field.Layout.xAlignment,\r\n                YAlignment: field.Layout.yAlignment,\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 5
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PepGenericListService",
            "id": "injectable-PepGenericListService-32737fb09a76ec7da7d2aadae14b5be1f1ec061abf0e8d8bb18f26b7c6ff7749104e2bbda2bde094bf9f71bffb8af6c46cab21187c3b2c8952f0b83375ddc02c",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "convertToPepRowData",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dataView",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "uuidMapping",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataView",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uuidMapping",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToSmartFilter",
                    "args": [
                        {
                            "name": "input",
                            "type": "IPepGenericListSmartFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IPepSmartFilters",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "IPepGenericListSmartFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToUiControlField",
                    "args": [
                        {
                            "name": "field",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ ApiName: any; FieldType: any; Title: any; ReadOnly: any; ColumnWidth: any; ColumnWidthType: number; Layout: { X: any; Y: any; Width: any; Height: any; XAlignment: any; YAlignment: any; }; }",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSmartFilterFields",
                    "args": [
                        {
                            "name": "dataView",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataView",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getListViewType",
                    "args": [
                        {
                            "name": "dataViewType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"table\" | \"cards\" | \"lines\"",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataViewType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedItems",
                    "args": [
                        {
                            "name": "items",
                            "type": "ObjectsDataRow[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "ObjectsDataRow[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUniqItemId",
                    "args": [
                        {
                            "name": "itemId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasProperty",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks if the object contains property\n",
                    "description": "<p>checks if the object contains property</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 923,
                                "end": 926,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "obj"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 917,
                                "end": 922,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>object</p>\n"
                        },
                        {
                            "name": {
                                "pos": 947,
                                "end": 951,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "prop"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 941,
                                "end": 946,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>property name</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 973,
                                "end": 980,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if contains, false otherwise</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n    IPepGenericListSmartFilter,\r\n    IPepGenericListDataViewField,\r\n    IPepSmartFilters\r\n} from './generic-list.model';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData,\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { PepQueryBuilderService, IPepQueryBuilderField } from '@pepperi-addons/ngx-lib/query-builder';\r\nimport {\r\n    PepRowData,\r\n    ObjectsDataRow\r\n} from '@pepperi-addons/ngx-lib';\r\nimport { GridDataViewField, DataViewFieldTypes } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\n\r\n@Injectable() \r\nexport class PepGenericListService {\r\n\r\n    constructor(\r\n        private _translate: TranslateService,\r\n        private _queryBuilderService: PepQueryBuilderService\r\n    ) {\r\n        //\r\n    }\r\n\r\n    /**\r\n   * checks if the object contains property\r\n   * @param obj object\r\n   * @param prop property name\r\n   * @returns true if contains, false otherwise\r\n   */\r\n    hasProperty(obj: any, prop: string) {\r\n        return Object.prototype.hasOwnProperty.call(obj, prop);\r\n    }\r\n\r\n    getListViewType(dataViewType: string) {\r\n        switch (dataViewType) {\r\n            case 'Grid':\r\n                return 'table';\r\n            case 'Card':\r\n                return 'cards';\r\n            case 'Line':\r\n                return 'lines';\r\n            default:\r\n                return 'table';\r\n        }\r\n    }\r\n\r\n    convertToPepRowData(item: any, dataView: any, uuidMapping: string) {\r\n        const row = new PepRowData();\r\n        let itemFields: any;\r\n\r\n        if (this.hasProperty(item, 'fields') && typeof item.fields === 'object') {\r\n            itemFields = item.fields;\r\n            if (item.isEditable === false) {\r\n                row.IsEditable = false;\r\n            }\r\n            if (item.isSelectableForActions === false) {\r\n                row.IsSelectableForActions = false;\r\n            }\r\n            if (item.isEditable && item.isSelectableForActions && item.isSelected) {\r\n                row.IsSelected = true;\r\n            }\r\n        } else {\r\n            itemFields = item;\r\n        }\r\n\r\n        row.UUID = itemFields[uuidMapping] || undefined;\r\n        row.Fields = [];\r\n\r\n        if (dataView?.Fields && dataView.Columns) {\r\n            for (let index = 0; index < dataView.Fields.length; index++) {\r\n                const field = dataView.Fields[index] as IPepGenericListDataViewField;\r\n                row.Fields.push({\r\n                    ApiName: field.FieldID,\r\n                    Title: field.Title ? this._translate.instant(field.Title) : '',\r\n                    XAlignment: 1,\r\n                    FormattedValue: (itemFields[field.FieldID] || '').toString(),\r\n                    Value: (itemFields[field.FieldID] || '').toString(),\r\n                    ColumnWidth: dataView.Columns[index]?.Width || undefined,\r\n                    AdditionalValue: '',\r\n                    OptionalValues: field.OptionalValues || [],\r\n                    FieldType: DataViewFieldTypes[field.Type],\r\n                    ReadOnly: field.ReadOnly,\r\n                    Enabled: !field.ReadOnly\r\n                })\r\n            }\r\n        }\r\n        return row;\r\n    }\r\n\r\n    convertToUiControlField(field: any) {\r\n        return {\r\n            ApiName: field.ApiName,\r\n            FieldType: field.FieldType,\r\n            Title: field.Title,\r\n            ReadOnly: field.ReadOnlyField,\r\n            ColumnWidth: field.ColumnWidth,\r\n            ColumnWidthType: 1,\r\n            Layout: {\r\n                X: field.Layout.X,\r\n                Y: field.Layout.Y,\r\n                Width: field.Layout.Width,\r\n                Height: field.Layout.Field_Height,\r\n                XAlignment: field.Layout.xAlignment,\r\n                YAlignment: field.Layout.yAlignment,\r\n            }\r\n        }\r\n    }\r\n\r\n    convertToSmartFilter(input: IPepGenericListSmartFilter) {        \r\n        const smartFilters: IPepSmartFilters = {\r\n            fields: [],\r\n            data: [],\r\n            title: 'Filters'\r\n        }\r\n\r\n        if (input) {\r\n            if (input.dataView) {\r\n                smartFilters.fields = this.createSmartFilterFields(input.dataView);\r\n                if (input.data?.length) {\r\n                    smartFilters.data = input.data;\r\n                }\r\n            }\r\n            if (input.title) {\r\n                smartFilters.title = input.title;\r\n            }\r\n        }\r\n\r\n        return smartFilters;        \r\n    }\r\n\r\n    createSmartFilterFields(dataView: any) {\r\n        let smartFields: PepSmartFilterBaseField[] = [];\r\n\r\n        const fields = dataView.Fields.map((field: any) => {\r\n            return {\r\n                FieldID: field.FieldID,\r\n                FieldType: field.Type,\r\n                Title: field.Title,\r\n                OptionalValues: field.OptionalValues\r\n            } as IPepQueryBuilderField\r\n        });\r\n        const smartFilterfields = this._queryBuilderService.convertToSmartFilterFields(fields);\r\n        if (smartFilterfields?.length) {\r\n            smartFields = smartFilterfields.map((field => field.smart));\r\n        }\r\n\r\n        return smartFields;\r\n    }\r\n\r\n    // TODO: This func is copy from ngx-lib write it in one place.\r\n    private getUniqItemId(itemId: string, itemType = ''): string {\r\n        return itemId + ',' + itemType;\r\n    }\r\n\r\n    getSelectedItems(items: ObjectsDataRow[]) {\r\n        const selectedItems = [];\r\n\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (items[i].IsSelected) {\r\n                selectedItems.push(this.getUniqItemId(items[i].UID, items[i].Type?.toString()));\r\n            }\r\n        }\r\n\r\n        return selectedItems;\r\n    }\r\n\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_queryBuilderService",
                        "type": "PepQueryBuilderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "_translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_queryBuilderService",
                        "type": "PepQueryBuilderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RichTextService",
            "id": "injectable-RichTextService-58361978c69c273b211af05888ff3b71a373ad09213a70a32f0241036729979ca623dd4f9ebfd69442caa8332accd1acd0f949a51b6782a7d40ffcc85b935902",
            "file": "projects/ngx-composite-lib/rich-text/rich-text.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "searchFlows",
                    "args": [
                        {
                            "name": "flowKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "flowKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { PepHttpService, PepSessionService } from '@pepperi-addons/ngx-lib';\r\nimport { lastValueFrom } from \"rxjs\";\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class RichTextService {\r\n    \r\n    constructor(\r\n        private httpService: PepHttpService\r\n        ) {\r\n    }\r\n    \r\n    async searchFlows(flowKey: string): Promise<any> {\r\n        return lastValueFrom(await this.httpService.postPapiApiCall('/user_defined_flows/search', { KeyList: [flowKey], Fields: ['Key', 'Name']}));\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "PepHttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "PepHttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "FileStatus",
            "id": "class-FileStatus-4b035ef0afe14a3e8ee2925ca9d4ea8bbe41d32bb4cef6ea10d808cf3a06336d2b9c4ccf0ffbac1b8fb5014d8de3d9774d3a2490d0611c1687d0c750a59ec20b",
            "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export type FileStatusType = 'uploading' | 'downloading' | 'done' | 'failed' | 'hidden' | 'deleting';\r\n\r\nexport class FileStatus {\r\n    key = 0;\r\n    name = '';\r\n    status: FileStatusType = 'uploading';\r\n    statusMessage? = '';\r\n}",
            "properties": [
                {
                    "name": "key",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "status",
                    "defaultValue": "'uploading'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FileStatusType",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "statusMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepColorSettings",
            "id": "class-PepColorSettings-a52806197fbf1cd2eae55c72e9bfcd31f5149a83b5ed75e92d3aadb1cf823670b90d5b697da16ed91cab397f3d8a93d605e2c4a46a4bc9ec1b3c313dee63a413",
            "file": "projects/ngx-composite-lib/color-settings/color-settings.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PepColorSettings {\r\n    use: boolean;\r\n    value: string;\r\n    opacity = 50;\r\n  \r\n    constructor(use = false, value = 'hsl(0, 0%, 57%)', opacity = 50) {\r\n        this.use =  use;\r\n        this.value = value;\r\n        this.opacity = opacity;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "use",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'hsl(0, 0%, 57%)'"
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "50"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "use",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'hsl(0, 0%, 57%)'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "50",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "opacity",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "use",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepShadowSettings",
            "id": "class-PepShadowSettings-e450250cd5384a6f58afdfea42a93d2112de0c90b90dcff6ddea005c36ab223e3125ef1d95f8bc0ffa653691a944cbba74aa56cd3674543fb51884519157d302",
            "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PepSizeType } from \"@pepperi-addons/ngx-lib\";\r\n\r\nexport type PepShadowIntensityType = 'soft' | 'regular' | 'hard';\r\nexport class PepShadowSettings {\r\n    use: boolean;\r\n    size: PepSizeType;\r\n    intensity: PepShadowIntensityType;\r\n\r\n    constructor(use = false, size: PepSizeType = 'md', intensity: PepShadowIntensityType = 'soft') {\r\n        this.use =  use;\r\n        this.size = size;\r\n        this.intensity = intensity;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "use",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    },
                    {
                        "name": "size",
                        "type": "PepSizeType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'md'"
                    },
                    {
                        "name": "intensity",
                        "type": "PepShadowIntensityType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'soft'"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "use",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "size",
                        "type": "PepSizeType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'md'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "intensity",
                        "type": "PepShadowIntensityType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'soft'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "intensity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepShadowIntensityType",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepSizeType",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "use",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "PepResetConfigurationFieldDirective",
            "id": "directive-PepResetConfigurationFieldDirective-f7c52ba6eb9bc6e07c8fe80d6c25b89f5cb3663dc906db24bca79a17ae1d305f5a35caac36fdda902ad89dffdd12ee153ef6e35be2cd9ce9e08bcb3e16e7244e",
            "file": "projects/ngx-composite-lib/src/core/common/directives/reset-configuration-field.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener, ElementRef, AfterViewInit, TemplateRef, ViewContainerRef, Renderer2, Output, EventEmitter, Input, OnDestroy } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { PepSizeType, PepStyleStateType, PepStyleType } from '@pepperi-addons/ngx-lib';\r\nimport { PepIconService, pepIconDeviceResponsive } from '@pepperi-addons/ngx-lib/icon';\r\n\r\n\r\n@Directive({\r\n    selector: '[pepResetConfigurationField]',\r\n})\r\nexport class PepResetConfigurationFieldDirective implements AfterViewInit, OnDestroy {\r\n    @Input('pepResetConfigurationField') resetFieldKey = '';\r\n    @Input() resetHostEvents: EventEmitter<any> = new EventEmitter();\r\n    \r\n    private _disabled = false;\r\n    @Input() \r\n    set disabled(value: boolean) {\r\n        this._disabled = value;\r\n        // this.renderer.setStyle(this.buttonContainer, 'visibility', this.getVisibility());\r\n        this.setButtonStyle(this.resetButton);\r\n    }\r\n    get disabled(): boolean {\r\n        return this._disabled;\r\n    }\r\n\r\n    private _hideReset = false;\r\n    @Input() \r\n    set hideReset(value: boolean) {\r\n        this._hideReset = value;\r\n        // this.renderer.setStyle(this.buttonContainer, 'visibility', this.getVisibility());\r\n        this.setButtonStyle(this.resetButton);\r\n    }\r\n    get hideReset(): boolean {\r\n        return this._hideReset;\r\n    }\r\n\r\n    private _dir: 'rtl' | 'ltr' = 'ltr';\r\n    @Input() \r\n    set dir(value: 'rtl' | 'ltr') {\r\n        this._dir = value;\r\n        this.renderer.setStyle(this.buttonContainer, 'float', this.getFloat());\r\n    }\r\n    get dir(): 'rtl' | 'ltr' {\r\n        return this._dir;\r\n    }\r\n\r\n    // styleType: PepStyleType = 'weak';\r\n    // styleStateType: PepStyleStateType = 'system';\r\n    sizeType: PepSizeType = 'sm';\r\n    resetPosition = 'bottom-end';\r\n    \r\n    private unlistener: (() => void) | undefined;\r\n    private buttonContainer!: HTMLDivElement;\r\n    private resetButton!: HTMLButtonElement;\r\n\r\n    constructor(\r\n        private renderer:Renderer2,\r\n        private element: ElementRef,\r\n        private pepIconService: PepIconService,\r\n        private translate: TranslateService) {\r\n        // Create the buton container.\r\n        this.buttonContainer = this.renderer.createElement('div');\r\n\r\n        this.translate.get('GENERAL.RESET_HINT').toPromise().then(hint => {\r\n            this.renderer.setAttribute(this.buttonContainer, 'title', hint);\r\n        });\r\n    }\r\n\r\n    private getVisibility() {\r\n        return this.disabled || this.hideReset ? 'hidden' : 'visible';\r\n    }\r\n\r\n    private getFloat() {\r\n        return this.dir === 'rtl' ? 'left' : 'right';\r\n    }\r\n\r\n    private setButtonContainerStyle() {\r\n        const css = `\r\n            display: flex;\r\n            justify-content: flex-end;\r\n            float: ${this.getFloat()};\r\n            margin-bottom: 1rem;\r\n        `;\r\n\r\n        this.buttonContainer.setAttribute(\"style\", css);\r\n    }\r\n\r\n    private setButtonStyle(button: HTMLButtonElement) {\r\n        if (button) {\r\n            const css = `\r\n                display: flex !important;\r\n                align-items: center !important;\r\n                height: 1rem !important;\r\n                line-height: unset !important;\r\n                padding: unset !important;\r\n                background: unset !important;\r\n                font-size: var(--pep-button-2xs-font-size) !important;\r\n                visibility: ${this.getVisibility()};\r\n            `;\r\n    \r\n            button.setAttribute(\"style\", css);\r\n        }\r\n    }\r\n\r\n    private setSvgStyle(svg: SVGElement) {\r\n        const css = `\r\n            transform: rotate(270deg);\r\n            width: 0.75rem;\r\n        `;\r\n        svg.setAttribute('style', css);\r\n    }\r\n\r\n    private async getResetElement(): Promise<HTMLElement> {\r\n        this.setButtonContainerStyle();\r\n        this.renderer.addClass(this.buttonContainer, 'pep-reset-configuration-field-container');\r\n\r\n        // Append button\r\n        this.resetButton = this.renderer.createElement('button');\r\n        await this.translate.get('ACTIONS.RESET').toPromise().then(resetText => {\r\n            const buttonText = this.renderer.createText(resetText);\r\n            this.renderer.appendChild(this.resetButton, buttonText);\r\n        });\r\n        \r\n        this.renderer.addClass(this.resetButton, 'pep-button');\r\n        // this.renderer.addClass(button, this.styleType);\r\n        // this.renderer.addClass(button, this.styleStateType);\r\n        this.renderer.addClass(this.resetButton, 'color-link');\r\n        this.renderer.addClass(this.resetButton, this.sizeType);\r\n        this.setButtonStyle(this.resetButton);\r\n        // this.renderer.addClass(button, 'reset-configuration-field-button');\r\n        \r\n        this.unlistener = this.renderer.listen(this.resetButton, 'click', () => this.onResetClicked());\r\n        \r\n        this.renderer.appendChild(this.buttonContainer, this.resetButton);\r\n\r\n        // Append svg\r\n        const svgIcon = this.pepIconService.getSvgIcon(pepIconDeviceResponsive.name);\r\n        this.setSvgStyle(svgIcon);\r\n        this.renderer.appendChild(this.buttonContainer, svgIcon);\r\n\r\n        return this.buttonContainer;\r\n    }\r\n    \r\n    ngAfterViewInit(): void {\r\n        this.getResetElement().then(element => {\r\n            if (this.resetPosition === 'top-end' && this.element.nativeElement.children?.length > 0) {\r\n                this.renderer.insertBefore(this.element.nativeElement, element, this.element.nativeElement.children[0]);\r\n            } else {\r\n                this.renderer.appendChild(this.element.nativeElement, element);\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.unlistener) {\r\n            this.unlistener();\r\n        }\r\n    }\r\n\r\n    onResetClicked() {\r\n        this.resetHostEvents.emit({\r\n            action: 'set-configuration-field',\r\n            key: this.resetFieldKey,\r\n            value: undefined\r\n        });\r\n    }\r\n}\r\n",
            "selector": "[pepResetConfigurationField]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [
                {
                    "name": "dir",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "\"rtl\" | \"ltr\"",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideReset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "pepResetConfigurationField",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "resetHostEvents",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_dir",
                    "defaultValue": "'ltr'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"rtl\" | \"ltr\"",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_hideReset",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "buttonContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLDivElement",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resetButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLButtonElement",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resetPosition",
                    "defaultValue": "'bottom-end'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "sizeType",
                    "defaultValue": "'sm'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepSizeType",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "unlistener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | undefined",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getFloat",
                    "args": [],
                    "optional": false,
                    "returnType": "\"right\" | \"left\"",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getResetElement",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<HTMLElement>",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "getVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "\"hidden\" | \"visible\"",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResetClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setButtonContainerStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setButtonStyle",
                    "args": [
                        {
                            "name": "button",
                            "type": "HTMLButtonElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "button",
                            "type": "HTMLButtonElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSvgStyle",
                    "args": [
                        {
                            "name": "svg",
                            "type": "SVGElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "svg",
                            "type": "SVGElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pepIconService",
                        "type": "PepIconService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pepIconService",
                        "type": "PepIconService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 21
                    }
                },
                "hideReset": {
                    "name": "hideReset",
                    "setSignature": {
                        "name": "hideReset",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "hideReset",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 32
                    }
                },
                "dir": {
                    "name": "dir",
                    "setSignature": {
                        "name": "dir",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "\"rtl\" | \"ltr\"",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "\"rtl\" | \"ltr\"",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "dir",
                        "type": "",
                        "returnType": "\"rtl\" | \"ltr\"",
                        "line": 42
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-0b0b368dd05c4517b8b7dfdd17c9fadf0b2c10872ba399070ca3e3d3b143db7f35180cb4ebd1376cb3ab9b67f1a663b3cbf2694ee710ddfd8096823d4013b11e",
            "file": "projects/ngx-composite-lib-tester/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss",
                "./app.component.theme.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addPadding",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "customizationService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepCustomizationService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "footerHeight",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "layoutService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepLayoutService",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "loaderService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepLoaderService",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "showHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showLoader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "showSidebar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getTopBarStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "PepStyleType",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onHostEvents",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport {\r\n    PepCustomizationService,\r\n    PepLoaderService,\r\n    PepLayoutService,\r\n    PepStyleType,\r\n} from '@pepperi-addons/ngx-lib';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.scss', './app.component.theme.scss'],\r\n})\r\nexport class AppComponent implements OnInit {\r\n    footerHeight = 0;\r\n    showLoader = false;\r\n    showHeader = true;\r\n    showSidebar = false;\r\n    addPadding = true;\r\n\r\n    constructor(\r\n        public customizationService: PepCustomizationService,\r\n        public loaderService: PepLoaderService,\r\n        public layoutService: PepLayoutService,\r\n    ) {\r\n        // this.loaderService.show();\r\n        this.loaderService.onChanged$.subscribe((show) => {\r\n            this.showLoader = show;\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.customizationService.setThemeVariables();\r\n        this.customizationService.hideSettings();\r\n\r\n        this.customizationService.footerHeight.subscribe((footerHeight) => {\r\n            this.footerHeight = footerHeight;\r\n        });\r\n    }\r\n\r\n    getTopBarStyle() {\r\n        return document.documentElement.style.getPropertyValue(\r\n            PepCustomizationService.STYLE_TOP_HEADER_KEY\r\n        ) as PepStyleType;\r\n    }\r\n\r\n    navigateHome() {\r\n        alert('Home');\r\n    }\r\n\r\n    onHostEvents(event: any) {\r\n        //\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '@pepperi-addons/ngx-lib/src/core/style/abstracts/mixins';\r\n@import '@pepperi-addons/ngx-lib/src/core/style/abstracts/variables';\r\n@import 'ngx-composite-lib/src/core/style/abstracts/variables';\r\n\r\n#header {\r\n    height: $header-height;\r\n\r\n    .navbar {\r\n        // border: none !important;\r\n        border-radius: 0;\r\n        // @include box-sizing(border-box);\r\n        box-sizing: border-box;\r\n        height: inherit;\r\n        width: 100%;\r\n        padding: $spacing-lg $double-content-padding;\r\n        margin: 0;\r\n        max-width: $max-scr-width;\r\n\r\n        @media (max-width: $screen-max-size-xs) {\r\n            padding-left: $content-padding;\r\n            padding-right: $content-padding;\r\n        }\r\n\r\n        .navbar-default {\r\n            background-color: transparent;\r\n            border-bottom-color: transparent;\r\n        }\r\n    }\r\n}\r\n\r\n#mainCont {\r\n    flex-grow: 1;\r\n    min-height: 100%;\r\n}\r\n\r\n#loadingSpinnerModal {\r\n    z-index: $z-index-high + 101;\r\n    height: 1rem;\r\n    width: 100%;\r\n    background-color: transparent;\r\n    opacity: 1;\r\n    position: absolute;\r\n    top: $header-height !important;\r\n    overflow: hidden;\r\n}\r\n\r\n#loadingSpinner {\r\n    z-index: $z-index-high;\r\n    width: 100%;\r\n    margin-top: 5px;\r\n\r\n    div {\r\n        width: 7px;\r\n        height: 7px;\r\n        position: absolute;\r\n        left: -20px;\r\n        border-radius: 50%;\r\n        animation: move 4s infinite cubic-bezier(0.2, 0.64, 0.81, 0.23);\r\n    }\r\n\r\n    div:nth-child(2) {\r\n        animation-delay: 150ms;\r\n    }\r\n\r\n    div:nth-child(3) {\r\n        animation-delay: 300ms;\r\n    }\r\n\r\n    div:nth-child(4) {\r\n        animation-delay: 450ms;\r\n    }\r\n\r\n    div:nth-child(5) {\r\n        animation-delay: 600ms;\r\n    }\r\n}\r\n\r\n@keyframes move {\r\n    0% {\r\n        left: 0%;\r\n    }\r\n    50% {\r\n        left: 100%;\r\n    }\r\n    75% {\r\n        left: 100%;\r\n    }\r\n    100% {\r\n        left: 100%;\r\n    }\r\n}\r\n\r\n[dir='rtl'] {\r\n    #loadingSpinner {\r\n        div {\r\n            animation: moveOpp 4s infinite cubic-bezier(0.2, 0.64, 0.81, 0.23);\r\n        }\r\n\r\n        div:nth-child(2) {\r\n            animation-delay: 150ms;\r\n        }\r\n        div:nth-child(3) {\r\n            animation-delay: 300ms;\r\n        }\r\n        div:nth-child(4) {\r\n            animation-delay: 450ms;\r\n        }\r\n        div:nth-child(5) {\r\n            animation-delay: 600ms;\r\n        }\r\n    }\r\n\r\n    @keyframes moveOpp {\r\n        0% {\r\n            left: 100%;\r\n        }\r\n        50% {\r\n            left: -2%;\r\n        }\r\n        75% {\r\n            left: -2%;\r\n        }\r\n        100% {\r\n            left: -2%;\r\n        }\r\n    }\r\n}\r\n\r\n.pep-layout {\r\n    display: grid;\r\n    grid-template-rows: $header-height 1fr;\r\n    grid-template-areas: \"header\"\r\n                         \"main\";\r\n    height: 100vh;\r\n    width: 100%;\r\n    padding: 0;\r\n    overflow: hidden;\r\n\r\n    .pep-header-layout {\r\n        grid-area: header;\r\n        z-index: $z-index-high + 1;\r\n    }\r\n\r\n    .pep-main-layout {\r\n        $main-layout-height: calc(100vh - #{$header-height});\r\n        height: 100%; \r\n        grid-area: main;\r\n        display: flex;\r\n        overflow: hidden;\r\n        \r\n        &.add-padding {\r\n            padding-inline: $content-padding;\r\n\r\n            @media (max-width: $screen-max-size-xs) {\r\n                padding-inline: 0;\r\n            }\r\n        }\r\n\r\n        .pep-side-layout {\r\n            grid-area: side;\r\n            width: auto;\r\n        }\r\n\r\n        .pep-center-layout {\r\n            grid-area: center;\r\n            height: 100%;\r\n            width: 100%;\r\n            overflow: auto;\r\n\r\n            ::ng-deep > * {\r\n                height: inherit;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // .pep-footer-layout {\r\n    //     grid-area: footer;\r\n    //     display: block;\r\n    // }\r\n}",
                    "styleUrl": "./app.component.scss"
                },
                {
                    "data": "@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/mixins';\r\n@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/functions';\r\n\r\n#header {\r\n    background-color: functions.get-pep-color(color-system-primary-invert, color-base);\r\n\r\n    .navbar {\r\n        box-shadow: functions.get-pep-shadow(shadow-sm, regular);\r\n        \r\n        &.weak {\r\n            @include mixins.state-weak-default(color-top-header);\r\n        }\r\n        \r\n        &.regular {\r\n            @include mixins.state-regular-default(true, color-top-header);\r\n        }\r\n        \r\n        &.strong {\r\n            @include mixins.state-strong-default(color-top-header);\r\n        }\r\n        \r\n        border-right: none !important;\r\n        border-left: none !important;\r\n    }\r\n}",
                    "styleUrl": "./app.component.theme.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "PepLoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "PepLoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"loadingSpinnerModal\" *ngIf=\"showHeader\" [hidden]=\"!showLoader\" pepRtlClass>\r\n    <div id=\"loadingSpinner\">\r\n        <div class=\"pep-loading-spinner\" *ngFor=\"let number of [0, 1, 2, 3, 4]\"\r\n            [ngStyle]=\"{ 'background-color': customizationService.getLoadingSpinnerColor() }\"></div>\r\n    </div>\r\n</div>\r\n<div class=\"pep-layout\" dir=\"{{ layoutService.isRtl() ? 'rtl' : 'ltr' }}\">\r\n    <header class=\"pep-header-layout\">\r\n        <div id=\"header\" pepRtlClass>\r\n            <nav class=\"navbar {{ getTopBarStyle() }} navbar-light bg-faded menuCont\"\r\n                [ngStyle]=\"{'background-color': customizationService.getBrandingMainColor() }\">\r\n                <div class=\"pep-spacing-element-negative\">\r\n                    <pep-button sizeType=\"sm\" styleType=\"weak\" classNames=\"keep-background-on-focus\"\r\n                        class=\"pep-spacing-element pull-left flip\" iconName=\"system_home\" (click)=\"navigateHome()\">\r\n                    </pep-button>\r\n                </div>\r\n                <div class=\"pep-spacing-element-negative\">\r\n                    <pep-button [value]=\"'ExampleComponentsTitle' | translate\" sizeType=\"sm\" styleType=\"weak\"\r\n                        class=\"pep-spacing-element pull-right flip\" classNames=\"keep-background-on-focus\"\r\n                        [routerLink]=\"['components-example']\">\r\n                    </pep-button>\r\n                    <pep-button [value]=\"'GenericListExampleComponentTitle' | translate\" sizeType=\"sm\" styleType=\"weak\"\r\n                        class=\"pep-spacing-element pull-right flip\" classNames=\"keep-background-on-focus\"\r\n                        [routerLink]=\"['generic-list-example']\">\r\n                    </pep-button>\r\n                    <pep-button [value]=\"'FormGeneratorExampleComponent' | translate\" sizeType=\"sm\" styleType=\"weak\"\r\n                        class=\"pep-spacing-element pull-right flip\" classNames=\"keep-background-on-focus\"\r\n                        [routerLink]=\"['generic-form-example']\">\r\n                    </pep-button>\r\n                    <pep-button [value]=\"'DataViewBuilderExampleComponent' | translate\" sizeType=\"sm\" styleType=\"weak\"\r\n                        class=\"pep-spacing-element pull-right flip\" classNames=\"keep-background-on-focus\"\r\n                        [routerLink]=\"['data-view-builder-example']\">\r\n                    </pep-button>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    </header>\r\n    <main class=\"pep-main-layout\" [ngClass]=\"{ 'add-padding': addPadding }\">\r\n        <aside *ngIf=\"showSidebar\" class=\"pep-side-layout\">\r\n        </aside>\r\n        <div class=\"pep-center-layout\">\r\n            <router-outlet></router-outlet>\r\n            <!-- Check this for demostrate the block editor that raise hostEvents  -->\r\n            <!-- <app-components-example (hostEvents)=\"onHostEvents($event)\"></app-components-example> -->\r\n        </div>\r\n    </main>\r\n</div>\r\n<pep-size-detector></pep-size-detector>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-8ceaf520f96e5437b08eeda244d84efb29effe62ddca4fc38eaa229085c2a1126c5715e61445bae741505aca1e4d377b350cb05fadd1dc45d9b2bbf7527029f1",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 747,
                            "end": 761,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 748,
                                "end": 756,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ColorSettingsComponent",
            "id": "component-ColorSettingsComponent-fb229fdc724cfcb8dd7cd14ca846c9fdec8e5a2c6d30a63ae682dec644f0d3a6141a1a9e19a6abcd23de69448649b13e124527ddf12012c6dc8e10b563c92eb3",
            "file": "projects/ngx-composite-lib/color-settings/color-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-color-settings",
            "styleUrls": [
                "./color-settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-settings.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checkAAComplient",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "PepColorSettings",
                    "decorators": []
                },
                {
                    "name": "showAAComplient",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "colorChange",
                    "defaultValue": "new EventEmitter<PepColorSettings>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<PepColorSettings>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_color",
                    "defaultValue": "new PepColorSettings()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepColorSettings",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getRGBAcolor",
                    "args": [
                        {
                            "name": "colorObj",
                            "type": "PepColorSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "opac",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "colorObj",
                            "type": "PepColorSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "opac",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSliderBackground",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onColorChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSliderInputChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSliderValueChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUseChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "raiseColorChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { PepColorService } from '@pepperi-addons/ngx-lib';\r\nimport { PepColorSettings } from './color-settings.model';\r\n\r\n@Component({\r\n    selector: 'pep-color-settings',\r\n    templateUrl: './color-settings.component.html',\r\n    styleUrls: ['./color-settings.component.scss']\r\n})\r\nexport class ColorSettingsComponent implements OnInit {\r\n    @Input() title = '';\r\n    @Input() checkAAComplient = true;\r\n    @Input() showAAComplient = true;\r\n\r\n    private _color: PepColorSettings = new PepColorSettings();\r\n    @Input()\r\n    set color(value: PepColorSettings) {\r\n        if (!value) {\r\n            this._color = new PepColorSettings();\r\n        } else {\r\n            this._color = value;\r\n        }\r\n    }\r\n    get color(): PepColorSettings {\r\n        return this._color;\r\n    }\r\n\r\n    @Output()\r\n    colorChange: EventEmitter<PepColorSettings> = new EventEmitter<PepColorSettings>();\r\n    \r\n    constructor(private pepColorService: PepColorService) { }\r\n\r\n    ngOnInit() {\r\n        //\r\n    }\r\n\r\n    private getRGBAcolor(colorObj: PepColorSettings, opac: number | null = null) {\r\n        let rgba = 'rgba(255,255,255,0)';\r\n\r\n        if (colorObj) {\r\n            const color = colorObj.value;\r\n            let opacity = opac != null ? opac : colorObj.opacity;\r\n\r\n            opacity = opacity > 0 ? opacity / 100 : 0;\r\n\r\n            const hsl = this.pepColorService.hslString2hsl(color);\r\n            const rgb = this.pepColorService.hsl2rgb(hsl);\r\n            rgba = 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + opacity + ')';\r\n        }\r\n\r\n        return rgba;\r\n    }\r\n\r\n    private raiseColorChange() {\r\n        this.colorChange.emit(this.color);\r\n    }\r\n\r\n    getSliderBackground() {\r\n        const alignTo = 'right';\r\n    \r\n        const colorObj = new PepColorSettings();\r\n    \r\n        colorObj.value = this.color.value;\r\n        colorObj.opacity = 100;\r\n    \r\n        const gradStr = this.getRGBAcolor(colorObj, 0) + ' , ' + this.getRGBAcolor(colorObj);\r\n    \r\n        return 'linear-gradient(to ' + alignTo + ', ' + gradStr + ')';\r\n    }\r\n\r\n    onUseChanged(value: boolean) {\r\n        this.color.use = value;\r\n        this.raiseColorChange();\r\n    }\r\n\r\n    onColorChanged(value: string) {\r\n        this.color.value = value;\r\n        this.raiseColorChange();\r\n    }\r\n    \r\n    onSliderInputChanged(value: number) {\r\n        this.color.opacity = value;\r\n    }\r\n\r\n    onSliderValueChanged(value: number) {\r\n        this.color.opacity = value;\r\n        this.raiseColorChange();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    width: 100%;\r\n    // max-width: 200px;\r\n}",
                    "styleUrl": "./color-settings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pepColorService",
                        "type": "PepColorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "pepColorService",
                        "type": "PepColorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "color": {
                    "name": "color",
                    "setSignature": {
                        "name": "color",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "PepColorSettings",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "PepColorSettings",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "color",
                        "type": "",
                        "returnType": "PepColorSettings",
                        "line": 24
                    }
                }
            },
            "templateData": "<pep-checkbox class=\"checkbox-as-title\" [label]=\"title\" [renderTitle]=\"false\" [value]=\"color.use\"\r\n    (valueChange)=\"onUseChanged($event)\"></pep-checkbox>\r\n<pep-color [value]=\"color.value\" [label]=\"title + ' ' + ('COLOR_SETTINGS.COLOR' | translate)\" [disabled]=\"!color.use\"\r\n    [checkAAComplient]=\"checkAAComplient\" [showAAComplient]=\"showAAComplient\" (valueChange)=\"onColorChanged($event)\">\r\n</pep-color>\r\n<pep-slider [label]=\"title + ' ' + ('COLOR_SETTINGS.OPACITY' | translate)\" [hint]=\"color.opacity.toString() || ''\"\r\n    [minValue]=\"0\" [maxValue]=\"100\" [disabled]=\"!color.use\" [value]=\"color.opacity\" [background]=\"getSliderBackground()\"\r\n    (inputChange)=\"onSliderInputChanged($event)\" (valueChange)=\"onSliderValueChanged($event)\">\r\n</pep-slider>"
        },
        {
            "name": "ComponentsExampleComponent",
            "id": "component-ComponentsExampleComponent-b23f5310f5145dcccf9a7bf2b38a4f7c092655c997d358b21cce5fb205563810cd06503e2c9a5b842d0cf58ce4c2f3cc54ed1833c400a31e1164a6f865fe686f",
            "file": "projects/ngx-composite-lib-tester/src/app/components-example/components-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-components-example",
            "styleUrls": [
                "./components-example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./components-example.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "hostEvents",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "badgeColor",
                    "defaultValue": "new PepColorSettings(true, 'hsl(50, 0%, 90%)', 75)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "files",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<FileStatus>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "menuItems",
                    "defaultValue": "[{\"key\":'dimxexport', \"text\":\"Export\"}, {\"key\":'dimximport', \"text\":\"Import\"}]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "selectedMenuItem",
                    "defaultValue": "{\"key\":'dimxexport'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "addFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "menuClick",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "menuItemClick",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "testOpenDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { PepColorSettings } from '@pepperi-addons/ngx-composite-lib/color-settings';\r\nimport { FileStatus } from '@pepperi-addons/ngx-composite-lib/file-status-panel';\r\nimport { PepDialogService, PepDialogData, PepDialogSizeType, PepDialogActionButton } from '@pepperi-addons/ngx-lib/dialog';\r\n\r\n@Component({\r\n    selector: 'app-components-example',\r\n    templateUrl: './components-example.component.html',\r\n    styleUrls: ['./components-example.component.scss'],\r\n})\r\nexport class ComponentsExampleComponent implements OnInit {\r\n    public files: Array<FileStatus> = [];\r\n\r\n    @Output() hostEvents: EventEmitter<any> = new EventEmitter();\r\n    \r\n    constructor(private dialog: PepDialogService) { \r\n        //\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        \r\n        this.addFiles();\r\n        \r\n    }\r\n    badgeColor = new PepColorSettings(true, 'hsl(50, 0%, 90%)', 75);\r\n    menuItems = [{\"key\":'dimxexport', \"text\":\"Export\"}, {\"key\":'dimximport', \"text\":\"Import\"}];\r\n    selectedMenuItem = {\"key\":'dimxexport'};\r\n    menuItemClick(value: any){\r\n        console.log(`menu item was clicked with value ${JSON.stringify(value)}`);\r\n       \r\n        // TODO: add dimx addon loader example code here\r\n        switch(value[\"source\"][\"key\"]) {\r\n            // case \"dimxexport\":\r\n            //     this.dimx?.DIMXExportRun({\"DIMXExportFormat\":\"csv\"});\r\n            //     break;\r\n            // case \"dimximport\":\r\n            //     this.dimx?.uploadFile({});\r\n                \r\n            //     break;\r\n            default:\r\n                console.log(\"default reached in menuItemClick switch-case\");\r\n        }\r\n        \r\n    }\r\n\r\n    menuClick(value: any){\r\n        console.log(`menu click with value: ${JSON.stringify(value)}`);\r\n    }\r\n\r\n    addFiles(){\r\n        const file: FileStatus = new FileStatus();\r\n        file.name = 'Test';\r\n        file.status = 'downloading';\r\n        \r\n        window.setInterval(() => { \r\n            this.files.push(file);\r\n            if(this.files.length === 4){\r\n                this.files[2].status = 'done';\r\n                this.files[0].status = 'failed';\r\n            }\r\n            else if(this.files.length === 6){\r\n                this.files = [];\r\n            }\r\n        }, 2000);\r\n    }\r\n\r\n    testOpenDialog() {\r\n        const data = new PepDialogData({\r\n            title: 'dialog title',\r\n            content: 'dialog content text',\r\n            actionsType: 'close'\r\n          });\r\n          const config = this.dialog.getDialogConfig({ minWidth: '30rem' }, 'regular');\r\n      \r\n          this.dialog.openDefaultDialog(data, config).afterClosed().subscribe(action => {\r\n            if (action) {\r\n              console.log('action', action);\r\n            }\r\n          });\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".components-container {\r\n    display: flex;\r\n    flex-flow: column;\r\n    padding: 1rem;\r\n    width: 300px;\r\n    gap: 1rem;\r\n}",
                    "styleUrl": "./components-example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "PepDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "PepDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"components-container\">\r\n    <pep-menu [text]=\"'text'\" iconName=\"system_menu\" type=\"action\" styleType=\"weak\" sizeType=\"md\" classNames=\"hahah\"\r\n        [items]=\"menuItems\" [selectedItem]=\"selectedMenuItem\" [disabled]=\"false\" (menuItemClick)=\"menuItemClick($event)\"\r\n        (menuClick)=\"menuClick($event)\"></pep-menu>\r\n    <pep-color-settings title=\"Color\"></pep-color-settings>\r\n    <pep-shadow-settings></pep-shadow-settings>\r\n    <!-- <pep-button value=\"click here\"></pep-button> -->\r\n    <pep-group-buttons-settings [groupType]=\"'left-right-arrows'\" [title]=\"'Group buttons'\" [subHeader]=\"'Eisenberg'\"\r\n        pepResetConfigurationField=\"'group-buttons-test'\" [dir]=\"'ltr'\" [resetHostEvents]=\"hostEvents\">\r\n    </pep-group-buttons-settings>\r\n    <pep-button [value]=\"'open dialog'\" [sizeType]=\"'sm'\" [styleType]=\"'regular'\" (click)=\"testOpenDialog()\">\r\n    </pep-button>\r\n    <pep-icon-picker [disabled]=\"false\" [useCheckBoxHeader]=\"false\"></pep-icon-picker>\r\n    <pep-rich-text [value]=\"'This is test text'\" \r\n        [label]=\"'Rich text test'\" [inlineMode]=\"false\" >\r\n\r\n    </pep-rich-text>\r\n    <div style=\"height:2rem; width: 20rem; background-color:antiquewhite;\">\r\n        <pep-show-if-badge [showIf]=\"true\" [iconName]=\"'system_menu'\" [backgroundColor]=\"'hsl(39, 100%, 50%)'\"></pep-show-if-badge>\r\n    </div>\r\n</div>"
        },
        {
            "name": "DataViewBuilderComponent",
            "id": "component-DataViewBuilderComponent-47632f47652adc5f71c939951137e40cdf03e5a786e67ca0b637733c559ac0411dd0639b4eb8e220a2ee4cd48caa8af493641dc2ed6ee236d1b51431944e490d",
            "file": "projects/ngx-composite-lib/data-view-builder/data-view-builder.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-data-view-builder",
            "styleUrls": [
                "./data-view-builder.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./data-view-builder.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "availableFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "Array<IPepDraggableItem>",
                    "decorators": []
                },
                {
                    "name": "builderTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "builderTitleHint",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dataView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "BaseDataView",
                    "decorators": []
                },
                {
                    "name": "itemKeyLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "itemTitleLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showAddSeparator",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "dataViewChange",
                    "defaultValue": "new EventEmitter<BaseDataView>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter<BaseDataView>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_availableFields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IPepDraggableItem>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_dataView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseDataView",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "availableFieldsTitles",
                    "defaultValue": "new Map<string, string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | string>",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "emptyDropAreaId",
                    "defaultValue": "'emptyDropArea'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "mappedFieldsId",
                    "defaultValue": "'mappedFields'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "type",
                    "defaultValue": "'not-supported'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepDataViewBuilderType",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "notifyDataViewChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onDragEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragEnd",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragEnd",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragStart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragStart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFieldsChanged",
                    "args": [
                        {
                            "name": "fields",
                            "type": "Array<DataViewField>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "Array<DataViewField>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshAvailableFields",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setAvailableFieldPermission",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disable",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disable",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTitlesMap",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setType",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CdkDragEnd, CdkDragStart } from '@angular/cdk/drag-drop';\r\nimport { Component, EventEmitter, Input, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\r\nimport { IPepDraggableItem } from '@pepperi-addons/ngx-lib/draggable-items';\r\nimport { BaseDataView, DataViewField } from '@pepperi-addons/papi-sdk';\r\nimport { PepDataViewBuilderType } from './data-view-builder.model';\r\nimport { DataViewBuilderService } from './data-view-builder.service';\r\n\r\n@Component({\r\n    selector: 'pep-data-view-builder',\r\n    templateUrl: './data-view-builder.component.html',\r\n    styleUrls: ['./data-view-builder.component.scss']\r\n})\r\nexport class DataViewBuilderComponent implements OnInit {\r\n    // @Input() title: string = '';\r\n    @Input() builderTitle = '';\r\n    @Input() builderTitleHint = '';\r\n    @Input() showAddSeparator = true;\r\n    @Input() itemKeyLabel = '';\r\n    @Input() itemTitleLabel = '';\r\n    \r\n    private _availableFields: Array<IPepDraggableItem> = [];\r\n    @Input()\r\n    set availableFields(value: Array<IPepDraggableItem>) {\r\n        this._availableFields = value;\r\n        this.setTitlesMap();\r\n    }\r\n    get availableFields(): Array<IPepDraggableItem> {\r\n        return this._availableFields;\r\n    }\r\n    \r\n    private _dataView!: BaseDataView;\r\n    @Input()\r\n    set dataView(value: BaseDataView) {\r\n        this._dataView = value;\r\n        this.setType();\r\n        this.refreshAvailableFields();\r\n    }\r\n    get dataView() : BaseDataView {\r\n        return this._dataView;\r\n    }\r\n\r\n    @Output()\r\n    dataViewChange: EventEmitter<BaseDataView> = new EventEmitter<BaseDataView>();\r\n    \r\n    type: PepDataViewBuilderType = 'not-supported';\r\n    \r\n    emptyDropAreaId = 'emptyDropArea';\r\n    mappedFieldsId = 'mappedFields';\r\n\r\n    availableFieldsTitles: Map<string, string> = new Map<string, string>();\r\n\r\n    constructor(\r\n        private dataViewBuilderService: DataViewBuilderService\r\n    ) {\r\n        //\r\n    }\r\n\r\n    private setType() {\r\n        if (this._dataView.Type === 'Menu') {\r\n            this.type = 'menu';\r\n        } else if (this._dataView.Type === 'Grid') {\r\n            this.type = 'list';\r\n        } else if ((this._dataView.Type === 'Card') || \r\n                   (this._dataView.Type === 'Form') || \r\n                   (this._dataView.Type === 'Large') || \r\n                   (this._dataView.Type === 'Line')) {\r\n            this.type = 'card';\r\n        } else {\r\n            this.type = 'not-supported';\r\n        }\r\n    }\r\n\r\n    private setAvailableFieldPermission(field: string, disable: boolean) {\r\n        // Find the item in the available fields\r\n        const item = this.availableFields.find(as => as.data.key === field);\r\n        \r\n        // If exist disable or enable it.\r\n        if (item) {\r\n            item.disabled = disable;\r\n        }\r\n    }\r\n\r\n    private refreshAvailableFields() {\r\n        this.availableFields.forEach(af => af.disabled = false);\r\n        \r\n        if (this.dataView && this.dataView.Fields) {\r\n            for (let index = 0; index < this.dataView.Fields.length; index++) {\r\n                this.setAvailableFieldPermission(this.dataView.Fields[index].FieldID, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setTitlesMap() {\r\n        this.availableFieldsTitles.clear();\r\n\r\n        if (this.availableFields?.length > 0) {\r\n            for (let index = 0; index < this.availableFields.length; index++) {\r\n                const availableField = this.availableFields[index];\r\n\r\n                if (availableField?.data?.key.length > 0) {\r\n                    this.availableFieldsTitles.set(availableField.data.key, availableField.title);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private notifyDataViewChange() {\r\n        this.dataViewChange.emit(this.dataView);\r\n        // console.log(this.dataView);\r\n    }\r\n\r\n    ngOnInit() {\r\n        //\r\n    }\r\n\r\n    onDragStart(event: CdkDragStart) {\r\n        this.dataViewBuilderService.onDragStart(event);\r\n    }\r\n\r\n    onDragEnd(event: CdkDragEnd) {\r\n        this.dataViewBuilderService.onDragEnd(event);\r\n    }\r\n    \r\n    onFieldsChanged(fields: Array<DataViewField>) {\r\n        this.dataView.Fields = fields;\r\n        this.refreshAvailableFields();\r\n        this.notifyDataViewChange();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/variables' as ngx-variables;\r\n\r\n.mapped-fields-container {\r\n    display: grid;\r\n    height: 100%;\r\n    grid-template-columns: auto 1fr;\r\n    grid-template-areas: \r\n        \"side-area    main-area\";\r\n\r\n    .available-fields-side-area {\r\n        grid-area: side-area;\r\n        width: 240px;\r\n        max-width: 240px;\r\n        overflow: auto;\r\n        height: inherit;\r\n        padding-top: ngx-variables.$spacing-2xl;\r\n        margin-inline-end: ngx-variables.$double-content-margin;\r\n    }\r\n    \r\n    .mapped-fields-main-area {\r\n        display: grid;\r\n        grid-template-rows: auto 1fr;\r\n        grid-area: main-area;\r\n        padding-top: ngx-variables.$spacing-2xl;\r\n        overflow: auto;\r\n        height: inherit;\r\n\r\n        .mapped-fields-top-area {\r\n            height: ngx-variables.$top-bar-field-height;\r\n            display: flex;\r\n            align-items: center;\r\n\r\n            // &.pep-border-bottom {\r\n            //     margin-bottom: ngx-variables.$content-margin;\r\n            // }\r\n        }\r\n\r\n        .data-view-by-type-area {\r\n            overflow: auto;\r\n            height: inherit;\r\n            padding-top: ngx-variables.$content-margin;\r\n            padding-bottom: ngx-variables.$content-margin;\r\n            padding-inline: ngx-variables.$spacing-xs;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./data-view-builder.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataViewBuilderService",
                        "type": "DataViewBuilderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "dataViewBuilderService",
                        "type": "DataViewBuilderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "availableFields": {
                    "name": "availableFields",
                    "setSignature": {
                        "name": "availableFields",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "Array<IPepDraggableItem>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "Array<IPepDraggableItem>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "availableFields",
                        "type": "",
                        "returnType": "Array<IPepDraggableItem>",
                        "line": 27
                    }
                },
                "dataView": {
                    "name": "dataView",
                    "setSignature": {
                        "name": "dataView",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "BaseDataView",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "BaseDataView",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "dataView",
                        "type": "",
                        "returnType": "BaseDataView",
                        "line": 38
                    }
                }
            },
            "templateData": "<pep-page-layout >\r\n    <!-- <ng-container pep-top-area>\r\n        <pep-top-bar [title]=\"title\">\r\n            <div header-end-content>\r\n            </div>\r\n        </pep-top-bar>\r\n    </ng-container> -->\r\n    <ng-container pep-main-area>\r\n        <ng-container *ngIf=\"type === 'not-supported' ; then notSupportedTemplate; else supportedTemplate\"></ng-container>\r\n        <ng-template #notSupportedTemplate>\r\n            <span class=\"body-sm ellipsis\">\r\n                {{ 'DATA_VIEW_BUILDER.TYPE_NOT_SUPPORTED' | translate }}\r\n            </span> \r\n        </ng-template>\r\n        <ng-template #supportedTemplate>\r\n            <div *ngIf=\"dataView && availableFields\" class=\"mapped-fields-container\">\r\n                <div class=\"available-fields-side-area\">\r\n                    <pep-draggable-items [items]=\"availableFields\" [title]=\"'DATA_VIEW_BUILDER.AVAILABLE_FIELDS' | translate\" titleType=\"with-bottom-border\" titleSizeType=\"md\"\r\n                        itemPlaceholderType=\"weak\" [showSearch]=\"true\" [dropAreaIds]=\"['emptyDropArea', 'mappedFields']\" (itemDragStarted)=\"onDragStart($event)\" (itemDragEnded)=\"onDragEnd($event)\">\r\n                    </pep-draggable-items>\r\n                </div>\r\n                <div pep-main-area class=\"mapped-fields-main-area\">\r\n                    <div class=\"mapped-fields-top-area pep-border-bottom\"\r\n                        [title]=\"builderTitle + ' ' + (builderTitleHint ? ('(' + builderTitleHint + ')') : '')\">\r\n                        <span class=\"title-md\">{{ builderTitle }}&nbsp;</span>\r\n                        <span *ngIf=\"builderTitleHint\" class=\"color-dimmed\">({{ builderTitleHint }})</span>\r\n                    </div>\r\n                    \r\n                    <div class=\"data-view-by-type-area\" [ngSwitch]=\"type\">\r\n                        <ng-container *ngSwitchCase=\"'menu'\">\r\n                            <menu-data-view [fields]=\"dataView?.Fields || []\" [availableFieldsTitles]=\"availableFieldsTitles\" [emptyDropAreaId]=\"emptyDropAreaId\"\r\n                                [mappedFieldsId]=\"mappedFieldsId\" (fieldsChange)=\"onFieldsChanged($event)\" [showAddSeparator]=\"showAddSeparator\" [itemKeyLabel]=\"itemKeyLabel\" [itemTitleLabel]=\"itemTitleLabel\">\r\n                            </menu-data-view>\r\n                        </ng-container>\r\n                        <!-- <ng-container *ngSwitchDefault>\r\n                        </ng-container> -->\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </ng-template>\r\n    </ng-container>\r\n</pep-page-layout>\r\n\r\n"
        },
        {
            "name": "DataViewBuilderExampleComponent",
            "id": "component-DataViewBuilderExampleComponent-952faccaed70e8b34c8a118e0727dd49915d3b5cd223ec54e3a7281b6ab70ca5c40188fced18d8cef0d29691dba46463a46f44227b471c06293fc38892b91e4f",
            "file": "projects/ngx-composite-lib-tester/src/app/data-view-builder-example/data-view-builder-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-data-view-builder-example",
            "styleUrls": [
                "./data-view-builder-example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./data-view-builder-example.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableFields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IPepDraggableItem>",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "dataView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuDataView",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "onDataViewChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { IPepDraggableItem } from '@pepperi-addons/ngx-lib/draggable-items';\r\nimport { MenuDataView } from '@pepperi-addons/papi-sdk';\r\n\r\n@Component({\r\n    selector: 'app-data-view-builder-example',\r\n    templateUrl: './data-view-builder-example.component.html',\r\n    styleUrls: ['./data-view-builder-example.component.scss'],\r\n})\r\nexport class DataViewBuilderExampleComponent implements OnInit {\r\n\r\n    availableFields: Array<IPepDraggableItem> = [];\r\n    dataView!: MenuDataView;\r\n\r\n    constructor(\r\n    ) { \r\n        //\r\n    }\r\n\r\n    async ngOnInit() {\r\n        \r\n        // Get menu (slugs) dataview\r\n        this.dataView = {\r\n            \"InternalID\": 5731318,\r\n            \"Type\": \"Menu\",\r\n            \"Title\": \"\",\r\n            \"Hidden\": false,\r\n            \"CreationDateTime\": \"2022-04-10T14:19:03Z\",\r\n            \"ModificationDateTime\": \"2022-04-28T09:29:01Z\",\r\n            \"Context\": {\r\n                \"Name\": \"Slugs\",\r\n                \"ScreenSize\": \"Tablet\",\r\n                \"Profile\": {\r\n                    \"InternalID\": 72197,\r\n                    \"Name\": \"Admin\"\r\n                }\r\n            },\r\n            \"Fields\": [\r\n                {\r\n                    \"FieldID\": \"tomer_test\",\r\n                    \"Title\": \"tomer test\"\r\n                },\r\n                {\r\n                    \"FieldID\": \"tomer_admin\",\r\n                    \"Title\": \"tomer admin\"\r\n                }\r\n            ]\r\n        }\r\n\r\n        this.availableFields = [\r\n            { title: 'field 1', data: { key: 'field1' } },\r\n            { title: 'field 2', data: { key: 'field2' } },\r\n            { title: 'field 3', data: { key: 'field3' } },\r\n            { title: 'tomer test', data: { key: 'tomer_test' } },\r\n            { title: 'tomer admin', data: { key: 'tomer_admin' } },\r\n            { title: '1field 1', data: { key: '1field1' } },\r\n            { title: '1field 2', data: { key: '1field2' } },\r\n            { title: '1field 3', data: { key: '1field3' } },\r\n            { title: '1tomer test', data: { key: '1tomer_test' } },\r\n            { title: '1tomer admin', data: { key: '1tomer_admin' } },\r\n            { title: '2field 1', data: { key: '2field1' } },\r\n            { title: '2field 2', data: { key: '2field2' } },\r\n            { title: '2field 3', data: { key: '2field3' } },\r\n            { title: '2tomer test', data: { key: '2tomer_test' } },\r\n            { title: '2tomer admin', data: { key: '2tomer_admin' } },\r\n            { title: '3field 1', data: { key: '3field1' } },\r\n            { title: '3field 2', data: { key: '3field2' } },\r\n            { title: '3field 3', data: { key: '3field3' } },\r\n            { title: '3tomer test', data: { key: '3tomer_test' } },\r\n            { title: '3tomer admin', data: { key: '3tomer_admin' } }\r\n        ]\r\n    }\r\n\r\n    onDataViewChange(event: any) {\r\n        console.log('onDataViewChange', event);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./data-view-builder-example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<pep-data-view-builder builderTitle=\"sub test\" builderTitleHint=\"hint\"\r\n    [availableFields]=\"availableFields\" [dataView]=\"dataView\" (dataViewChange)=\"onDataViewChange($event)\"></pep-data-view-builder>\r\n"
        },
        {
            "name": "FileStatusPanelComponent",
            "id": "component-FileStatusPanelComponent-73ebf0e92fc5d432f7c88ca01cb281e9bcea8f687a647234522ddd6053d9642fc73773bd0dde24662c1e48dd199755dae3221420b6fe3d4a6c631f8547626e26",
            "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-file-status-panel",
            "styleUrls": [
                "./file-status-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-status-panel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closeClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepSnackBarData",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_SNACK_BAR_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "snackBarRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSnackBarRef<FileStatusPanelComponent>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCloseClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Injectable, Input, Output, EventEmitter, Optional, Inject } from '@angular/core';\r\nimport { MatSnackBarRef, MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { PepSnackBarData } from '@pepperi-addons/ngx-lib/snack-bar';\r\nimport { FileStatus } from './file-status-panel.model';\r\n\r\n@Component({\r\n    selector: 'pep-file-status-panel',\r\n    templateUrl: './file-status-panel.component.html',\r\n    styleUrls: ['./file-status-panel.component.scss']\r\n})\r\nexport class FileStatusPanelComponent implements OnInit {\r\n    // @Input() title = '';\r\n    // @Input() filesList: Array<FileStatus> = [];\r\n    \r\n    @Output()\r\n    closeClick: EventEmitter<void> = new EventEmitter<void>();\r\n    \r\n    constructor(\r\n        @Inject(MAT_SNACK_BAR_DATA) public data: PepSnackBarData,\r\n        public snackBarRef: MatSnackBarRef<FileStatusPanelComponent>\r\n    ) {\r\n       //\r\n    }\r\n\r\n    ngOnInit() {\r\n        //\r\n    }\r\n\r\n    onCloseClicked(event: any): void {\r\n        this.closeClick.emit();\r\n    }\r\n\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @use '@pepperi-addons/ngx-lib/src/core/style/abstracts/variables' as ngx-variables;\r\n\r\n.upload-panel-contnainer {\r\n    .panel-content {\r\n        max-height: 50vh;\r\n        overflow: auto;\r\n    \r\n        ul {\r\n            list-style-type: none;\r\n            padding: 0;  \r\n    \r\n            li {\r\n                height: 1.25rem;\r\n                margin-top: .5rem;\r\n                display: flex;\r\n                flex-direction: row;\r\n                align-items: center;\r\n    \r\n                pep-icon {\r\n                    height: 1rem;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./file-status-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "PepSnackBarData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBarRef",
                        "type": "MatSnackBarRef<FileStatusPanelComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "PepSnackBarData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarRef",
                        "type": "MatSnackBarRef<FileStatusPanelComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<pep-snack-bar class=\"upload-panel-contnainer\" [snackBarRef]=\"snackBarRef\" [title]=\"data.title\" (closeClick)=\"onCloseClicked($event)\" >\r\n    <div pep-snack-bar-content class=\"panel-content\">\r\n        <ul *ngIf=\"data.content.length\">\r\n            <li *ngFor=\"let file of data.content\">\r\n                <ng-container *ngIf=\"file?.status !== 'hidden'\">\r\n                    <span class=\"color-dimmed body-sm ellipsis\">{{file.name}}</span>\r\n                    <pep-icon class=\"pep-spacing-element\" name=\"arrow_right_alt\"></pep-icon>\r\n                    <span class=\"body-sm\" title=\"{{file.statusMessage}}\">{{file.status}}</span>\r\n                </ng-container>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</pep-snack-bar>"
        },
        {
            "name": "FlowPickerButtonComponent",
            "id": "component-FlowPickerButtonComponent-f3111c434b5f5e2b5086ae5586328cbc3391fa9b8fb947a6e5aec6b9b06b3b451bf075b4662de296660e1004de710fd19f16cfaf12d44f877861a54461392238",
            "file": "projects/ngx-composite-lib/flow-picker-button/flow-picker-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-flow-picker-button",
            "styleUrls": [
                "./flow-picker-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./flow-picker-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "flowHostObject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "styleType",
                    "defaultValue": "'weak'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "PepStyleType",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "flowChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_flowHostObject",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "choosenFlowKey",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "choosenFlowName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "initChoosenFlow",
                    "args": [
                        {
                            "name": "flowKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "flowKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openFlowPickerDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setChoosenFlow",
                    "args": [
                        {
                            "name": "flowKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "flowKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, ViewContainerRef } from '@angular/core';\r\nimport { PepStyleType } from '@pepperi-addons/ngx-lib';\r\nimport { PepAddonBlockLoaderService } from '@pepperi-addons/ngx-lib/remote-loader';\r\nimport { FlowPickerService } from './flow-picker-button.service';\r\n\r\n@Component({\r\n    selector: 'pep-flow-picker-button',\r\n    templateUrl: './flow-picker-button.component.html',\r\n    styleUrls: ['./flow-picker-button.component.scss']\r\n})\r\nexport class FlowPickerButtonComponent implements OnInit {\r\n\r\n    private _flowHostObject: any = undefined;\r\n    @Input()\r\n    set flowHostObject(value: any) {\r\n        this._flowHostObject = value;\r\n        \r\n        // If there is a flow key - search for the flow name.\r\n        if (value?.runFlowData?.FlowKey) {\r\n            this.setChoosenFlow(value.runFlowData.FlowKey);\r\n        } else {\r\n            this.initChoosenFlow('');\r\n        }\r\n    }\r\n    get flowHostObject(): any {\r\n        return this._flowHostObject;\r\n    }\r\n\r\n    @Input() disabled = false;\r\n    @Input() styleType: PepStyleType = 'weak';\r\n    \r\n    @Output()\r\n    flowChange: EventEmitter<any> = new EventEmitter<any>();\r\n    \r\n    protected choosenFlowName = '';\r\n    protected choosenFlowKey = '';\r\n\r\n    constructor(\r\n        private viewContainerRef: ViewContainerRef,\r\n        private addonBlockLoaderService: PepAddonBlockLoaderService, \r\n        private flowPickerService: FlowPickerService) { }\r\n\r\n    private initChoosenFlow(flowKey: string) {\r\n        this.choosenFlowKey = flowKey;\r\n        this.choosenFlowName = '';\r\n    }\r\n\r\n    private setChoosenFlow(flowKey: string) {\r\n        // If this is not the same flow key\r\n        if (this.choosenFlowKey !== flowKey) {\r\n            this.initChoosenFlow(flowKey);\r\n    \r\n            // Search for the flow name.\r\n            this.flowPickerService.searchFlows(flowKey).then(flows => {\r\n                if (flows?.Objects?.length > 0) {\r\n                    this.choosenFlowName = flows.Objects[0].Name || undefined;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        // Do nothing.\r\n    }\r\n\r\n    openFlowPickerDialog() {\r\n        const dialogRef = this.addonBlockLoaderService.loadAddonBlockInDialog({\r\n            container: this.viewContainerRef,\r\n            name: 'FlowPicker',\r\n            size: 'large',\r\n            hostObject: this.flowHostObject,\r\n            hostEventsCallback: async (event) => {\r\n                if (event.action === 'on-done') {\r\n                    // If flow key exist - search for the flow name.\r\n                    if (event.data?.FlowKey) {\r\n                        this.setChoosenFlow(event.data.FlowKey);\r\n                        this.flowChange.emit(event.data);\r\n                    } else {\r\n                        this.initChoosenFlow('');\r\n                        this.flowChange.emit(null);\r\n                    }\r\n\r\n                    dialogRef?.close();\r\n                } else if (event.action === 'on-cancel') {\r\n                    dialogRef?.close();\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    width: 100%;\r\n    // max-width: 200px;\r\n}",
                    "styleUrl": "./flow-picker-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "addonBlockLoaderService",
                        "type": "PepAddonBlockLoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "flowPickerService",
                        "type": "FlowPickerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "addonBlockLoaderService",
                        "type": "PepAddonBlockLoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "flowPickerService",
                        "type": "FlowPickerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "flowHostObject": {
                    "name": "flowHostObject",
                    "setSignature": {
                        "name": "flowHostObject",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 15,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "flowHostObject",
                        "type": "any",
                        "returnType": "any",
                        "line": 25
                    }
                }
            },
            "templateData": "<pep-button class=\"flow-button\" [styleType]=\"styleType\"\r\n    [value]=\"choosenFlowKey ? (choosenFlowName || choosenFlowKey) : ('FLOW_PICKER_BUTTON.CHOOSE_FLOW' | translate)\" \r\n    [disabled]=\"disabled\" (buttonClick)=\"openFlowPickerDialog()\">\r\n</pep-button>"
        },
        {
            "name": "GenericFormComponent",
            "id": "component-GenericFormComponent-ddd7e9a8fa22c734a3303c99514ef1a725aa28931de2e4e7e257538723ebc3f76ae9def385b29211ec4f9b7664934e1bd360d94c8f568eea8baa7bacd0ad4078",
            "file": "projects/ngx-composite-lib/generic-form/generic-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "PepGenericFormService",
                    "type": "injectable"
                }
            ],
            "selector": "pep-generic-form",
            "styleUrls": [
                "./generic-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./generic-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "addPadding",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "dataView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "IPepGenericFormDataView",
                    "decorators": []
                },
                {
                    "name": "inline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isLocked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showTopBar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fieldClick",
                    "defaultValue": "new EventEmitter<IPepGenericFormValueChange>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter<IPepGenericFormValueChange>"
                },
                {
                    "name": "formValidationChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepGenericFormValueChange>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter<IPepGenericFormValueChange>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_formData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ObjectsDataRow",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_genericFormService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepGenericFormService",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "_pepForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_pepFormContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef | undefined",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_uiControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UIControl",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepGenericFormData",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initForm",
                    "args": [
                        {
                            "name": "dataView",
                            "type": "IPepGenericFormDataView",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataView",
                            "type": "IPepGenericFormDataView",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onfieldClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFormValidationChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onValueChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateFields",
                    "args": [
                        {
                            "name": "fields",
                            "type": "IPepGenericFormFieldUpdate[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupdates form field(s) params\n",
                    "description": "<p>updates form field(s) params</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6433,
                                "end": 6439,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "fields"
                            },
                            "type": "IPepGenericFormFieldUpdate[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6427,
                                "end": 6432,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateFieldValue",
                    "args": [
                        {
                            "name": "fieldChanged",
                            "type": "IPepGenericFormValueChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupdates form field's value\n",
                    "description": "<p>updates form field&#39;s value</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "fieldChanged",
                            "type": "IPepGenericFormValueChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n    Component,\r\n    OnInit,\r\n    Input,\r\n    Output,\r\n    ViewChild,\r\n    ViewContainerRef,\r\n    EventEmitter,   \r\n    Type,\r\n} from '@angular/core';\r\n//import { PepFormComponent } from '@pepperi-addons/ngx-lib/form';\r\nimport {\r\n    IPepGenericFormDataView,\r\n    IPepGenericFormValueChange,\r\n    IPepGenericFormFieldUpdate,\r\n    IPepGenericFormData\r\n} from './generic-form.model';\r\nimport {\r\n    UIControl,\r\n    ObjectsDataRow,\r\n    ObjectsDataRowCell,\r\n    PepGuid,\r\n    PepLayoutService\r\n} from '@pepperi-addons/ngx-lib';\r\nimport { DataViewConverter } from '@pepperi-addons/data-views';\r\nimport { PepGenericFormService } from './generic-form.service';\r\n\r\n\r\n@Component({\r\n    selector: 'pep-generic-form',\r\n    templateUrl: './generic-form.component.html',\r\n    styleUrls: ['./generic-form.component.scss'],\r\n    providers: [PepGenericFormService]\r\n})\r\nexport class GenericFormComponent implements OnInit {\r\n    private _pepFormContainer: ViewContainerRef | undefined;\r\n    @ViewChild('pepFormContainer', { read: ViewContainerRef })\r\n    set pepListContainer(val: ViewContainerRef) {\r\n        this._pepFormContainer = val;\r\n    }\r\n\r\n    private _data: any;\r\n    @Input()\r\n    set dataSource(val: any) {\r\n        this._data = val;\r\n    }\r\n\r\n    private _formData: ObjectsDataRow;\r\n    private _uiControl: UIControl;\r\n    @Input()\r\n    set dataView(val: IPepGenericFormDataView) {\r\n        this.initForm(val);\r\n    }\r\n\r\n    @Input()\r\n    isLocked = false;\r\n\r\n    @Input()\r\n    inline = false;\r\n\r\n    @Input()\r\n    showTopBar = false;\r\n\r\n    @Input()\r\n    addPadding = false;\r\n\r\n    @Output()\r\n    valueChange: EventEmitter<IPepGenericFormValueChange> = new EventEmitter<IPepGenericFormValueChange>();\r\n\r\n    @Output()\r\n    fieldClick: EventEmitter<IPepGenericFormValueChange> = new EventEmitter<IPepGenericFormValueChange>();\r\n\r\n    @Output()\r\n    formValidationChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n    private _pepForm: any;\r\n\r\n    constructor(        \r\n        private layoutService: PepLayoutService,\r\n        public _genericFormService: PepGenericFormService\r\n    ) {\r\n        this.layoutService.onResize$.pipe().subscribe((size) => {\r\n            //            \r\n        });\r\n        this._formData = new ObjectsDataRow();\r\n        this._uiControl = new UIControl();\r\n    }\r\n\r\n    ngOnInit() {\r\n        //        \r\n    }\r\n\r\n    private initForm(dataView: IPepGenericFormDataView) {\r\n        setTimeout(async () => {\r\n            if (this._pepFormContainer) {\r\n                if (this._pepFormContainer.length) {\r\n                    this._pepFormContainer.remove();\r\n                    this._formData = new ObjectsDataRow();\r\n                    this._uiControl = new UIControl();\r\n                }               \r\n                const { PepFormComponent } = await import('@pepperi-addons/ngx-lib/form');                  \r\n                const componentRef = this._pepFormContainer.createComponent(PepFormComponent);    \r\n\r\n                this._pepForm = componentRef.instance;\r\n\r\n                this._formData.IsEditable = !this.isLocked;\r\n                this._formData.UID = dataView.UID || PepGuid.newGuid();\r\n                const uiControlData = DataViewConverter.toUIControlData(dataView);\r\n                if (uiControlData) {\r\n                    if (uiControlData?.ControlFields) {\r\n                        this._uiControl.ControlFields = uiControlData.ControlFields.map((field: any) => this._genericFormService.convertToUiControlField(field));\r\n                    }\r\n                    this._uiControl.Columns = uiControlData.Columns;\r\n\r\n                    if (this._uiControl.ControlFields?.length) {\r\n                        this._formData.Fields = [];\r\n                        this._uiControl.ControlFields.forEach((item) => {\r\n                            let value = '';\r\n                            if (this._genericFormService.hasProperty(this._data, item.ApiName)) {\r\n                                value = this._data[item.ApiName];\r\n                            }\r\n                            let dataViewField: any;\r\n                            if (dataView.Fields) {\r\n                                dataViewField = dataView.Fields.find(field => field.FieldID === item.ApiName);\r\n                            }\r\n                            const controlFieldData = {\r\n                                ...item,\r\n                                ...{\r\n                                    controlFieldValue: value\r\n                                },\r\n                                ...{\r\n                                    OptionalValues: dataViewField?.OptionalValues?.length ? dataViewField.OptionalValues : [],\r\n                                    AdditionalProps: dataViewField?.AdditionalProps || null\r\n                                }\r\n                            }\r\n                            this._formData.Fields.push(this._genericFormService.createFormField(controlFieldData));\r\n                        });\r\n\r\n                        componentRef.instance.layoutType = 'form';\r\n                        componentRef.instance.layout = this._uiControl;\r\n                        componentRef.instance.data = this._formData;\r\n                        componentRef.instance.isInternal = false;\r\n                        componentRef.instance.lockFields = this.isLocked;\r\n                        componentRef.instance.valueChange.subscribe(($event) => {\r\n                            this.onValueChanged($event);\r\n                        });\r\n                        componentRef.instance.fieldClick.subscribe(($event) => {\r\n                            this.onfieldClicked($event);\r\n                        });\r\n                        componentRef.instance.formValidationChange.subscribe(($event) => {\r\n                            this.onFormValidationChanged($event);\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        }, 0);\r\n    }\r\n\r\n    /**\r\n     * updates form field's value\r\n     * @param field object containing the data of the required update\r\n     */\r\n    private updateFieldValue(fieldChanged: IPepGenericFormValueChange) {\r\n        this._data[fieldChanged.ApiName] = fieldChanged.Value;\r\n    }\r\n\r\n    getData(): IPepGenericFormData {\r\n        return {\r\n            UID: this._formData.UID,\r\n            Values: this._data\r\n        };\r\n    }\r\n\r\n    /**\r\n    * updates form field(s) params\r\n    * @param fields\r\n    */\r\n    updateFields(fields: IPepGenericFormFieldUpdate[]) {\r\n        // update data view with current data\r\n        for (const [key, value] of Object.entries(this._data)) {\r\n            const index = this._formData.Fields.findIndex((item) => item.ApiName === key);\r\n            if (index >= 0) {\r\n                const item = this._formData.Fields[index] as { [k: string]: any };\r\n                item.Value = value;\r\n            }\r\n        }\r\n\r\n        fields.forEach((field) => {\r\n            const index = this._formData.Fields.findIndex((item) => item.ApiName === field.FieldId);\r\n            if (index >= 0) {\r\n                for (const [key, value] of Object.entries(field.Params)) {\r\n                    if (this._genericFormService.hasProperty(this._formData.Fields[index], key)) {\r\n                        const item = this._formData.Fields[index] as { [k: string]: any };\r\n                        item[key] = value;\r\n                        if (key === 'Value') {\r\n                            //manually updating formattedValue because FormattedValue is legacy used by webapp\r\n                            item.FormattedValue = value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this._pepForm.ReloadForm()\r\n        this._pepForm.data = this._formData;\r\n    }\r\n\r\n    onValueChanged(event: any) {\r\n        const field: IPepGenericFormValueChange = {\r\n            UID: event.id,\r\n            ApiName: event.key,\r\n            Value: event.value\r\n        };\r\n        this.updateFieldValue(field);\r\n        this.valueChange.emit(field);\r\n    }\r\n\r\n    onfieldClicked(event: any) {\r\n        const field: IPepGenericFormValueChange = {\r\n            UID: event.id,\r\n            ApiName: event.key,\r\n            Value: event.value\r\n        };\r\n        this.updateFieldValue(field);\r\n        this.fieldClick.emit(field);\r\n    }\r\n\r\n    onFormValidationChanged(event: any) {\r\n        this.formValidationChange.emit(event);\r\n    }\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/variables' as ngx-variables;\r\n\r\n:host {\r\n    height: inherit;\r\n    display: block;\r\n}\r\n\r\n.main-area-container {\r\n    display: grid;\r\n    height: inherit;\r\n}\r\n\r\n.inline-container {\r\n    height: inherit;\r\n    display: grid;\r\n    grid-template-rows: auto 1fr;\r\n\r\n    &.add-padding {\r\n        padding-inline: ngx-variables.$content-padding;\r\n    }\r\n}\r\n\r\n.padding-bottom {\r\n    padding-bottom: ngx-variables.$content-padding;\r\n}\r\n\r\n.form-container {\r\n    \r\n}\r\n",
                    "styleUrl": "./generic-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_genericFormService",
                        "type": "PepGenericFormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_genericFormService",
                        "type": "PepGenericFormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "pepListContainer": {
                    "name": "pepListContainer",
                    "setSignature": {
                        "name": "pepListContainer",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "ViewContainerRef",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "ViewContainerRef",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "dataSource": {
                    "name": "dataSource",
                    "setSignature": {
                        "name": "dataSource",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 44,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "dataView": {
                    "name": "dataView",
                    "setSignature": {
                        "name": "dataView",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "IPepGenericFormDataView",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 51,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "IPepGenericFormDataView",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div *ngIf=\"inline\" class=\"inline-container\" [ngClass]=\"{ 'add-padding': addPadding }\">\r\n    <div *ngIf=\"showTopBar\" class=\"inline-top-bar-container\">\r\n        <ng-container *ngTemplateOutlet=\"topBarTemplate\"></ng-container>\r\n    </div>\r\n    <ng-container *ngTemplateOutlet=\"formTemplate\"></ng-container>\r\n</div>\r\n\r\n<pep-page-layout *ngIf=\"!inline\" [addPadding]=\"addPadding\">\r\n    <ng-container *ngIf=\"showTopBar\" pep-top-area>\r\n        <ng-container *ngTemplateOutlet=\"topBarTemplate\"></ng-container>\r\n    </ng-container>\r\n    <div pep-main-area class=\"main-area-container\">\r\n        <ng-container *ngTemplateOutlet=\"formTemplate\"></ng-container>\r\n    </div>\r\n</pep-page-layout>\r\n\r\n<ng-template #topBarTemplate>\r\n    <pep-top-bar [inline]=\"inline\"> \r\n        <div header-start-content>\r\n            <ng-content select=\"[left-buttons]\"></ng-content>\r\n        </div>\r\n        <div header-end-content>\r\n            <ng-content select=\"[right-buttons]\"></ng-content>\r\n        </div>\r\n\r\n        <!-- <div footer-start-content>\r\n            <ng-content select=\"[bottom-left-buttons]\"></ng-content>\r\n        </div>\r\n        <div footer-end-content>\r\n            <ng-content select=\"[bottom-right-buttons]\"></ng-content>\r\n        </div> -->\r\n    </pep-top-bar>\r\n</ng-template>\r\n\r\n<ng-template #formTemplate>\r\n    <!-- class=\"form-view\"  -->\r\n    <div [ngClass]=\"{'form-view': showTopBar, 'padding-bottom': !showTopBar}\">\r\n        <ng-container #pepFormContainer></ng-container>\r\n    </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "GenericFormExampleComponent",
            "id": "component-GenericFormExampleComponent-d340cc88ec5483d4f92a97bfc0e12e52c4b25cdc563a70b0837403762686a359fa9fa1e4bd3e08000d02490a9bea99c77580bc9ef075bba2e51316c907a0134d",
            "file": "projects/ngx-composite-lib-tester/src/app/generic-form-example/generic-form-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-generic-form-example",
            "styleUrls": [
                "./generic-form-example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./generic-form-example.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataSource",
                    "defaultValue": "FakeData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "dataView",
                    "defaultValue": "{\r\n        UID: 'ABCD-DCBA-FGHD-POLK',\r\n        Type: 'Form',\r\n        Hidden: false,\r\n        Columns: [{}],\r\n        Context: {\r\n            Object: {\r\n                Resource: 'transactions',\r\n                InternalID: 290714,\r\n                Name: '1OlegImpExpרg'\r\n            },\r\n            Name: 'OrderCartItemForm',\r\n            ScreenSize: 'Tablet',\r\n            Profile: {\r\n                InternalID: 46273,\r\n                Name: 'Rep'\r\n            }\r\n        },\r\n        Fields: FakeDataViewFields,\r\n        Rows: []\r\n\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericFormDataView",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\r\n        key: 'key1field',\r\n        value: 'abc',\r\n        mandatory: false,\r\n        readonly: false,\r\n        disabled: false,\r\n        maxFieldCharacters: 0,\r\n        type: 'text',\r\n        minValue: 0,\r\n        maxValue: 999999,\r\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "formContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GenericFormComponent | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formContainer'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "inline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "isFormValid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "isLocked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "getInitialDataView",
                    "args": [],
                    "optional": false,
                    "returnType": "{ UID: string; Type: string; Hidden: boolean; Columns: {}; Context: { Object: { Resource: string; InternalID: number; Name: string; }; Name: string; ScreenSize: string; Profile: { InternalID: number; Name: string; }; }; Fields: any; Rows: {}; }",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFormValidationChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onGetDataClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSaveDataClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onValueChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, AfterViewInit, ViewChild } from '@angular/core';\r\nimport { FormDataView, BaseFormDataViewField } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { FakeDataViewFields, FakeData, uiControlData } from './fake-data';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { DataViewConverter } from '@pepperi-addons/data-views';\r\n\r\nimport {\r\n    IPepGenericFormDataView,\r\n    PepGenericFormService\r\n} from '@pepperi-addons/ngx-composite-lib/generic-form';\r\nimport { GenericFormComponent } from '@pepperi-addons/ngx-composite-lib/generic-form';\r\n\r\n\r\n@Component({\r\n    selector: 'app-generic-form-example',\r\n    templateUrl: './generic-form-example.component.html',\r\n    styleUrls: ['./generic-form-example.component.scss']\r\n})\r\nexport class GenericFormExampleComponent implements OnInit {\r\n    @ViewChild('formContainer') formContainer: GenericFormComponent | undefined;\r\n\r\n    /*dataSource: IPepGenericFormDataSource = {\r\n        UID: 'ABCD-DCBA',\r\n        IsEnabled: true,\r\n        Values: FakeData,\r\n    };*/\r\n    dataSource: any = FakeData;\r\n    isLocked = false;\r\n    isFormValid = false;\r\n\r\n    dataView: IPepGenericFormDataView = {\r\n        UID: 'ABCD-DCBA-FGHD-POLK',\r\n        Type: 'Form',\r\n        Hidden: false,\r\n        Columns: [{}],\r\n        Context: {\r\n            Object: {\r\n                Resource: 'transactions',\r\n                InternalID: 290714,\r\n                Name: '1OlegImpExpרg'\r\n            },\r\n            Name: 'OrderCartItemForm',\r\n            ScreenSize: 'Tablet',\r\n            Profile: {\r\n                InternalID: 46273,\r\n                Name: 'Rep'\r\n            }\r\n        },\r\n        Fields: FakeDataViewFields,\r\n        Rows: []\r\n\r\n    };\r\n\r\n    inline = false;\r\n    form: FormGroup = this.fb.group({\r\n        key: 'key1field',\r\n        value: 'abc',\r\n        mandatory: false,\r\n        readonly: false,\r\n        disabled: false,\r\n        maxFieldCharacters: 0,\r\n        type: 'text',\r\n        minValue: 0,\r\n        maxValue: 999999,\r\n    });\r\n\r\n    constructor(private genericFormService: PepGenericFormService, private fb: FormBuilder) {\r\n        //\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        //\r\n        //  console.log('data view', DataViewConverter.toDataView(uiControlData));\r\n        //  console.log('data view 2', this.dataView);\r\n\r\n    }\r\n    /*\r\n\r\n    onFormValidationChange(event: any) {\r\n        this.isFormValid = event;\r\n    }*/\r\n\r\n    onValueChanged(event: any) {\r\n        console.log('on form value changed', event)\r\n        //  this.isLocked = true;\r\n    }\r\n\r\n    getInitialDataView() {\r\n        return {\r\n            UID: 'ABCD-DCBA-FGHD-POLK',\r\n            Type: 'Form',\r\n            Hidden: false,\r\n            Columns: [{}],\r\n            Context: {\r\n                Object: {\r\n                    Resource: 'transactions',\r\n                    InternalID: 290714,\r\n                    Name: '1OlegImpExpרg'\r\n                },\r\n                Name: 'OrderCartItemForm',\r\n                ScreenSize: 'Tablet',\r\n                Profile: {\r\n                    InternalID: 46273,\r\n                    Name: 'Rep'\r\n                }\r\n            },\r\n            Fields: FakeDataViewFields,\r\n            Rows: []\r\n        }\r\n    }\r\n\r\n    onGetDataClicked() {\r\n        console.log('get data', this.formContainer?.getData());\r\n       /* this.dataView = {\r\n            UID: 'AAAA-DCBA-FGHD-DDDD',\r\n            Type: 'Form',\r\n            Hidden: false,\r\n            Columns: [{}],\r\n            Context: {\r\n                Object: {\r\n                    Resource: 'transactions',\r\n                    InternalID: 290714,\r\n                    Name: 'Form2'\r\n                },\r\n                Name: 'OrderCartItemForm',\r\n                ScreenSize: 'Tablet',\r\n                Profile: {\r\n                    InternalID: 46273,\r\n                    Name: 'Rep'\r\n                }\r\n            },\r\n            Fields: [FakeDataViewFields[0], FakeDataViewFields[1], FakeDataViewFields[2], FakeDataViewFields[3]],\r\n            Rows: []\r\n        }\r\n        this.dataSource = {\r\n            ActionDateTime: '2021-10-11T09:26:02Z',\r\n        }*/\r\n    }\r\n\r\n    onSaveDataClicked() {\r\n        /*this.dataView = {\r\n            UID: 'ABCD-DCBA-FGHD-POLK',\r\n            Type: 'Form',\r\n            Hidden: false,\r\n            Columns: [{}],\r\n            Context: {\r\n                Object: {\r\n                    Resource: 'transactions',\r\n                    InternalID: 290714,\r\n                    Name: '1OlegImpExpרg'\r\n                },\r\n                Name: 'OrderCartItemForm',\r\n                ScreenSize: 'Tablet',\r\n                Profile: {\r\n                    InternalID: 46273,\r\n                    Name: 'Rep'\r\n                }\r\n            },\r\n            Fields: FakeDataViewFields,\r\n            Rows: []\r\n        }\r\n        this.dataSource = FakeData;*/\r\n        this.formContainer?.updateFields([\r\n            {\r\n                FieldId: 'ButtunTest',\r\n                Params: {\r\n                    Value: 'New val' + Math.floor(Math.random() * 10)\r\n                }\r\n            }\r\n        ]);\r\n    }\r\n\r\n    onFormValidationChange(value: any) {\r\n        console.log('onFormValidationChange', value);\r\n        this.isFormValid = value;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./generic-form-example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "genericFormService",
                        "type": "PepGenericFormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "genericFormService",
                        "type": "PepGenericFormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "{{ isFormValid }}\r\n<pep-generic-form #formContainer [dataSource]=\"dataSource\" [dataView]=\"dataView\" [inline]=\"inline\" [showTopBar]=\"true\"\r\n    [isLocked]=\"isLocked\" (valueChange)=\"onValueChanged($event)\" (formValidationChange)=\"onFormValidationChange($event)\">\r\n    <ng-container right-buttons>\r\n        <pep-button class=\"pep-spacing-element\" [value]=\"'Save'\" [disabled]=\"!isFormValid\" [sizeType]=\"inline ? 'sm' : 'md'\"\r\n            [styleType]=\"'strong'\" (click)=\"onSaveDataClicked()\">\r\n        </pep-button>\r\n    </ng-container>\r\n\r\n    <ng-container left-buttons>\r\n    </ng-container>\r\n\r\n    <!-- <ng-container bottom-right-buttons>   \r\n        <pep-button class=\"pep-spacing-element\" [value]=\"'Save 2'\" [sizeType]=\"inline ? 'sm' : 'md'\" [styleType]=\"'strong'\">\r\n        </pep-button>      \r\n    </ng-container> -->\r\n\r\n</pep-generic-form>\r\n\r\n<pep-button class=\"pep-spacing-element\" [value]=\"'Get Data'\" [sizeType]=\"inline ? 'sm' : 'md'\" [styleType]=\"'strong'\"\r\n    (click)=\"onGetDataClicked()\">\r\n</pep-button>"
        },
        {
            "name": "GenericListComponent",
            "id": "component-GenericListComponent-03b55e65fb24d9fd625fc9367392015a3600db847729f6e94566463346274ff1242051902bd23e49e220e782d7bbf2a261a3f8e5261943046ea130cadef6caa2",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "PepGenericListService",
                    "type": "injectable"
                }
            ],
            "selector": "pep-generic-list",
            "styleUrls": [
                "./generic-list.component.scss",
                "./generic-list.component.theme.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./generic-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "actions",
                    "defaultValue": "{\r\n        get: async (data: any) => {\r\n            return []\r\n        }\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "IPepGenericListActions",
                    "decorators": []
                },
                {
                    "name": "addPadding",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 118,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "breadCrumbsItems",
                    "defaultValue": "new Array<PepBreadCrumbItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 178,
                    "type": "PepBreadCrumbItem[]",
                    "decorators": []
                },
                {
                    "name": "cacheSize",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 151,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "IPepGenericListDataSource",
                    "decorators": []
                },
                {
                    "name": "description",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 124,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 115,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "emptyState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 136,
                    "type": "IPepGenericListEmptyState | undefined",
                    "decorators": []
                },
                {
                    "name": "hideSelectAll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 154,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "inline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 127,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "noDataFoundMsg",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 133,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "pager",
                    "defaultValue": "{\r\n        type: 'scroll'\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 157,
                    "type": "IPepGenericListPager",
                    "decorators": []
                },
                {
                    "name": "scrollPosition",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 184,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "selectAll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 181,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selectionType",
                    "defaultValue": "'multi'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 139,
                    "type": "PepListSelectionType",
                    "decorators": []
                },
                {
                    "name": "showSearch",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 130,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showTopBar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 175,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "smartFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 168,
                    "type": "IPepGenericListSmartFilter",
                    "decorators": []
                },
                {
                    "name": "sorting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 148,
                    "type": "IPepListSortingData | undefined",
                    "decorators": []
                },
                {
                    "name": "supportSorting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 142,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "supportSortingArray",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 145,
                    "type": "string[] | undefined",
                    "decorators": []
                },
                {
                    "name": "tableViewType",
                    "defaultValue": "'regular'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 162,
                    "type": "PepListTableViewType",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 121,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "uuidMapping",
                    "defaultValue": "'key'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 112,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "zebraStripes",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 165,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "breadCrumbItemClick",
                    "defaultValue": "new EventEmitter<IPepBreadCrumbItemClickEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 193,
                    "type": "EventEmitter"
                },
                {
                    "name": "fieldClick",
                    "defaultValue": "new EventEmitter<IPepFormFieldClickEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 187,
                    "type": "EventEmitter"
                },
                {
                    "name": "listLoad",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 199,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "startIndexChange",
                    "defaultValue": "new EventEmitter<IPepListStartIndexChangeEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 196,
                    "type": "EventEmitter"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFormFieldValueChangeEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 190,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_appliedFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepSmartFilterData[]",
                    "optional": false,
                    "description": "",
                    "line": 227,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_dataSource",
                    "defaultValue": "{\r\n        init: async (params: any) => {\r\n            return {\r\n                dataView: {\r\n                    Type: 'Grid'\r\n                },\r\n                totalCount: -1,\r\n                items: []\r\n            }\r\n        }\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListDataSource",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_dataView",
                    "defaultValue": "{\r\n        Type: 'Grid'\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataView",
                    "optional": false,
                    "description": "",
                    "line": 212,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_loader$",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 210,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_pepList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 215,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_pepListContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef | undefined",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_resize$",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 209,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_sorting",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepListSortingChangeEvent | undefined",
                    "optional": false,
                    "description": "",
                    "line": 228,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "listInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 217
                },
                {
                    "name": "menuActions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<PepMenuItem>",
                    "optional": false,
                    "description": "",
                    "line": 231
                },
                {
                    "name": "menuHandlers",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 230
                },
                {
                    "name": "onLoad",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 216
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepSearchComponent | undefined",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'search'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "searchString",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 219
                },
                {
                    "name": "showEmptyState",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 221
                },
                {
                    "name": "showSmartFilter",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 220
                },
                {
                    "name": "smartFilters",
                    "defaultValue": "{\r\n        fields: [],\r\n        data: [],\r\n        title: 'Filters'\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepSmartFilters",
                    "optional": false,
                    "description": "",
                    "line": 222
                },
                {
                    "name": "smartFiltersComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepSmartFiltersComponent | undefined",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'smartFiltersComponent'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "totalRowCount",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 218
                }
            ],
            "methodsClass": [
                {
                    "name": "getItemById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ObjectsDataRow | null",
                    "typeParameters": [],
                    "line": 549,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMenuActions",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<PepMenuItem[]>",
                    "typeParameters": [],
                    "line": 427,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "getMenuObjects",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 446,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getPageIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 565,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelectedItems",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSelectionData | null",
                    "typeParameters": [],
                    "line": 557,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUiControl",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UIControl",
                    "typeParameters": [],
                    "line": 408,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initList",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 253,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "initSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 460,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initSmartSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 465,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loadData",
                    "args": [
                        {
                            "name": "fromIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "toIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<PepRowData[]>",
                    "typeParameters": [],
                    "line": 470,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "fromIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadMenuItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 419,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loadTableInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 375,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nloads inputs in case they are provided and merge with selector inputs\n",
                    "description": "<p>loads inputs in case they are provided and merge with selector inputs</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 13473,
                                "end": 13480,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>merged pep-list inputs</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 614,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onActionItemClicked",
                    "args": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 569,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBreadCrumbItemClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepBreadCrumbItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 592,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepBreadCrumbItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCustomizeFieldClick",
                    "args": [
                        {
                            "name": "fieldClickEvent",
                            "type": "IPepFormFieldClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 588,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldClickEvent",
                            "type": "IPepFormFieldClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFiltersChange",
                    "args": [
                        {
                            "name": "filters",
                            "type": "IPepSmartFilterData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 605,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "IPepSmartFilterData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onListLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 610,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLoadItems",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepListLoadItemsEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 524,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nloads virtual scroll items from api\n",
                    "description": "<p>loads virtual scroll items from api</p>\n",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepListLoadItemsEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLoadPage",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepListLoadPageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 537,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nloads paging bulk from api\n",
                    "description": "<p>loads paging bulk from api</p>\n",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepListLoadPageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepSearchClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 576,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepSearchClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectedItemsChanged",
                    "args": [
                        {
                            "name": "selectedRowsCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 581,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedRowsCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSortingChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepListSortingChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 600,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepListSortingChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onValueChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepFormFieldValueChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 596,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepFormFieldValueChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setEmptyState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 402,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndetemines whether empty state is to be displayed\n",
                    "description": "<p>detemines whether empty state is to be displayed</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateDataList",
                    "args": [
                        {
                            "name": "fromIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "toIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageIndex",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<PepRowData[]>",
                    "typeParameters": [],
                    "line": 498,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "fromIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageIndex",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n    Component,\r\n    OnInit,\r\n    ViewChild,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    ViewContainerRef\r\n} from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n    PepDataConvertorService,\r\n    PepLayoutService,\r\n    ObjectsDataRow,\r\n    PepGuid,\r\n    UIControl,\r\n    PepLoaderService,\r\n    PepRowData,\r\n    PepSessionService\r\n} from '@pepperi-addons/ngx-lib';\r\nimport { Subscription } from 'rxjs';\r\nimport { IPepFormFieldClickEvent } from '@pepperi-addons/ngx-lib/form';\r\nimport {\r\n    PepListComponent,\r\n    PepSelectionData,\r\n    IPepListLoadPageEvent,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    DEFAULT_PAGE_SIZE,\r\n    IPepListLoadItemsEvent,\r\n    PepListTableViewType,\r\n    IPepListSortingData,\r\n    IPepListStartIndexChangeEvent\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepMenuItem,\r\n    IPepMenuItemClickEvent,\r\n} from '@pepperi-addons/ngx-lib/menu';\r\nimport { IPepFormFieldValueChangeEvent } from '@pepperi-addons/ngx-lib/form';\r\nimport {\r\n    PepBreadCrumbItem,\r\n    IPepBreadCrumbItemClickEvent\r\n} from '@pepperi-addons/ngx-lib/bread-crumbs';\r\nimport { IPepSearchClickEvent, PepSearchComponent } from '@pepperi-addons/ngx-lib/search';\r\n\r\nimport {\r\n    DataView,\r\n    GridDataView\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport {\r\n    IPepGenericListInitData,\r\n    IPepGenericListDataSource,\r\n    IPepGenericListPager,\r\n    IPepGenericListActions,\r\n    IPepGenericListSmartFilter,\r\n    IPepSmartFilters,\r\n    IPepGenericListEmptyState\r\n} from './generic-list.model';\r\nimport { PepGenericListService } from './generic-list.service';\r\nimport { DataViewConverter } from '@pepperi-addons/data-views';\r\nimport {\r\n    IPepSmartFilterData,\r\n    PepSmartFilterBaseField,\r\n    PepSmartFiltersComponent\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\n\r\n\r\n@Component({\r\n    selector: 'pep-generic-list',\r\n    templateUrl: './generic-list.component.html',\r\n    styleUrls: ['./generic-list.component.scss', './generic-list.component.theme.scss'],\r\n    providers: [PepGenericListService]\r\n})\r\nexport class GenericListComponent implements OnInit {\r\n    @ViewChild('search') search: PepSearchComponent | undefined;\r\n    @ViewChild('smartFiltersComponent') smartFiltersComponent: PepSmartFiltersComponent | undefined;\r\n\r\n    private _pepListContainer: ViewContainerRef | undefined;\r\n    @ViewChild('pepListContainer', { read: ViewContainerRef })\r\n    set pepListContainer(val: ViewContainerRef) {\r\n        this._pepListContainer = val;\r\n    }\r\n\r\n    private _dataSource: IPepGenericListDataSource = {\r\n        init: async (params: any) => {\r\n            return {\r\n                dataView: {\r\n                    Type: 'Grid'\r\n                },\r\n                totalCount: -1,\r\n                items: []\r\n            }\r\n        }\r\n    }\r\n    @Input()\r\n    set dataSource(val: IPepGenericListDataSource) {\r\n        this._dataSource = val;\r\n        this._sorting = undefined;\r\n        this.initSearch();\r\n        this.initSmartSearch();\r\n        this.initList();\r\n    }\r\n\r\n    @Input()\r\n    actions: IPepGenericListActions = {\r\n        get: async (data: any) => {\r\n            return []\r\n        }\r\n    };\r\n\r\n    @Input()\r\n    uuidMapping = 'key';\r\n\r\n    @Input()\r\n    disabled = false;\r\n\r\n    @Input()\r\n    addPadding = false;\r\n\r\n    @Input()\r\n    title = '';\r\n\r\n    @Input()\r\n    description = '';\r\n\r\n    @Input()\r\n    inline = false;\r\n\r\n    @Input()\r\n    showSearch = false;\r\n\r\n    @Input()\r\n    noDataFoundMsg = '';\r\n\r\n    @Input()\r\n    emptyState: IPepGenericListEmptyState | undefined;\r\n\r\n    @Input()\r\n    selectionType: PepListSelectionType = 'multi';\r\n\r\n    @Input()\r\n    supportSorting = false;\r\n\r\n    @Input()\r\n    supportSortingArray: string[] | undefined = undefined;\r\n\r\n    @Input()\r\n    sorting: IPepListSortingData | undefined;\r\n\r\n    @Input()\r\n    cacheSize = -1;\r\n\r\n    @Input()\r\n    hideSelectAll = false;\r\n    \r\n    @Input()\r\n    pager: IPepGenericListPager = {\r\n        type: 'scroll'\r\n    }\r\n\r\n    @Input()\r\n    tableViewType: PepListTableViewType = 'regular';\r\n\r\n    @Input()\r\n    zebraStripes = false;\r\n\r\n    @Input()\r\n    set smartFilter(val: IPepGenericListSmartFilter) {\r\n        this.smartFilters = this._genericListService.convertToSmartFilter(val);\r\n        this._appliedFilters = this.smartFilters.data || [];\r\n        this.showSmartFilter = this.smartFilters.fields.length > 0; \r\n    }\r\n\r\n    @Input()\r\n    showTopBar = false;\r\n\r\n    @Input()\r\n    breadCrumbsItems: PepBreadCrumbItem[] = new Array<PepBreadCrumbItem>();\r\n\r\n    @Input()\r\n    selectAll = false\r\n\r\n    @Input()\r\n    scrollPosition = 0\r\n\r\n    @Output()\r\n    fieldClick = new EventEmitter<IPepFormFieldClickEvent>();\r\n\r\n    @Output()\r\n    valueChange = new EventEmitter<IPepFormFieldValueChangeEvent>();\r\n\r\n    @Output()\r\n    breadCrumbItemClick = new EventEmitter<IPepBreadCrumbItemClickEvent>();\r\n\r\n    @Output()\r\n    startIndexChange = new EventEmitter<IPepListStartIndexChangeEvent>()\r\n\r\n    @Output()\r\n    listLoad: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    set pepList(val: PepListComponent) {\r\n        this._pepList = val;\r\n    }\r\n\r\n    get pepList() {\r\n        return this._pepList;\r\n    }\r\n\r\n    private _resize$: Subscription = new Subscription();\r\n    private _loader$: Subscription = new Subscription();\r\n\r\n    private _dataView: DataView = {\r\n        Type: 'Grid'\r\n    };\r\n    private _pepList: any;\r\n    onLoad = true;\r\n    listInputs: any;\r\n    totalRowCount = -1;\r\n    searchString = '';\r\n    showSmartFilter = false;\r\n    showEmptyState = false;\r\n    smartFilters: IPepSmartFilters = {\r\n        fields: [],\r\n        data: [],\r\n        title: 'Filters'\r\n    };\r\n    private _appliedFilters: IPepSmartFilterData[] = [];\r\n    private _sorting: IPepListSortingChangeEvent | undefined = undefined;\r\n\r\n    menuHandlers: { [key: string]: (obj: any) => Promise<void> } = {};\r\n    menuActions: Array<PepMenuItem> = [];\r\n\r\n    constructor(\r\n        private _dataConvertorService: PepDataConvertorService,\r\n        private _layoutService: PepLayoutService,\r\n        private _loaderService: PepLoaderService,\r\n        private _translate: TranslateService,\r\n        private _genericListService: PepGenericListService,\r\n        private _sessionService: PepSessionService\r\n    ) {\r\n        this._resize$ = this._layoutService.onResize$.pipe().subscribe((size) => {            \r\n            //            \r\n        });\r\n        this._loader$ = this._loaderService.onChanged$.subscribe((status: boolean) => {\r\n            //\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        //\r\n    }\r\n\r\n    private async initList() {\r\n        debugger;\r\n        this.onLoad = true;\r\n        setTimeout(async () => { //making sure all input data is available\r\n            if (this._dataSource) {\r\n                //merge selector inputs with callback inputs\r\n                this.loadTableInputs();\r\n\r\n                let fromIndex = 0;\r\n                let toIndex = 0;\r\n\r\n                if (this.listInputs.pager.type === 'pages') {\r\n                    fromIndex = this.listInputs.pager.size * this.listInputs.pager.index;\r\n                    toIndex = fromIndex + (this.listInputs.pager.size || DEFAULT_PAGE_SIZE) - 1;\r\n                } else {\r\n                    toIndex = 100;//TO DO - get value from - this.customList.getTopItems()\r\n                }\r\n\r\n                const data = await this.loadData(fromIndex, toIndex);\r\n                \r\n                if (this.listInputs?.emptyState?.show === true) {\r\n                    this.setEmptyState();\r\n                }\r\n                this.onLoad = false;\r\n                //show empty state\r\n                if (this.showEmptyState) {\r\n                    if (!this.listInputs.emptyState.title) {                        \r\n                        this._translate.get('GENERIC_LIST.EMPTY_STATE.TITLE').subscribe(text => {                            \r\n                            this.listInputs.emptyState.title = text;\r\n                        });\r\n                    }\r\n                    if (!this.listInputs.emptyState.description) {                        \r\n                        this._translate.get('GENERIC_LIST.EMPTY_STATE.DESCRIPTION').subscribe(text => {                            \r\n                            this.listInputs.emptyState.description = text;\r\n                        });\r\n                    }\r\n                    return;\r\n                }\r\n                setTimeout(async () => {\r\n                    if (this._pepListContainer) {\r\n                        if (this._pepListContainer.length > 0) {\r\n                            this._pepListContainer.remove();\r\n                        }\r\n                        const { PepListComponent } = await import('@pepperi-addons/ngx-lib/list');\r\n                        const componentRef = this._pepListContainer.createComponent(PepListComponent);\r\n\r\n                        this.pepList = componentRef.instance;\r\n                        \r\n                        componentRef.instance.viewType = this._genericListService.getListViewType(this._dataView.Type);\r\n                        componentRef.instance.tableViewType = this.listInputs.tableViewType;\r\n                        componentRef.instance.zebraStripes = this.listInputs.zebraStripes;\r\n                        if (this.disabled) {\r\n                            componentRef.instance.disabled = true;\r\n                            componentRef.instance.lockItemInnerEvents = true;\r\n                        }\r\n                        componentRef.instance.supportSorting = this.listInputs.supportSorting;\r\n                        componentRef.instance.supportSortingArray = this.listInputs.supportSortingArray;\r\n                        componentRef.instance.sorting = this.listInputs.sorting;\r\n                        componentRef.instance.cacheSize = this.listInputs.cacheSize;\r\n\r\n                        componentRef.instance.selectionTypeForActions = this.listInputs.selectionType;\r\n                        componentRef.instance.hideAllSelectionInMulti = this.listInputs.hideSelectAll;\r\n\r\n                        componentRef.instance.showCardSelection = this.listInputs.selectionType !== 'none';\r\n                        componentRef.instance.pagerType = this.listInputs.pager.type;\r\n                        if (this.listInputs.pager.type === 'pages') {\r\n                            componentRef.instance.pageSize = this.listInputs.pager?.size || DEFAULT_PAGE_SIZE;\r\n                            componentRef.instance.pageIndex = this.listInputs.pager?.index || 0;\r\n                        }\r\n                        if(this.selectionType == \"multi\" && this.selectAll){\r\n                            this._sessionService.setObject('AllSelected', true)\r\n                        }\r\n                        componentRef.instance.noDataFoundMsg = this.listInputs.noDataFoundMsg;\r\n                        componentRef.instance.startIndexChange.subscribe($event => {\r\n                            this.startIndexChange.emit($event)\r\n                        })\r\n                        componentRef.instance.fieldClick.subscribe(($event) => {\r\n                            this.onCustomizeFieldClick($event);\r\n                        });\r\n                        componentRef.instance.selectedItemsChange.subscribe(($event) => {\r\n                            this.onSelectedItemsChanged($event);\r\n                        });\r\n                        componentRef.instance.loadItems.subscribe(($event) => {\r\n                            this.onLoadItems($event);\r\n                        });\r\n                        componentRef.instance.loadPage.subscribe(($event) => {\r\n                            this.onLoadPage($event);\r\n                        });\r\n                        componentRef.instance.valueChange.subscribe(($event) => {\r\n                            this.onValueChanged($event);\r\n                        });\r\n                        componentRef.instance.sortingChange.subscribe(($event) => {\r\n                            this.onSortingChange($event);\r\n                        });\r\n                        componentRef.instance.listLoad.subscribe(($event) => {\r\n                            this.onSelectedItemsChanged(this._pepList.selectedItems.length);\r\n                            this.onListLoad();\r\n                        });\r\n                        let convertedList: ObjectsDataRow[] = [];\r\n                        if (data) {\r\n                            if (data?.length) {\r\n                                convertedList = this._dataConvertorService.convertListData(data);\r\n                            }\r\n                            const uiControl = this.getUiControl(DataViewConverter.toUIControlData(this._dataView));\r\n                            const selectedItems = this._genericListService.getSelectedItems(convertedList);\r\n                            if (selectedItems?.length) {\r\n                                componentRef.instance.setSelectedIds(selectedItems);\r\n                            }                           \r\n                            \r\n                            componentRef.instance.initListData(uiControl, this.totalRowCount, convertedList);\r\n                        }\r\n                        componentRef.instance.scrollToIndex(this.scrollPosition)\r\n                    }\r\n                }, 0);\r\n            }\r\n        }, 0);\r\n    }\r\n\r\n    /**\r\n     * loads inputs in case they are provided and merge with selector inputs\r\n     * @returns merged pep-list inputs\r\n     */\r\n    private loadTableInputs() {\r\n        this.listInputs = {\r\n            supportSorting: this.supportSorting,\r\n            supportSortingArray: this.supportSortingArray,\r\n            sorting: this.sorting,\r\n            cacheSize: this.cacheSize,\r\n            hideSelectAll: this.hideSelectAll,\r\n            selectionType: this.selectionType,\r\n            pager: this.pager,\r\n            noDataFoundMsg: this.noDataFoundMsg,\r\n            tableViewType: this.tableViewType,\r\n            zebraStripes: this.zebraStripes,\r\n            emptyState: this.emptyState,\r\n            selectAll: this.selectAll\r\n        };\r\n        if (this._dataSource.inputs) {\r\n            Object.entries(this._dataSource.inputs).forEach((item: any) => {\r\n                if (this._genericListService.hasProperty(this.listInputs, item[0])) {\r\n                    this.listInputs[item[0]] = item[1];\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * detemines whether empty state is to be displayed\r\n     */\r\n    private setEmptyState() {\r\n        this.showEmptyState = this.totalRowCount === 0 &&\r\n            this.searchString === '' &&\r\n            this._appliedFilters.length === 0;\r\n    }\r\n\r\n    private getUiControl(data: any): UIControl {\r\n        const uiControl = new UIControl();\r\n        uiControl.ControlFields = [];\r\n\r\n        if (data?.ControlFields) {\r\n            uiControl.ControlFields = data.ControlFields.map((field: any) => this._genericListService.convertToUiControlField(field));\r\n        }\r\n\r\n        return uiControl;\r\n    }\r\n\r\n    private loadMenuItems(): void { //TODO\r\n        if (this.listInputs.selectionType !== 'none') {\r\n            this.getMenuActions().then(\r\n                x => this.menuActions = x\r\n            );\r\n        }\r\n    }\r\n\r\n    private async getMenuActions(): Promise<PepMenuItem[]> {\r\n        const res: PepMenuItem[] = [];\r\n        const result = this.getMenuObjects();\r\n        if (result.success) {\r\n            const actions = await this.actions.get(result.data);\r\n            this.menuHandlers = {};\r\n            actions?.forEach(item => {\r\n                const uuid = PepGuid.newGuid();\r\n                this.menuHandlers[uuid] = item.handler;\r\n                res.push({\r\n                    key: uuid,\r\n                    text: item.title\r\n                })\r\n            })\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    private getMenuObjects() {\r\n        const menuObjects: any = {\r\n            success: false,\r\n            data: new PepSelectionData()\r\n        };\r\n\r\n        if (this.pepList) {\r\n            menuObjects.success = true;\r\n            menuObjects.data = this.pepList.getSelectedItemsData();\r\n        }\r\n\r\n        return menuObjects;\r\n    }\r\n\r\n    private initSearch() {\r\n        this.searchString = '';\r\n        this.search?.initSearch();\r\n    }\r\n\r\n    private initSmartSearch() {\r\n        this._appliedFilters = [];\r\n        this.smartFiltersComponent?.clearFilters();\r\n    }\r\n\r\n    private async loadData(fromIndex: number, toIndex: number): Promise<PepRowData[]> {\r\n        this._loaderService.show();\r\n        let converedData: PepRowData[] = [];\r\n        const data: IPepGenericListInitData = await this._dataSource.init({\r\n            searchString: this.searchString || undefined,\r\n            filters: this._appliedFilters.length ? this._appliedFilters : undefined,\r\n            sorting: this._sorting || undefined,\r\n            fromIndex: fromIndex,\r\n            toIndex: toIndex\r\n        });        \r\n        this._loaderService.hide();\r\n\r\n        // Set the total count\r\n        this.totalRowCount = data?.totalCount || 0;\r\n        this.setEmptyState();\r\n\r\n        if (data) {\r\n            this._dataView = data.dataView;\r\n\r\n            if (data.items?.length > 0 && !data.isPepRowData) {                \r\n                converedData = data.items.map(item => this._genericListService.convertToPepRowData(item, data.dataView, this.uuidMapping));\r\n            }\r\n        }\r\n\r\n        return converedData;\r\n    }\r\n\r\n\r\n    private async updateDataList(fromIndex: number, toIndex: number, pageIndex: number | undefined = undefined): Promise<PepRowData[]> {\r\n        if (this._dataSource.update) {\r\n            this._loaderService.show();\r\n            let converedData: PepRowData[] = [];\r\n            const dataList = await this._dataSource.update({\r\n                searchString: this.searchString || undefined,\r\n                filters: this._appliedFilters.length ? this._appliedFilters : undefined,\r\n                sorting: this._sorting || undefined,\r\n                fromIndex: fromIndex,\r\n                toIndex: toIndex,\r\n                pageIndex: pageIndex\r\n            });\r\n            this._loaderService.hide();\r\n\r\n            if (dataList?.length > 0) {\r\n                converedData = dataList.map(item => this._genericListService.convertToPepRowData(item, this._dataView, this.uuidMapping));\r\n            } \r\n            return converedData;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * loads virtual scroll items from api\r\n     */\r\n    private async onLoadItems(event: IPepListLoadItemsEvent) {\r\n        const list = await this.updateDataList(event.fromIndex, event.toIndex);\r\n        const convertedList = this._dataConvertorService.convertListData(list);\r\n        const selectedItems = this._genericListService.getSelectedItems(convertedList);\r\n        if (selectedItems?.length) {\r\n            this.pepList.setSelectedIds(selectedItems);\r\n        }\r\n        this.pepList.updateItems(convertedList, event);\r\n    }\r\n\r\n    /**\r\n     * loads paging bulk from api\r\n     */\r\n    private async onLoadPage(event: IPepListLoadPageEvent) {\r\n        const fromIndex = event.pageIndex * event.pageSize;\r\n        const toIndex = Math.min(fromIndex + event.pageSize - 1, this.totalRowCount - 1);\r\n        const list = await this.updateDataList(fromIndex, toIndex, event.pageIndex);\r\n        const convertedList = this._dataConvertorService.convertListData(list);\r\n        const selectedItems = this._genericListService.getSelectedItems(convertedList);\r\n        if (selectedItems?.length) {\r\n            this.pepList.setSelectedIds(selectedItems);\r\n        }\r\n        this.pepList.updatePage(convertedList, event);\r\n    }\r\n\r\n    getItemById(id: string): ObjectsDataRow | null {\r\n        if (this.pepList) {\r\n            return this._pepList.getItemDataByID(id);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getSelectedItems(): PepSelectionData | null {\r\n        if (this.pepList) {\r\n            return this._pepList.getSelectedItemsData();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getPageIndex() {\r\n        return this.pepList.pageIndex;\r\n    }\r\n\r\n    onActionItemClicked(action: IPepMenuItemClickEvent): void {\r\n        const result = this.getMenuObjects();\r\n        if (result.success) {\r\n            this.menuHandlers[action.source.key](result.data);\r\n        }\r\n    }\r\n\r\n    onSearchChanged(event: IPepSearchClickEvent) {\r\n        this.searchString = event.value;\r\n        this.initList();\r\n    }\r\n\r\n    onSelectedItemsChanged(selectedRowsCount: number) {\r\n        //loading menu items after pep-list selected items are updated\r\n        setTimeout(() => {\r\n            this.loadMenuItems();\r\n        }, 0);\r\n    }\r\n\r\n    onCustomizeFieldClick(fieldClickEvent: IPepFormFieldClickEvent) {\r\n        this.fieldClick.emit(fieldClickEvent);\r\n    }\r\n\r\n    onBreadCrumbItemClick(event: IPepBreadCrumbItemClickEvent) {\r\n        this.breadCrumbItemClick.emit(event);\r\n    }\r\n\r\n    onValueChanged(event: IPepFormFieldValueChangeEvent) {\r\n        this.valueChange.emit(event);\r\n    }\r\n\r\n    onSortingChange(event: IPepListSortingChangeEvent) {\r\n        this._sorting = event;\r\n        this.initList();\r\n    }\r\n\r\n    onFiltersChange(filters: IPepSmartFilterData[]) {\r\n        this._appliedFilters = filters;\r\n        this.initList();\r\n    }\r\n\r\n    onListLoad(): void {\r\n        this.listLoad.emit();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this._resize$) {\r\n            this._resize$.unsubscribe();\r\n        }\r\n        if (this._loader$) {\r\n            this._loader$.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/variables' as ngx-variables;\r\n@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/mixins' as ngx-mixins;\r\n\r\n:host {\r\n    height: inherit;\r\n    display: block;\r\n}\r\n\r\n.main-area-container {\r\n    display: grid;\r\n    height: inherit;\r\n}\r\n\r\n.list-container {\r\n    height: 100%;\r\n}\r\n\r\n.list-empty-state {\r\n    padding-top: ngx-variables.$spacing-lg;\r\n    height: calc(100% - #{ngx-variables.$spacing-lg});\r\n    background: rgb(247, 247, 247);\r\n    border-radius: ngx-variables.$border-radius-md;    \r\n    position: relative;\r\n    overflow: hidden;\r\n    @include ngx-mixins.align-center;\r\n    flex-direction: column;    \r\n\r\n    .leaf-skiny {\r\n        z-index: ngx-variables.$z-index-lowest;\r\n        height: 52rem;\r\n        position: absolute;\r\n        left: -10rem;\r\n        top: -2rem;\r\n        pointer-events: none;\r\n        transform: scale(1.4);\r\n    }\r\n\r\n    .leaf-round {\r\n        z-index: ngx-variables.$z-index-lowest;  \r\n        height: 45rem;\r\n        position: absolute;\r\n        right: -13rem;\r\n        top: -7rem;\r\n        pointer-events: none;\r\n        transform: rotate(45deg) scale(1);\r\n    }\r\n\r\n    .list-empty-title {\r\n        @include ngx-mixins.font-title(ngx-variables.$fs-2xl, ngx-variables.$lh-2xl);\r\n        z-index: ngx-variables.$z-index-low;    \r\n        padding-inline: ngx-variables.$spacing-lg;         \r\n    }\r\n\r\n    .list-empty-descr {\r\n        @include ngx-mixins.font-body(ngx-variables.$fs-md, ngx-variables.$lh-md);\r\n        z-index: ngx-variables.$z-index-low;\r\n        padding-inline: ngx-variables.$spacing-lg; \r\n    }\r\n\r\n     /* > Large */\r\n     @media (min-width: (ngx-variables.$screen-max-size-md + 1)) {\r\n      \r\n     }\r\n\r\n     /* > Medium */\r\n     @media (max-width: ngx-variables.$screen-max-size-md) {\r\n         .leaf-skiny {\r\n            top: -5rem;\r\n            left: -11rem;\r\n            transform: scale(1.1);\r\n         }\r\n         .leaf-round {\r\n             right: -12rem;\r\n             top: -7rem;\r\n             transform: rotate(45deg) scale(.9);\r\n         }\r\n         \r\n    }\r\n    \r\n    /* > Small */\r\n     @media (max-width: ngx-variables.$screen-max-size-sm) {\r\n        .leaf-round {\r\n            display: none;\r\n        }\r\n        .list-empty-title, .list-empty-descr {\r\n            padding-inline: ngx-variables.$spacing-md; \r\n         }\r\n    }\r\n}\r\n\r\n.inline-container {\r\n    height: inherit;\r\n    display: grid;    \r\n    grid-template-rows: auto 1fr;\r\n    \r\n    &:not(.with-smart-filters) {\r\n        .header-area {\r\n            grid-row: 1 / 2\r\n        }\r\n        .list-container {\r\n            grid-row: 2 / 3\r\n        }\r\n    }\r\n\r\n    &.with-smart-filters {\r\n        grid-template-columns: auto 1fr;\r\n        \r\n        .header-area {\r\n            grid-column: 2 / 3;\r\n            grid-row: 1 / 2\r\n        }\r\n        .smart-filter-area {\r\n            grid-column: 1 / 2;\r\n            grid-row: 1 / 3\r\n        }\r\n        .list-container {\r\n            grid-column: 2 / 3;\r\n            grid-row: 2 / 3\r\n        }\r\n    }\r\n\r\n    &.add-padding {\r\n        padding-inline: ngx-variables.$content-padding;\r\n    }    \r\n\r\n    .list-description {\r\n        font-size: ngx-variables.$fs-xs;\r\n        max-width: 640px;\r\n        padding: ngx-variables.$spacing-sm 0;\r\n    }\r\n\r\n    .bread-crumbs {\r\n        padding: ngx-variables.$spacing-md 0 ngx-variables.$spacing-sm 0;\r\n     }\r\n}\r\n.none-inline {\r\n    .list-description {\r\n        font-size: ngx-variables.$fs-sm;\r\n        max-width: 720px;\r\n        padding: ngx-variables.$spacing-sm ngx-variables.$spacing-xs;\r\n    }\r\n\r\n    .bread-crumbs {\r\n        padding: ngx-variables.$spacing-md ngx-variables.$spacing-xs ngx-variables.$spacing-sm ngx-variables.$spacing-xs;\r\n     }\r\n}\r\n\r\n.noDataFoundMsg{\r\n    margin: 1rem 0;\r\n    height: calc(100% - 2rem);\r\n    width: 100%;\r\n    background: hsla(0, 0%, 10%, 0.12);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n",
                    "styleUrl": "./generic-list.component.scss"
                },
                {
                    "data": "@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/functions' as ngx-functions;\r\n\r\n.list-empty-state {\r\n    ::ng-deep {\r\n        .svg-icon {\r\n            fill: ngx-functions.get-pep-color(color-system-primary, color-tran-10);\r\n        }\r\n    }\r\n   \r\n}",
                    "styleUrl": "./generic-list.component.theme.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_dataConvertorService",
                        "type": "PepDataConvertorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_loaderService",
                        "type": "PepLoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_genericListService",
                        "type": "PepGenericListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_sessionService",
                        "type": "PepSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 231,
                "jsdoctags": [
                    {
                        "name": "_dataConvertorService",
                        "type": "PepDataConvertorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_loaderService",
                        "type": "PepLoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_genericListService",
                        "type": "PepGenericListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_sessionService",
                        "type": "PepSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "pepListContainer": {
                    "name": "pepListContainer",
                    "setSignature": {
                        "name": "pepListContainer",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "ViewContainerRef",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 80,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "ViewContainerRef",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "dataSource": {
                    "name": "dataSource",
                    "setSignature": {
                        "name": "dataSource",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "IPepGenericListDataSource",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 96,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "IPepGenericListDataSource",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "smartFilter": {
                    "name": "smartFilter",
                    "setSignature": {
                        "name": "smartFilter",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "IPepGenericListSmartFilter",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 168,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "IPepGenericListSmartFilter",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "pepList": {
                    "name": "pepList",
                    "setSignature": {
                        "name": "pepList",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "PepListComponent",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 201,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "PepListComponent",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "pepList",
                        "type": "",
                        "returnType": "",
                        "line": 205
                    }
                }
            },
            "templateData": "<div *ngIf=\"inline\" class=\"inline-container\" [ngClass]=\"{ 'add-padding': addPadding, 'with-smart-filters': showSmartFilter }\">\r\n    <div class=\"header-area\" >\r\n        <div *ngIf=\"showTopBar\" class=\"inline-top-bar-container\">\r\n            <ng-container *ngTemplateOutlet=\"topBarTemplate\"></ng-container>\r\n        </div>\r\n        <ng-container *ngIf=\"description\">\r\n            <div class=\"list-description\">{{description}}</div>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"breadCrumbsItems.length\">\r\n            <ng-container *ngTemplateOutlet=\"breadCrumbsTemplate\"></ng-container>\r\n        </ng-container>\r\n    </div>\r\n    <ng-container *ngIf=\"showSmartFilter\">\r\n        <ng-container *ngTemplateOutlet=\"smartFilterTemplate\"></ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!onLoad\">\r\n        <ng-container *ngTemplateOutlet=\"listTemplate\"></ng-container>\r\n    </ng-container>\r\n</div>\r\n<pep-page-layout *ngIf=\"!inline\" class=\"none-inline\" [addPadding]=\"addPadding\" [showShadow]=\"showSmartFilter\">\r\n    <ng-container *ngIf=\"showSmartFilter\" pep-side-area>\r\n        <ng-container *ngTemplateOutlet=\"smartFilterTemplate\"></ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"showTopBar\" pep-top-area>\r\n        <ng-container *ngTemplateOutlet=\"topBarTemplate\"></ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"description\" pep-top-area>\r\n        <div class=\"list-description\">{{description}}</div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"breadCrumbsItems.length\" pep-top-area>\r\n        <ng-container *ngTemplateOutlet=\"breadCrumbsTemplate\"></ng-container>\r\n    </ng-container>\r\n    <div *ngIf=\"!onLoad\" pep-main-area class=\"main-area-container\">\r\n        <ng-container *ngTemplateOutlet=\"listTemplate\"></ng-container>\r\n    </div>\r\n</pep-page-layout>\r\n\r\n<ng-template #topBarTemplate>\r\n    <pep-top-bar [title]=\"title\" [inline]=\"inline\">\r\n        <div header-start-content>\r\n            <ng-content select=\"[left-buttons]\"></ng-content>\r\n        </div>\r\n        <div header-end-content>\r\n            <ng-content select=\"[right-buttons]\"></ng-content>\r\n        </div>\r\n        <!-- <div footer-start-content>\r\n            <ng-content select=\"[left-bottom-area]\"></ng-content>               \r\n        </div>\r\n        <div footer-end-content>\r\n            <ng-content select=\"[right-bottom-area]\"></ng-content>     \r\n        </div> -->\r\n        <pep-list-actions *ngIf=\"menuActions.length > 0\" [sizeType]=\"inline ? 'sm' : 'md'\" [actions]=\"menuActions\"\r\n            (actionClick)=\"onActionItemClicked($event)\"></pep-list-actions>\r\n        <pep-list-total [sizeType]=\"inline ? 'sm' : 'md'\" [totalRows]=\"totalRowCount\">\r\n        </pep-list-total>\r\n        <pep-search #search *ngIf=\"showSearch\" [value]=\"searchString\" [sizeType]=\"inline ? 'sm' : 'md'\"\r\n            (search)=\"onSearchChanged($event)\">\r\n        </pep-search>\r\n    </pep-top-bar>\r\n</ng-template>\r\n\r\n<ng-template #smartFilterTemplate>    \r\n    <pep-side-bar #sideNav [ngClass]=\"{'smart-filter-area': inline}\"> \r\n        <pep-smart-filters #smartFiltersComponent [title]=\"smartFilters.title\" [fields]=\"smartFilters.fields\"\r\n            [filters]=\"smartFilters.data\" (filtersChange)=\"onFiltersChange($event)\">\r\n        </pep-smart-filters>\r\n    </pep-side-bar>\r\n</ng-template>\r\n\r\n<ng-template #breadCrumbsTemplate>\r\n    <pep-bread-crumbs class=\"bread-crumbs\" [items]=\"breadCrumbsItems\" [addSpacing]=\"true\" [displayType]=\"'items'\"\r\n        (itemClick)=\"onBreadCrumbItemClick($event)\"></pep-bread-crumbs>\r\n</ng-template>\r\n\r\n<ng-template #listTemplate>\r\n    <div *ngIf=\"showEmptyState\" class=\"list-empty-state\">\r\n        <div class=\"list-empty-title\">{{ listInputs.emptyState.title }}</div>\r\n        <div class=\"list-empty-descr\">{{ listInputs.emptyState.description }}</div>\r\n        <pep-icon name=\"leaf_skiny\" class=\"leaf-skiny\"></pep-icon>\r\n        <pep-icon name=\"leaf_round\" class=\"leaf-round\"></pep-icon>\r\n        <!-- <mat-icon class=\"leaf-skiny\">\r\n            <pep-icon name=\"leaf_skiny\"></pep-icon>\r\n        </mat-icon> -->\r\n        <!-- <mat-icon class=\"leaf-round\">\r\n            <pep-icon name=\"leaf_round\"></pep-icon>\r\n        </mat-icon> -->\r\n    </div>\r\n    <div *ngIf=\"!showEmptyState\" class=\"list-container\">\r\n        <ng-container #pepListContainer></ng-container>\r\n    </div>\r\n</ng-template>"
        },
        {
            "name": "GenericListExampleComponent",
            "id": "component-GenericListExampleComponent-72e310b313b725ba9e0ea6c1b0f2f0ee056f19cd79deef6512c44d20931d51e273a1ea9d0ecc0ebf2b61792ec262bf6169d727b764b1f3cb1033f5fa690fb933",
            "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/generic-list-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-generic-list-example",
            "styleUrls": [
                "./generic-list-example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./generic-list-example.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "defaultValue": "{\r\n        get: async (data: PepSelectionData) => {\r\n            if (data?.rows.length === 1 && data?.selectionType !== 0) {\r\n                return [\r\n                    {\r\n                        title: 'Edit',\r\n                        handler: async (ddd) => {\r\n                            alert('edit');\r\n                        }\r\n                    },\r\n                    {\r\n                        title: 'Delete',\r\n                        handler: async (ddd) => {\r\n                            alert('delete');\r\n                        }\r\n                    }\r\n                ]\r\n            } else if (data?.rows.length > 1 || data?.selectionType === 0) {\r\n                return [\r\n                    {\r\n                        title: 'Delete',\r\n                        handler: async (ddd) => {\r\n                            //   alert('delete');\r\n                        }\r\n                    }\r\n                ]\r\n            } else return [];\r\n        } \r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListActions",
                    "optional": false,
                    "description": "",
                    "line": 160
                },
                {
                    "name": "actions2",
                    "defaultValue": "{\r\n        get: async (data: PepSelectionData) => {\r\n            if (data?.rows.length === 1 && data?.selectionType !== 0) {\r\n                return [\r\n                    {\r\n                        title: 'Edit',\r\n                        handler: async (ddd) => {\r\n                            alert('edit');\r\n                        }\r\n                    },\r\n                    {\r\n                        title: 'Delete',\r\n                        handler: async (ddd) => {\r\n                            console.log('ddd', ddd);\r\n                            alert('delete');\r\n                        }\r\n                    }\r\n                ]\r\n            } else if (data?.rows.length > 1 || data?.selectionType === 0) {\r\n                return [\r\n                    {\r\n                        title: 'Delete',\r\n                        handler: async (ddd) => {\r\n                            console.log('ddd 2', ddd);\r\n                            alert('delete');\r\n                        }\r\n                    }\r\n                ]\r\n            } else return [];\r\n        }\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListActions",
                    "optional": false,
                    "description": "",
                    "line": 190
                },
                {
                    "name": "addPadding",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "breadCrumbsItems",
                    "defaultValue": "new Array<PepBreadCrumbItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "dataSource",
                    "defaultValue": "{\r\n        init: async (params: any) => {\r\n            return {\r\n                dataView: {\r\n                    Type: 'Grid'\r\n                },\r\n                totalCount: -1,\r\n                items: []\r\n            }\r\n        }\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListDataSource",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "dataSource2",
                    "defaultValue": "{\r\n        init: async (params: any) => {\r\n            return {\r\n                dataView: {\r\n                    Type: 'Grid'\r\n                },\r\n                totalCount: -1,\r\n                items: []\r\n            }\r\n        }\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListDataSource",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "dataSourceLine",
                    "defaultValue": "{\r\n        init: async (params: any) => {\r\n            return {\r\n                dataView: {\r\n                    Type: 'Line'\r\n                },\r\n                totalCount: -1,\r\n                items: []\r\n            }\r\n        }\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListDataSource",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "description",
                    "defaultValue": "'Some description'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "disableTable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "firstFieldAsLink",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "glist1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GenericListComponent | undefined",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'glist1'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "glist2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GenericListComponent | undefined",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'glist2'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "inline",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "menuItems",
                    "defaultValue": "new Array<PepMenuItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "pager",
                    "defaultValue": "{\r\n        type: 'pages',\r\n        size: 10,\r\n        index: 1\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListPager",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "selectionType",
                    "defaultValue": "'multi'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "smartFilter",
                    "defaultValue": "{\r\n        dataView: this.getSmartFilters()\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 295
                },
                {
                    "name": "supportSorting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "tableViewType",
                    "defaultValue": "'compact'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepListTableViewType",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "title",
                    "defaultValue": "'Generic list 2 inline title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methodsClass": [
                {
                    "name": "getColumn",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isEnabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ FieldID: string; Type: string; Title: string; Mandatory: boolean; ReadOnly: boolean; }",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isEnabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getComboBoxColumn",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ FieldID: string; Type: string; Title: string; Mandatory: boolean; ReadOnly: boolean; OptionalValues: {}; }",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataSource",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepGenericListDataSource",
                    "typeParameters": [],
                    "line": 298,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDataSource2",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepGenericListDataSource",
                    "typeParameters": [],
                    "line": 409,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDataSourceEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepGenericListDataSource",
                    "typeParameters": [],
                    "line": 505,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDataSourceLine",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepGenericListDataSource",
                    "typeParameters": [],
                    "line": 586,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getHiddenColumn",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ FieldID: string; Type: string; Title: string; Mandatory: boolean; Visible: boolean; }",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItems",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 399,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLinkColumn",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNumberColumn",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ FieldID: string; Type: string; Title: string; Mandatory: boolean; ReadOnly: boolean; }",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRegularReadOnlyColumn",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSmartFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "{ Context: { Name: string; Profile: { InternalID: number; }; ScreenSize: string; }; Type: string; Title: string; Fields: any; FrozenColumnsCount: number; MinimumColumnWidth: number; }",
                    "typeParameters": [],
                    "line": 633,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSmartFilters2",
                    "args": [],
                    "optional": false,
                    "returnType": "{ Context: { Name: string; Profile: { InternalID: number; }; ScreenSize: string; }; Type: string; Title: string; Fields: {}; FrozenColumnsCount: number; MinimumColumnWidth: number; }",
                    "typeParameters": [],
                    "line": 648,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadBreadCrumbs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBreadCrumbClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepBreadCrumbItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepBreadCrumbItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBtn2Clicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 667,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBtnClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 663,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMenuItemClicked",
                    "args": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, AfterViewInit, ViewChild } from '@angular/core';\r\nimport { IPepMenuItemClickEvent, PepMenuItem } from '@pepperi-addons/ngx-lib/menu';\r\nimport {\r\n    IPepGenericListDataSource,\r\n    IPepGenericListPager,\r\n    IPepGenericListActions,\r\n    IPepGenericListInitData,\r\n    PepGenericListService\r\n\r\n} from 'projects/ngx-composite-lib/generic-list'; //from '@pepperi-addons/ngx-composite-lib/generic-list';\r\n\r\nimport { PepSelectionData, DEFAULT_PAGE_SIZE, PepListTableViewType } from '@pepperi-addons/ngx-lib/list';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { GenericListComponent } from '@pepperi-addons/ngx-composite-lib/generic-list';\r\nimport { PepBreadCrumbItem, IPepBreadCrumbItemClickEvent } from '@pepperi-addons/ngx-lib/bread-crumbs';\r\nimport { FakeData, FakeSmartFilterFields, FakeCardsData, FakeCardsDataView, FakeLineDataView, FakeLineData } from './fake-data';\r\n\r\n\r\n@Component({\r\n    selector: 'app-generic-list-example',\r\n    templateUrl: './generic-list-example.component.html',\r\n    styleUrls: ['./generic-list-example.component.scss']\r\n})\r\nexport class GenericListExampleComponent implements OnInit {\r\n    @ViewChild('glist1') glist1: GenericListComponent | undefined;\r\n    @ViewChild('glist2') glist2: GenericListComponent | undefined;\r\n\r\n    inline = true;\r\n    dataSource: IPepGenericListDataSource = {\r\n        init: async (params: any) => {\r\n            return {\r\n                dataView: {\r\n                    Type: 'Grid'\r\n                },\r\n                totalCount: -1,\r\n                items: []\r\n            }\r\n        }\r\n    };\r\n    dataSource2: IPepGenericListDataSource = {\r\n        init: async (params: any) => {\r\n            return {\r\n                dataView: {\r\n                    Type: 'Grid'\r\n                },\r\n                totalCount: -1,\r\n                items: []\r\n            }\r\n        }\r\n    };\r\n    dataSourceLine: IPepGenericListDataSource = {\r\n        init: async (params: any) => {\r\n            return {\r\n                dataView: {\r\n                    Type: 'Line'\r\n                },\r\n                totalCount: -1,\r\n                items: []\r\n            }\r\n        }\r\n    };\r\n    addPadding = false;\r\n    title = 'Generic list 2 inline title';\r\n    menuItems = new Array<PepMenuItem>();\r\n    breadCrumbsItems = new Array<PepBreadCrumbItem>();\r\n    description = 'Some description';\r\n    disableTable = false;\r\n    pager: IPepGenericListPager = {\r\n        type: 'pages',\r\n        size: 10,\r\n        index: 1\r\n    };\r\n    selectionType: any = 'multi';\r\n    supportSorting = false;\r\n    firstFieldAsLink = false;\r\n    tableViewType: PepListTableViewType = 'compact';\r\n\r\n    //private selectedRowID = '';\r\n\r\n\r\n    constructor(private translate: TranslateService/*, private genericListService: PepGenericListService*/) {\r\n        //\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.menuItems.push({\r\n            key: 'test',\r\n            text: 'test'\r\n        });\r\n\r\n        this.loadBreadCrumbs();\r\n\r\n        this.dataSource = this.getDataSource();\r\n        this.dataSource2 = this.getDataSourceEmpty();\r\n        this.dataSourceLine = this.getDataSourceLine();\r\n\r\n    }\r\n\r\n    private getRegularReadOnlyColumn(columnId: string): any {\r\n        return {\r\n            FieldID: columnId,\r\n            Type: 'TextBox',\r\n            Title: columnId,\r\n            Mandatory: false,\r\n            ReadOnly: true\r\n        }\r\n    }\r\n\r\n    private getNumberColumn(columnId: string) {\r\n        return {\r\n            FieldID: columnId,\r\n            Type: 'NumberInteger',\r\n            Title: columnId,\r\n            Mandatory: false,\r\n            ReadOnly: true\r\n        }\r\n    }\r\n\r\n    private getComboBoxColumn(columnId: string) {\r\n        return {\r\n            FieldID: columnId,\r\n            Type: 'ComboBox',\r\n            Title: columnId,\r\n            Mandatory: false,\r\n            ReadOnly: false,\r\n            OptionalValues: [{ Key: \"AD\", Value: \"Andorra\" }, { Key: \"IL\", Value: \"Israel\" }]\r\n        }        \r\n    }\r\n\r\n    getColumn(columnId: string, type: string, isEnabled: boolean) {\r\n        return {\r\n            FieldID: columnId,\r\n            Type: type,//'Currency',\r\n            Title: columnId,\r\n            Mandatory: false,\r\n            ReadOnly: !isEnabled\r\n        }\r\n    }\r\n\r\n    private getLinkColumn(columnId: string): any {\r\n        return {\r\n            FieldID: columnId,\r\n            Type: 'Link',\r\n            Title: columnId,\r\n            Mandatory: false,\r\n            ReadOnly: true\r\n        }\r\n    }\r\n\r\n    private getHiddenColumn(columnId: string) {\r\n        return {\r\n            FieldID: columnId,\r\n            Type: 'TextBox',\r\n            Title: columnId,\r\n            Mandatory: false,\r\n            Visible: false\r\n        }\r\n    }\r\n\r\n    actions: IPepGenericListActions = {\r\n        get: async (data: PepSelectionData) => {\r\n            if (data?.rows.length === 1 && data?.selectionType !== 0) {\r\n                return [\r\n                    {\r\n                        title: 'Edit',\r\n                        handler: async (ddd) => {\r\n                            alert('edit');\r\n                        }\r\n                    },\r\n                    {\r\n                        title: 'Delete',\r\n                        handler: async (ddd) => {\r\n                            alert('delete');\r\n                        }\r\n                    }\r\n                ]\r\n            } else if (data?.rows.length > 1 || data?.selectionType === 0) {\r\n                return [\r\n                    {\r\n                        title: 'Delete',\r\n                        handler: async (ddd) => {\r\n                            //   alert('delete');\r\n                        }\r\n                    }\r\n                ]\r\n            } else return [];\r\n        } \r\n    }\r\n\r\n    actions2: IPepGenericListActions = {\r\n        get: async (data: PepSelectionData) => {\r\n            if (data?.rows.length === 1 && data?.selectionType !== 0) {\r\n                return [\r\n                    {\r\n                        title: 'Edit',\r\n                        handler: async (ddd) => {\r\n                            alert('edit');\r\n                        }\r\n                    },\r\n                    {\r\n                        title: 'Delete',\r\n                        handler: async (ddd) => {\r\n                            console.log('ddd', ddd);\r\n                            alert('delete');\r\n                        }\r\n                    }\r\n                ]\r\n            } else if (data?.rows.length > 1 || data?.selectionType === 0) {\r\n                return [\r\n                    {\r\n                        title: 'Delete',\r\n                        handler: async (ddd) => {\r\n                            console.log('ddd 2', ddd);\r\n                            alert('delete');\r\n                        }\r\n                    }\r\n                ]\r\n            } else return [];\r\n        }\r\n    }\r\n\r\n\r\n    loadBreadCrumbs() {\r\n        this.breadCrumbsItems.push(new PepBreadCrumbItem({\r\n            key: '1',\r\n            text: 'Crumb1',\r\n            title: 'Title1'\r\n        }));\r\n        this.breadCrumbsItems.push(new PepBreadCrumbItem({\r\n            key: '2',\r\n            text: 'Crumb2',\r\n            title: 'Title2'\r\n        }));\r\n\r\n    }\r\n\r\n    onMenuItemClicked(action: IPepMenuItemClickEvent): void {\r\n        alert(action.source.key);\r\n    }\r\n\r\n    onBreadCrumbClick(event: IPepBreadCrumbItemClickEvent) {\r\n        console.log('onBreadCrumbClick', event);\r\n        if (event?.source?.text === 'Crumb1') {\r\n            this.pager = {\r\n                type: 'pages',\r\n                size: 10,\r\n                index: 1\r\n            };\r\n            this.selectionType = 'multi';\r\n            this.firstFieldAsLink = false;\r\n            this.supportSorting = false;\r\n            this.tableViewType = 'compact';\r\n            this.smartFilter = {\r\n                dataView: this.getSmartFilters()\r\n            }\r\n            this.dataSource = this.getDataSource();\r\n\r\n\r\n        } else {\r\n            \r\n            //this.selectionType = 'single';\r\n            //this.firstFieldAsLink = true;\r\n            \r\n            this.pager.type = 'scroll';\r\n            this.tableViewType = 'regular';\r\n            this.supportSorting = true;\r\n            this.smartFilter = undefined;/*{\r\n                dataView: this.getSmartFilters2()\r\n            } */\r\n            this.dataSource = this.getDataSource2();\r\n\r\n        }\r\n    }\r\n\r\n    onClick() {\r\n        // console.log('glist1', this.glist1);\r\n        console.log('items',this.glist1?.getSelectedItems());\r\n        if (this.glist1) {\r\n            console.log('item 1', this.glist1.getItemById('2e51566e-7035-42dd-a7c2-fb92bc4ed135'));\r\n            console.log('selected itens 1', this.glist1.getSelectedItems());\r\n        }\r\n        //  console.log('glist2', this.glist2);\r\n        if (this.glist2) {\r\n            console.log('item 2', this.glist2.getItemById('7e51566e-7035-42dd-a7c2-fb92bc4ed135'));\r\n            console.log('selected itens 2', this.glist2.getSelectedItems());\r\n        }\r\n        console.log('page index', this.glist1?.getPageIndex());\r\n        //console.log('page index', this.glist1.);\r\n\r\n        //console.log('item', this.glist1.getItemById('2e51566e-7035-42dd-a7c2-fb92bc4ed135'));\r\n        // console.log('selected itens', this.genericListService.getSelectedItems());\r\n        //PepGenericListService\r\n        //this.dataSource = this.getDataSourceEmpty();\r\n    }\r\n    smartFilter: any = {\r\n        dataView: this.getSmartFilters()\r\n    }\r\n    getDataSource() {\r\n        return {\r\n            init: async (params: any) => {\r\n                const dataList = FakeData.Addons;                \r\n                // const filteredData = dataList.slice(params.fromIndex, params.toIndex + 1);\r\n                const filteredData = [...dataList, ...dataList];\r\n                //const filteredData = dataList.slice(0, 5);\r\n                //console.log('init params', params);\r\n                await this.getItems();\r\n\r\n                const res = filteredData.map(addon => ({\r\n                    UUID: addon.UUID,\r\n                    Description: addon.Addon.Description,\r\n                    Version: addon.Version,\r\n                    Type: addon.Type,\r\n                    CreationDate: addon.CreationDate,                    \r\n                    TestNum: 100000\r\n\r\n                }));\r\n                const res2 = filteredData.map((item, index) => {\r\n                    return {\r\n                        fields: {\r\n                            UUID: item.UUID,\r\n                            Description: item.Addon.Description,\r\n                            Version: item.Version,\r\n                            Type: item.Type,\r\n                            CreationDate: item.CreationDate\r\n                        },\r\n                        isEditable: true,\r\n                        isSelected: index % 2 === 0,\r\n                        isSelectableForActions: true,\r\n                    }\r\n                });\r\n                return Promise.resolve({\r\n                    dataView: {\r\n                        Context: {\r\n                            Name: '',\r\n                            Profile: { InternalID: 0 },\r\n                            ScreenSize: 'Landscape'\r\n                        },\r\n                        Type: 'Grid',\r\n                        Title: '',\r\n                        Fields: [\r\n                            this.getRegularReadOnlyColumn('UUID'),\r\n                            this.getRegularReadOnlyColumn('Description'),\r\n                            this.getRegularReadOnlyColumn('Version'),\r\n                            this.getLinkColumn('Type'),\r\n                            this.getRegularReadOnlyColumn('CreationDate'),\r\n                           // this.getComboBoxColumn('Country'),\r\n                            this.getNumberColumn('TestNum'),\r\n                            //this.getHiddenColumn('FirstName'),\r\n                        ],\r\n                        Columns: [\r\n                            { Width: 15 },\r\n                            { Width: 30 },\r\n                            { Width: 15 },\r\n                            { Width: 20 },\r\n                            { Width: 15 },\r\n                            { Width: 5 },\r\n\r\n                            // { Width: 0 }\r\n                        ],\r\n                        FrozenColumnsCount: 0,\r\n                        MinimumColumnWidth: 0\r\n                    },\r\n                    totalCount: res.length,\r\n                    items: res\r\n\r\n                });\r\n            },\r\n            /*inputs: () => {\r\n                return Promise.resolve(\r\n                    {\r\n                        pager: {\r\n                            type: 'scroll'\r\n                        },\r\n                        selectionType: 'multi'\r\n                    }\r\n                );\r\n            },*/\r\n            update: async (params: any) => {\r\n                //                console.log('update', params);               \r\n                const dataList = FakeData.Addons;\r\n                //const filteredData = dataList.slice(params.fromIndex, params.toIndex + 1);\r\n                const filteredData = dataList.slice(5, 10);\r\n                const res = filteredData.map(addon => ({\r\n                    UUID: addon.UUID,\r\n                    Description: addon.Addon.Description,\r\n                    Version: addon.Version,\r\n                    Type: addon.Type,\r\n                    CreationDate: addon.CreationDate,\r\n                }));\r\n                return Promise.resolve(res);\r\n            },\r\n            inputs: {\r\n               \r\n                // selectionType: 'multi'\r\n            }\r\n        } as IPepGenericListDataSource\r\n    }\r\n\r\n    getItems() {\r\n        \r\n        return new Promise(resolve => {\r\n            setTimeout(() => {\r\n                const dataList = FakeData.Addons;\r\n                resolve([...dataList, ...dataList]);\r\n            }, 4000);\r\n        });\r\n    }\r\n\r\n    getDataSource2() {\r\n        return {\r\n            init: async (params: any) => {\r\n                const dataList = FakeData.Addons;\r\n                // const filteredData = dataList.slice(params.fromIndex, params.toIndex + 1);\r\n                const filteredData = [...dataList, ...dataList];\r\n                //const filteredData = dataList.slice(0, 5);\r\n                //console.log('init params', params);\r\n                const res = filteredData.map(addon => ({\r\n                    UUID: addon.UUID,\r\n                    Description: addon.Addon.Description,\r\n                    Version: addon.Version,\r\n                    Type: addon.Type,\r\n                    CreationDate: addon.CreationDate,                    \r\n                    TestNum: 100000\r\n\r\n                }));\r\n                const rows2 = filteredData.map((item) => {\r\n                    return {\r\n                        fields: {\r\n                            UUID: item.UUID,\r\n                            Description: item.Addon.Description,\r\n                            Version: item.Version,\r\n                            Type: item.Type,\r\n                            CreationDate: item.CreationDate\r\n                        },\r\n                        isEditable: true,\r\n                        isSelectableForActions: false,\r\n                    }\r\n                });\r\n                return Promise.resolve({\r\n                    dataView: {\r\n                        Context: {\r\n                            Name: '',\r\n                            Profile: { InternalID: 0 },\r\n                            ScreenSize: 'Landscape'\r\n                        },\r\n                        Type: 'Grid',\r\n                        Title: '',\r\n                        Fields: [\r\n                            this.getRegularReadOnlyColumn('UUID'),\r\n                            this.getRegularReadOnlyColumn('Description'),\r\n                            this.getRegularReadOnlyColumn('Version'),\r\n                            this.getLinkColumn('Type'),\r\n                            this.getRegularReadOnlyColumn('CreationDate'),\r\n                            this.getNumberColumn('TestNum'),\r\n                            //this.getHiddenColumn('FirstName'),\r\n                        ],\r\n                        Columns: [\r\n                            { Width: 15 },\r\n                            { Width: 30 },\r\n                            { Width: 15 },\r\n                            { Width: 20 },\r\n                            { Width: 15 },\r\n                            { Width: 5 },\r\n\r\n                            // { Width: 0 }\r\n                        ],\r\n                        FrozenColumnsCount: 0,\r\n                        MinimumColumnWidth: 0\r\n                    },\r\n                    totalCount: res.length,\r\n                    items: res\r\n\r\n                });\r\n            },\r\n            /*inputs: () => {\r\n                return Promise.resolve(\r\n                    {\r\n                        pager: {\r\n                            type: 'scroll'\r\n                        },\r\n                        selectionType: 'multi'\r\n                    }\r\n                );\r\n            },*/\r\n            update: async (params: any) => {\r\n                //                console.log('update', params);\r\n                const dataList = FakeData.Addons;\r\n                //const filteredData = dataList.slice(params.fromIndex, params.toIndex + 1);\r\n                const filteredData = dataList.slice(5, 10);\r\n                const res = filteredData.map(addon => ({\r\n                    UUID: addon.UUID,\r\n                    Description: addon.Addon.Description,\r\n                    Version: addon.Version,\r\n                    Type: addon.Type,\r\n                    CreationDate: addon.CreationDate,\r\n                }));\r\n                return Promise.resolve(res);\r\n            },\r\n            inputs: {\r\n                selectionType: 'single'\r\n            }\r\n        } as IPepGenericListDataSource\r\n    }\r\n\r\n    getDataSourceEmpty() {\r\n        return {\r\n            init: (params: any) => {\r\n\r\n                return Promise.resolve({\r\n                    dataView: {\r\n                        InternalID: 3098435,\r\n                        Type: \"Card\",\r\n                        Title: \"Sales Rep Form\",\r\n                        Hidden: false,\r\n                        CreationDateTime: \"2018-04-22T07:58:02Z\",\r\n                        ModificationDateTime: \"2018-04-22T07:58:13Z\",\r\n                        Context: {\r\n                            \"Object\": {\r\n                                \"Resource\": \"transactions\",\r\n                                \"InternalID\": 138173,\r\n                                \"Name\": \"sales avner\"\r\n                            },\r\n                            \"Name\": \"OrderCenterBarcodeLinesView\",\r\n                            \"ScreenSize\": \"Tablet\",\r\n                            \"Profile\": {\r\n                                \"InternalID\": 46273,\r\n                                \"Name\": \"Rep\"\r\n                            }\r\n                        },\r\n                        ListData: {},\r\n                        Fields: FakeCardsDataView,\r\n                        \"Rows\": [\r\n                            {\r\n                                \"Mode\": \"MatchParent\"\r\n                            },\r\n                            {\r\n                                \"Mode\": \"Fixed\"\r\n                            },\r\n                            {\r\n                                \"Mode\": \"Fixed\"\r\n                            },\r\n                            {\r\n                                \"Mode\": \"Fixed\"\r\n                            }\r\n                        ],\r\n                        \"Columns\": [\r\n                            {},\r\n                            {},\r\n                            {},\r\n                            {},\r\n                            {},\r\n                            {},\r\n                            {},\r\n                            {},\r\n                            {},\r\n                            {}\r\n                        ]\r\n                    },\r\n\r\n                    totalCount: FakeCardsData.length * 2,\r\n                    items: FakeCardsData\r\n\r\n                });\r\n            },\r\n            update: (params: any) => {\r\n                // console.log('update', params);\r\n                const dataList = FakeData.Addons;\r\n                //const filteredData = dataList.slice(params.fromIndex, params.toIndex + 1);\r\n                const filteredData = dataList.slice(15, 20);\r\n                const res = filteredData.map(addon => ({\r\n                    UUID: addon.UUID,\r\n                    Description: addon.Addon.Description,\r\n                    Version: addon.Version,\r\n                    Type: addon.Type,\r\n                    CreationDate: addon.CreationDate\r\n                }));\r\n                return Promise.resolve(res);\r\n            },\r\n            inputs: {\r\n                selectionType: 'single',\r\n                firstFieldAsLink: true\r\n            }\r\n        } as IPepGenericListDataSource\r\n    }\r\n\r\n    getDataSourceLine() {\r\n        return {\r\n            init: (params: any) => {\r\n                return Promise.resolve({\r\n                    dataView: {\r\n                        \"InternalID\": 2884561,\r\n                        \"Type\": \"Line\",\r\n                        \"Title\": \"Sales Rep Form\",\r\n                        \"Hidden\": false,\r\n                        \"CreationDateTime\": \"2017-12-03T09:50:14Z\",\r\n                        \"ModificationDateTime\": \"2017-12-03T09:50:14Z\",\r\n                        \"Context\": {\r\n                            \"Object\": {\r\n                                \"Resource\": \"transactions\",\r\n                                \"InternalID\": 138173,\r\n                                \"Name\": \"sales avner\"\r\n                            },\r\n                            \"Name\": \"OrderCenterFlatMatrixLine\",\r\n                            \"ScreenSize\": \"Tablet\",\r\n                            \"Profile\": {\r\n                                \"InternalID\": 46273,\r\n                                \"Name\": \"Rep\"\r\n                            }\r\n                        },\r\n                        \"ListData\": {},\r\n                        \"Fields\": FakeLineDataView,\r\n                        \"Rows\": [],\r\n                        \"Columns\": [\r\n                            {},\r\n                            {},\r\n                            {},\r\n                            {},\r\n                            {},\r\n                            {},\r\n                            {},\r\n                            {},\r\n                            {},\r\n                            {}\r\n                        ]\r\n                    },\r\n                    totalCount: FakeLineData.length * 2,\r\n                    items: FakeLineData\r\n                });\r\n            }\r\n        } as IPepGenericListDataSource\r\n    }\r\n\r\n    getSmartFilters() {\r\n        return {\r\n            Context: {\r\n                Name: '',\r\n                Profile: { InternalID: 0 },\r\n                ScreenSize: 'Landscape'\r\n            },\r\n            Type: 'Menu',\r\n            Title: '',\r\n            Fields: FakeSmartFilterFields,\r\n            FrozenColumnsCount: 0,\r\n            MinimumColumnWidth: 0\r\n        }\r\n    }\r\n\r\n    getSmartFilters2() {\r\n        return {\r\n            Context: {\r\n                Name: '',\r\n                Profile: { InternalID: 0 },\r\n                ScreenSize: 'Landscape'\r\n            },\r\n            Type: 'Menu',\r\n            Title: '',\r\n            Fields: [FakeSmartFilterFields[0], FakeSmartFilterFields[2]],\r\n            FrozenColumnsCount: 0,\r\n            MinimumColumnWidth: 0\r\n        }\r\n    }\r\n\r\n    onBtnClicked() {\r\n        // console.log('get selected', this.genericListService.getItemById('2e51566e-7035-42dd-a7c2-fb92bc4ed135'));\r\n    }\r\n\r\n    onBtn2Clicked() {\r\n        //\r\n        \r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-wrapper {\r\n    height: inherit;\r\n    display: grid ;\r\n    grid-template-rows: 1fr;\r\n    gap: 2rem;\r\n    padding-inline: 1rem;\r\n}",
                    "styleUrl": "./generic-list-example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"example-wrapper\">\r\n\r\n    <pep-generic-list #glist1 [dataSource]=\"dataSource\"  [actions]=\"actions\" [smartFilter]=\"smartFilter\" [inline]=\"true\" [supportSorting]=\"true\"\r\n        [showTopBar]=\"true\" [hideSelectAll]=\"false\" [tableViewType]=\"tableViewType\" [zebraStripes]=\"true\" [uuidMapping]=\"'UUID'\" [emptyState]=\"{show: true}\"\r\n        [breadCrumbsItems]=\"breadCrumbsItems\" [description]=\"description\" [disabled]=\"disableTable\" [pager]=\"pager\" [selectionType]=\"'single'\"\r\n        title=\"Generic list inline title\" [showSearch]=\"true\" (breadCrumbItemClick)=\"onBreadCrumbClick($event)\">\r\n        <ng-container right-buttons>\r\n            <pep-menu class=\"pep-spacing-element\" [items]=\"menuItems\" [sizeType]=\"'sm'\"\r\n                (menuItemClick)=\"onMenuItemClicked($event)\">\r\n            </pep-menu>\r\n            <pep-button class=\"pep-spacing-element\" [value]=\"'New'\" [sizeType]=\"'sm'\" [styleType]=\"'strong'\"\r\n                (click)=\"onBtnClicked()\">\r\n            </pep-button>\r\n        </ng-container>\r\n      \r\n    </pep-generic-list>\r\n\r\n\r\n\r\n    <!-- <pep-generic-list #glist2 [dataSource]=\"dataSourceLine\" [actions]=\"actions2\" [addPadding]=\"addPadding\" [inline]=\"true\" [showTopBar]=\"true\"\r\n        [uuidMapping]=\"'UUIS'\" [disabled]=\"disableTable\" [selectionType]=\"'multi'\" [pager]=\"pager\" [title]=\"title\"\r\n        [showSearch]=\"true\" (breadCrumbItemClick)=\"onBreadCrumbClick($event)\">\r\n        <ng-container right-buttons>\r\n            <pep-menu class=\"pep-spacing-element\" [items]=\"menuItems\" [sizeType]=\"'sm'\"\r\n                (menuItemClick)=\"onMenuItemClicked($event)\">\r\n            </pep-menu>\r\n            <pep-button class=\"pep-spacing-element\" [value]=\"'New'\" [sizeType]=\"'sm'\" [styleType]=\"'strong'\"\r\n                (click)=\"onBtn2Clicked()\">\r\n            </pep-button>\r\n        </ng-container>\r\n    </pep-generic-list> -->\r\n\r\n</div>\r\n<pep-button class=\"pep-spacing-element\" [value]=\"'Try me'\" [sizeType]=\"'sm'\" [styleType]=\"'strong'\" (click)=\"onClick()\">\r\n</pep-button>"
        },
        {
            "name": "GroupButtonsSettingsComponent",
            "id": "component-GroupButtonsSettingsComponent-4485caecfce45b507166c6dd1f8bff4555bcda73f34806199a9a9806130f57c9c2be6076a1310343f0b22b0f9defe102b5b8c56c8e0d714df90b8a3def145062",
            "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-group-buttons-settings",
            "styleUrls": [
                "./group-buttons-settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group-buttons-settings.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "btnKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "btnsArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "Array<PepButton>",
                    "decorators": []
                },
                {
                    "name": "dir",
                    "defaultValue": "'ltr'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "\"rtl\" | \"ltr\"",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "excludeKeys",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "Array<string>",
                    "decorators": []
                },
                {
                    "name": "groupType",
                    "defaultValue": "'sizes'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "PepGroupbuttonsTypes",
                    "decorators": []
                },
                {
                    "name": "header",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "subHeader",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "useNone",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "btnkeyChange",
                    "defaultValue": "new EventEmitter<IPepButtonClickEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "EventEmitter<IPepButtonClickEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_btnKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "defaultCallback",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "none",
                    "defaultValue": "{key: 'none'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepButton",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "sizes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<PepButton>",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "arrayMerge",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getButtonsArray",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onKeyChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepButtonClickEvent | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepButtonClickEvent | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { PepSizeType } from '@pepperi-addons/ngx-lib';\r\nimport { IPepButtonClickEvent, PepButton } from '@pepperi-addons/ngx-lib/button';\r\nimport { PepGroupbuttonsTypes } from './group-buttons-settings.model';\r\n\r\n@Component({\r\n    selector: 'pep-group-buttons-settings',\r\n    templateUrl: './group-buttons-settings.component.html',\r\n    styleUrls: ['./group-buttons-settings.component.scss']\r\n})\r\nexport class GroupButtonsSettingsComponent implements OnInit {\r\n\r\n    @Input() header = '';\r\n    @Input() subHeader = '';\r\n\r\n    @Input() groupType: PepGroupbuttonsTypes = 'sizes'; \r\n    @Input() btnsArray: Array<PepButton> = [];\r\n    @Input() excludeKeys: Array<string> = []; // for example ['xs','xl']\r\n\r\n    @Input() useNone = false;\r\n    @Input() disabled = false;\r\n    @Input() dir: 'rtl' | 'ltr' = 'ltr';\r\n    \r\n    private _btnKey: any;\r\n    @Input()\r\n    set btnKey(value: any) {\r\n        if (!value) {\r\n            this._btnKey = '';\r\n        } else {\r\n            this._btnKey = value;\r\n        }\r\n    }\r\n    get btnKey(): any {\r\n        return this._btnKey;\r\n    }\r\n\r\n    @Output()\r\n    btnkeyChange: EventEmitter<IPepButtonClickEvent> = new EventEmitter<IPepButtonClickEvent>();\r\n    \r\n    \r\n    none: PepButton = {key: 'none'};\r\n    \r\n    sizes: Array<PepButton> = [];\r\n    defaultCallback = (event: IPepButtonClickEvent) => this.onKeyChange(event);\r\n\r\n    // pepB: PepSizeType | 'none' = \"xs\";\r\n\r\n    constructor(\r\n        private translate: TranslateService,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void { \r\n        // Get the first translation for load all translations.\r\n        this.translate.get('GENERAL.NONE').subscribe((res) => {\r\n            this.none = { key: 'none', value: this.translate.instant('GENERAL.NONE'), callback: () => this.onKeyChange(null) };\r\n            \r\n            this.arrayMerge();\r\n        });\r\n    }\r\n\r\n    arrayMerge(){\r\n\r\n        this.btnsArray = this.getButtonsArray();\r\n        \r\n        // check if need to remove items from the buttons array\r\n        if(this.excludeKeys){\r\n            this.btnsArray = this.btnsArray.filter(i => !this.excludeKeys.find(f => f === i.key));\r\n        }\r\n        // check if need to add the None button\r\n        if(this.useNone){\r\n            this.btnsArray = [this.none].concat(this.btnsArray);\r\n        }\r\n    }\r\n\r\n    onKeyChange(event: IPepButtonClickEvent | null) {\r\n        this.btnKey = event?.source?.key || 'none';\r\n        this.btnkeyChange.emit(this.btnKey);\r\n    }\r\n\r\n    getButtonsArray() {\r\n        switch(this.groupType){\r\n            case 'custom':{\r\n                // Set default callback if not exist.\r\n                for (let index = 0; index < this.btnsArray.length; index++) {\r\n                    const btn = this.btnsArray[index];\r\n                    \r\n                    if (!btn.callback) {\r\n                        btn.callback = this.defaultCallback;\r\n                    }\r\n                }\r\n\r\n                return this.btnsArray;\r\n            }\r\n            case 'sizes':{\r\n                return [\r\n                    { key: 'xs', value: this.translate.instant('GENERAL.XS'), callback: this.defaultCallback },\r\n                    { key: 'sm', value: this.translate.instant('GENERAL.SM'), callback: this.defaultCallback },\r\n                    { key: 'md', value: this.translate.instant('GENERAL.MD'), callback: this.defaultCallback },\r\n                    { key: 'lg', value: this.translate.instant('GENERAL.LG'), callback: this.defaultCallback },\r\n                    { key: 'xl', value: this.translate.instant('GENERAL.XL'), callback: this.defaultCallback },\r\n                    { key: '2xl', value: this.translate.instant('GENERAL.XXL'), callback: this.defaultCallback }\r\n                ];\r\n            }\r\n            case 'vertical-align':{\r\n                return [\r\n                    { key: 'start', value: this.translate.instant('GENERAL.VERTICAL_ALIGN.TOP'), callback: this.defaultCallback },\r\n                    { key: 'middle', value: this.translate.instant('GENERAL.VERTICAL_ALIGN.MIDDLE'), callback: this.defaultCallback },\r\n                    { key: 'end', value: this.translate.instant('GENERAL.VERTICAL_ALIGN.BOTTOM'), callback: this.defaultCallback }\r\n                ];\r\n            }\r\n            case 'left-right-arrows':{\r\n                return [\r\n                    { key: 'left', iconName: 'arrow_left_alt', callback: this.defaultCallback },\r\n                    { key: 'right', iconName: 'arrow_right_alt', callback: this.defaultCallback }\r\n                ];\r\n            }\r\n            case 'horizontal-align': {\r\n                return [\r\n                    { key: 'left', iconName: 'text_align_right', callback: this.defaultCallback },\r\n                    { key: 'center', iconName: 'text_align_center', callback: this.defaultCallback },\r\n                    { key: 'right', iconName: 'text_align_left', callback: this.defaultCallback },\r\n                ];\r\n            }\r\n            case 'font-weight':{\r\n                return [\r\n                    { key: 'regular', value: this.translate.instant('GENERAL.FONT_WEIGHT.REGULAR'), callback: this.defaultCallback },\r\n                    { key: 'bold', value: this.translate.instant('GENERAL.FONT_WEIGHT.BOLD'), callback: this.defaultCallback },\r\n                    { key: 'bolder', value: this.translate.instant('GENERAL.FONT_WEIGHT.BOLDER'), callback: this.defaultCallback }\r\n                ]\r\n            }\r\n            case 'width-sizes':{\r\n                return [\r\n                    { key: 'narrow', value: this.translate.instant('GENERAL.WIDTH_SIZE.NARROW'), callback: this.defaultCallback },\r\n                    { key: 'regular', value: this.translate.instant('GENERAL.WIDTH_SIZE.REGULAR'), callback: this.defaultCallback },\r\n                    { key: 'wide', value: this.translate.instant('GENERAL.WIDTH_SIZE.WIDE'), callback: this.defaultCallback }\r\n                ];\r\n            }\r\n            case 'boolean':{\r\n                return [\r\n                    { key: 'true', value: this.translate.instant('GENERAL.BOOLEAN.TRUE'), callback: this.defaultCallback },\r\n                    { key: 'false', value: this.translate.instant('GENERAL.BOOLEAN.FALSE'), callback: this.defaultCallback }\r\n                ];\r\n            }\r\n\r\n            default: {\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/variables' as ngx-variables;\r\n\r\n:host {\r\n    width: 100%;\r\n    // max-width: 200px;\r\n\r\n    .shadow-size-group,\r\n    .shadow-type-group {\r\n        display: block;\r\n        margin-bottom: ngx-variables.$form-spacing;\r\n    }\r\n}",
                    "styleUrl": "./group-buttons-settings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "btnKey": {
                    "name": "btnKey",
                    "setSignature": {
                        "name": "btnKey",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "btnKey",
                        "type": "any",
                        "returnType": "any",
                        "line": 34
                    }
                }
            },
            "templateData": "<label *ngIf=\"header != ''\" class=\"body-xl bold ellipsis\">{{header}}</label>\r\n<pep-field-title *ngIf=\"subHeader !=''\" [label]=\"subHeader\" [disabled]=\"disabled\" [xAlignment]=\"dir === 'rtl' ? 'right' : 'left'\"></pep-field-title>\r\n<pep-group-buttons [buttons]=\"btnsArray\" \r\n                   [selectedButtonKey]=\"btnKey\" \r\n                   [stretch]=\"true\" \r\n                   buttonsClass=\"md regular\" \r\n                   [buttonsDisabled]=\"disabled\" \r\n                   viewType=\"toggle\">\r\n</pep-group-buttons>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-9e6f72322431740f24700320358c5bb091c497fb5e4331999d4e77740f43da7c0d5bb2d645997a97f860ca86bb61f311cb55c8fe136f7096dd6410154fcb9c63",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { User } from './User';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  template: `<header>\r\n    <div class=\"wrapper\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <storybook-button\r\n          *ngIf=\"user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogout.emit($event)\"\r\n          label=\"Log out\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogin.emit($event)\"\r\n          label=\"Log in\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          primary\r\n          size=\"small\"\r\n          (onClick)=\"onCreateAccount.emit($event)\"\r\n          label=\"Sign up\"\r\n        ></storybook-button>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport default class HeaderComponent {\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\nsvg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nh1 {\r\n  font-weight: 900;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nbutton + button {\r\n  margin-left: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "IconPickerComponent",
            "id": "component-IconPickerComponent-406bd0a8673757345de357dec37e1ae491f733e201c408abff5d9f88d540758909ca63b0d2a77b065ca9bf0979f1ba529846b787552fdc54c18d65536761c9d6",
            "file": "projects/ngx-composite-lib/icon-picker/icon-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-icon-picker",
            "styleUrls": [
                "./icon-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon-picker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "dir",
                    "defaultValue": "'ltr'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"rtl\" | \"ltr\"",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "header",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconURL",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "preview_header",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "select_btn_header",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "useCheckBoxHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "iconChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "iconDisableChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUseIconChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openIconPickerDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, ViewContainerRef } from '@angular/core';\r\nimport { PepAddonBlockLoaderService } from '@pepperi-addons/ngx-lib/remote-loader';\r\n\r\n\r\n@Component({\r\n    selector: 'pep-icon-picker',\r\n    templateUrl: './icon-picker.component.html',\r\n    styleUrls: ['./icon-picker.component.scss']\r\n})\r\nexport class IconPickerComponent implements OnInit {\r\n\r\n    @Input() disabled = false;\r\n    @Input() header = '';\r\n    @Input() preview_header = '';\r\n    @Input() select_btn_header = '';\r\n    @Input() dir: 'rtl' | 'ltr' = 'ltr';\r\n    @Input() iconURL = '';\r\n    @Input() useCheckBoxHeader = true;\r\n\r\n    @Output()\r\n    iconChange: EventEmitter<any> = new EventEmitter<any>();\r\n    \r\n    @Output()\r\n    iconDisableChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    constructor(\r\n        private viewContainerRef: ViewContainerRef,\r\n        private addonBlockLoaderService: PepAddonBlockLoaderService) { }\r\n\r\n    ngOnInit() {\r\n        // Do nothing.\r\n    }\r\n\r\n   \r\n\r\n    openIconPickerDialog() {\r\n        const dialogRef = this.addonBlockLoaderService.loadAddonBlockInDialog({\r\n            container: this.viewContainerRef,\r\n            name: 'AssetPicker',\r\n            hostObject: {\r\n                selectionType: 'single',\r\n                allowedAssetsTypes: 'images',\r\n                inDialog: true\r\n            },\r\n            size: 'full-screen',\r\n            hostEventsCallback: async (event) => {\r\n                if (event?.action === 'on-save') {\r\n                    this.iconChange.emit(event);\r\n                    dialogRef?.close();\r\n                } else if (event.action === 'on-cancel') {\r\n                    dialogRef?.close();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    onUseIconChange(event: boolean){\r\n       this.disabled = !this.disabled;\r\n       this.iconDisableChange.emit(event);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    width: 100%;\r\n}\r\n\r\n.main-cont{\r\n    display: flex;\r\n    gap: 0.5rem; \r\n    width: 100%;\r\n\r\n    .selected-cont{\r\n        width: 3.5rem;\r\n        align-self: end;\r\n        display: flex;\r\n        flex-direction: column;\r\n\r\n        .pep-button{\r\n            display: flex;\r\n            align-items: center;\r\n\r\n            img{\r\n                max-height: 1.5rem;\r\n                max-width: 1.5rem;\r\n            }\r\n        }\r\n    }\r\n    .choose-btn-cont{\r\n        width: -webkit-fill-available;\r\n        align-self: end;\r\n        display: flex;\r\n        flex-direction: column;  \r\n    }\r\n}",
                    "styleUrl": "./icon-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "addonBlockLoaderService",
                        "type": "PepAddonBlockLoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "addonBlockLoaderService",
                        "type": "PepAddonBlockLoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<label *ngIf=\"!useCheckBoxHeader\" class=\"title-xl ellipsis\">{{header !== '' ? header : ('ICON_PICKER_BUTTON.MAIN_HEADER' | translate)}}</label>\r\n<pep-checkbox *ngIf=\"useCheckBoxHeader\" \r\n        class=\"checkbox-as-title\" \r\n        [value]=\"!disabled\" \r\n        [label]=\"header !== '' ? header : ('ICON_PICKER_BUTTON.MAIN_HEADER' | translate)\" \r\n        [renderTitle]=\"false\" \r\n        (valueChange)=\"onUseIconChange($event)\">\r\n</pep-checkbox>\r\n<div class=\"main-cont\">\r\n    <div class=\"selected-cont\">\r\n        <pep-field-title [label]=\"preview_header !== '' ? preview_header : ('ICON_PICKER_BUTTON.SELECTED' | translate)\" \r\n                         [disabled]=\"disabled\" \r\n                         [xAlignment]=\"dir === 'rtl' ? 'right' : 'left'\">\r\n        </pep-field-title>\r\n        <!-- <pep-button\r\n            iconName=\"system_bolt\"\r\n            [disabled]=\"disabled\">\r\n           \r\n        </pep-button> -->\r\n        <div class=\"pep-button md weak\">\r\n            <img *ngIf=\"iconURL !== ''\" [src]=\"iconURL\"/>\r\n        </div>\r\n    </div>\r\n    <div class=\"choose-btn-cont\">\r\n        <pep-field-title [label]=\"select_btn_header !== '' ? select_btn_header : ('ICON_PICKER_BUTTON.CHOOSE_ICON_HEADER' | translate)\" \r\n                         [disabled]=\"disabled\" \r\n                         [xAlignment]=\"dir === 'rtl' ? 'right' : 'left'\">\r\n        </pep-field-title>\r\n        <pep-button\r\n            [value]=\"'ICON_PICKER_BUTTON.CHOOSE_ICON' | translate\" \r\n            styleType=\"regular\"\r\n            [disabled]=\"disabled\" (buttonClick)=\"openIconPickerDialog()\">\r\n        </pep-button>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ManageParameterComponent",
            "id": "component-ManageParameterComponent-f87c4d757d64e24b74815c25670b4e1968f14942f0dc8b2a2579638c32b48094452f554300038f88182655f26a1c6eb4fdb33f0f489f824ed1da6306bf913af4",
            "file": "projects/ngx-composite-lib/manage-parameters/manage-parameter/manage-parameter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "manage-parameter",
            "styleUrls": [
                "./manage-parameter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./manage-parameter.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericFormDataView",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GenericFormComponent",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "incoming",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IParameterFormData",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "isValid",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "parameter",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IParamemeter | undefined",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "showAccessibility",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "showType",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "parameter",
                            "type": "IParamemeter | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "parameter",
                            "type": "IParamemeter | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getParameter",
                    "args": [
                        {
                            "name": "parameter",
                            "type": "IParamemeter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IParamemeter",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "parameter",
                            "type": "IParamemeter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadDataView",
                    "args": [
                        {
                            "name": "paramType",
                            "type": "SchemeFieldType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "paramType",
                            "type": "SchemeFieldType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onValueChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepGenericFormValueChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepGenericFormValueChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveParameter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\nimport { GenericFormComponent, IPepGenericFormDataView, IPepGenericFormValueChange } from '@pepperi-addons/ngx-composite-lib/generic-form';\r\nimport { IParamemeter, IParameterFormData } from '../manage-parameters.model';\r\n\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { ManageParametersService } from '../manage-parameters.service';\r\nimport { SchemeFieldType } from '@pepperi-addons/papi-sdk';\r\n\r\n@Component({\r\n    selector: 'manage-parameter',\r\n    templateUrl: './manage-parameter.component.html',\r\n    styleUrls: ['./manage-parameter.component.scss']\r\n})\r\nexport class ManageParameterComponent implements OnInit {\r\n\r\n    // @ViewChild('flowsList', {read: GenericFormComponent}) set genericFormSetter(inForm: GenericFormComponent) {\r\n    //     if (inForm) {\r\n    //         this.form = inForm;\r\n    //     }\r\n    // };\r\n    \r\n    form!: GenericFormComponent;\r\n    parameter: IParamemeter | undefined = undefined;\r\n    showType = false;\r\n    showAccessibility = false;\r\n    dataView!: IPepGenericFormDataView;\r\n    isValid = true;\r\n\r\n    constructor ( private dialogRef: MatDialogRef<ManageParameterComponent>,\r\n        private manageParametersService: ManageParametersService,\r\n        private translate: TranslateService,\r\n        @Inject(MAT_DIALOG_DATA) public incoming: IParameterFormData) {\r\n\r\n    }\r\n\r\n    private loadDataView(paramType: SchemeFieldType) {\r\n        this.dataView = this.manageParametersService.getParameterFormDataView(this.incoming.Mode, paramType || 'String', this.showType, this.showAccessibility);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.parameter = this.getParameter(this.incoming.Parameter);\r\n        this.showType = this.incoming.ShowType ?? false;\r\n        this.showAccessibility = this.incoming.ShowAccessibility ?? false;\r\n        this.loadDataView(this.parameter?.Type);\r\n    }\r\n\r\n    saveParameter() {\r\n        // before updating the parameter, remove redundant properties\r\n        if (this.parameter && this.showAccessibility) {\r\n            delete this.parameter['Accessibility'];\r\n            delete this.parameter['Accessibility_Description'];\r\n        }\r\n\r\n        this.close(this.parameter);\r\n    }\r\n\r\n    close(parameter: IParamemeter | undefined = undefined) {\r\n        this.dialogRef.close(parameter || null);\r\n    }\r\n\r\n    getParameter(parameter: IParamemeter): IParamemeter {\r\n        const ret: IParamemeter = JSON.parse(JSON.stringify(parameter));\r\n        Object.keys(parameter || {}).forEach(prop => {\r\n            if (typeof(parameter[prop]) != 'boolean') {\r\n                // if the value is null/undefined, don't copy it\r\n                if (parameter[prop]) {\r\n                    ret[prop] = parameter[prop].toString();\r\n                }\r\n            } else if (prop === 'Internal' && this.showAccessibility) {\r\n                ret['Accessibility'] = parameter[prop] ? 'Internal' : 'External'\r\n            } else {\r\n                ret[prop] = parameter[prop];\r\n            }\r\n        });\r\n        \r\n        if (this.showAccessibility) {\r\n            ret['Accessibility_Description'] = this.translate.instant('MANAGE_PARAMETERS.INTERNAL_DESCRIPTION');\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    onValueChanged(event: IPepGenericFormValueChange) {\r\n        if (event.ApiName === 'Type' && this.showType) {\r\n            this.loadDataView(event.Value);\r\n        } else if (event.ApiName === 'Accessibility' && this.showAccessibility) {\r\n            if (this.parameter) {\r\n                this.parameter['Internal'] = event.Value === 'Internal';\r\n            }\r\n        }\r\n    }\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// :host {\r\n    \r\n// }",
                    "styleUrl": "./manage-parameter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ManageParameterComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "manageParametersService",
                        "type": "ManageParametersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "incoming",
                        "type": "IParameterFormData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ManageParameterComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "manageParametersService",
                        "type": "ManageParametersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "incoming",
                        "type": "IParameterFormData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<pep-dialog [title]=\"(incoming.Mode === 'edit' ? 'MANAGE_PARAMETERS.EDIT_FORM_TITLE' : 'MANAGE_PARAMETERS.ADD_FORM_TITLE') | translate\">\r\n    <ng-container pep-dialog-content>\r\n        <pep-generic-form #addForm [dataSource]=\"parameter\" [dataView]=\"dataView\" (formValidationChange)=\"isValid = $event\" (valueChange)=\"onValueChanged($event)\">\r\n\r\n        </pep-generic-form>\r\n    </ng-container>\r\n    <ng-container pep-dialog-actions>\r\n        <div class=\"pep-spacing-element-negative\" style=\"display: flex;\">         \r\n            <pep-button \r\n                class=\"pep-spacing-element\"\r\n                [sizeType]=\"'md'\" \r\n                [value]=\"'Cancel' | translate\" \r\n                [styleType]=\"'weak'\" \r\n                (buttonClick)=\"close()\"\r\n        ></pep-button>\r\n            <pep-button \r\n                class=\"pep-spacing-element\"\r\n                [sizeType]=\"'md'\" \r\n                [value]=\"(incoming.Mode === 'edit' ? 'Update' : 'Save') | translate\"\r\n                [styleType]=\"'strong'\" \r\n                (buttonClick)=\"saveParameter()\"\r\n                [disabled]=\"!isValid\"\r\n            ></pep-button>\r\n        </div>\r\n    </ng-container>\r\n</pep-dialog>"
        },
        {
            "name": "ManageParametersComponent",
            "id": "component-ManageParametersComponent-05c41ae1bc058dd9b9c849fdc9392ee57da29395bb68358ba1d703d744b162c15a3b37468c23bd09c7a9a8527efd378228421fe6f92ee40697d46e79d7ac50b3",
            "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-manage-parameters",
            "styleUrls": [
                "./manage-parameters.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./manage-parameters.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "parameters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "IParamemeter[]",
                    "decorators": []
                },
                {
                    "name": "parametersColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IParametersColumn[]",
                    "decorators": []
                },
                {
                    "name": "parametersTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showAccessibility",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showType",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "parametersChange",
                    "defaultValue": "new EventEmitter<IParamemeter[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "actions",
                    "defaultValue": "{\r\n        get: async (data: PepSelectionData) => {\r\n            const actions = [];\r\n            if (data && data.rows.length == 1) {\r\n                actions.push({\r\n                    title: this.translate.instant('Edit'),\r\n                    handler: async (objs: any) => {\r\n                        this.openCreateParamForm('edit', objs.rows[0]);\r\n                    }\r\n                });\r\n                actions.push({\r\n                    title: this.translate.instant('Delete'),\r\n                    handler: async (objs: any) => {\r\n                        this.showDeleteDialog(objs.rows[0]);\r\n                    }\r\n                })\r\n            }\r\n            return actions;\r\n        }\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListActions",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListDataSource",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "listMessages",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "getDataSource",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepGenericListDataSource",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "notifyParametersChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onFieldClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepFieldClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepFieldClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCreateParamForm",
                    "args": [
                        {
                            "name": "formMode",
                            "type": "ParameterFormType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "paramName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formMode",
                            "type": "ParameterFormType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "paramName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showDeleteDialog",
                    "args": [
                        {
                            "name": "paramName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "paramName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { IPepGenericListActions, IPepGenericListDataSource, IPepGenericListParams } from '@pepperi-addons/ngx-composite-lib/generic-list';\r\nimport { PepDialogData, PepDialogService } from '@pepperi-addons/ngx-lib/dialog';\r\nimport { PepSelectionData } from '@pepperi-addons/ngx-lib/list';\r\nimport { ParameterFormType, IParameterFormData, IParamemeter, IParametersColumn } from './manage-parameters.model';\r\nimport { ManageParameterComponent } from './manage-parameter/manage-parameter.component';\r\nimport { IPepFieldClickEvent } from '@pepperi-addons/ngx-lib';\r\nimport { ManageParametersService } from './manage-parameters.service';\r\n\r\n@Component({\r\n    selector: 'pep-manage-parameters',\r\n    templateUrl: './manage-parameters.component.html',\r\n    styleUrls: ['./manage-parameters.component.scss']\r\n})\r\nexport class ManageParametersComponent implements OnInit {\r\n\r\n    @Input()\r\n    showType = false;\r\n\r\n    @Input()\r\n    showAccessibility = false;\r\n\r\n    // If columns are not defined, the default columns will be used (default is with no Internal - Accessibility).\r\n    @Input()\r\n    parametersColumns: IParametersColumn[] = [];\r\n\r\n    @Input()\r\n    parameters: IParamemeter[] = [];\r\n\r\n    @Input()\r\n    parametersTitle = '';\r\n\r\n    @Output()\r\n    parametersChange = new EventEmitter<IParamemeter[]>();\r\n    \r\n    dataSource!: IPepGenericListDataSource;\r\n    listMessages: { [key: string]: string } = {};\r\n\r\n    actions: IPepGenericListActions = {\r\n        get: async (data: PepSelectionData) => {\r\n            const actions = [];\r\n            if (data && data.rows.length == 1) {\r\n                actions.push({\r\n                    title: this.translate.instant('Edit'),\r\n                    handler: async (objs: any) => {\r\n                        this.openCreateParamForm('edit', objs.rows[0]);\r\n                    }\r\n                });\r\n                actions.push({\r\n                    title: this.translate.instant('Delete'),\r\n                    handler: async (objs: any) => {\r\n                        this.showDeleteDialog(objs.rows[0]);\r\n                    }\r\n                })\r\n            }\r\n            return actions;\r\n        }\r\n    }\r\n\r\n    constructor (private translate: TranslateService,\r\n        private dataViewService: ManageParametersService,\r\n        private dialogService: PepDialogService\r\n    ) { }\r\n\r\n    private notifyParametersChange() {\r\n        this.parametersChange.emit(this.parameters);\r\n        this.dataSource = this.getDataSource();\r\n    }\r\n\r\n    private getDataSource(): IPepGenericListDataSource {\r\n        return {\r\n            init: async (params: IPepGenericListParams) => {\r\n                const listDataView = this.dataViewService.getParametersListDataView(this.parametersColumns, this.showType, this.showAccessibility);\r\n                console.log('data view:', listDataView);\r\n                return {\r\n                    dataView: listDataView,\r\n                    totalCount: this.parameters.length,\r\n                    items: this.parameters\r\n                };\r\n            },\r\n            inputs: {\r\n                pager: {\r\n                    type: 'scroll'\r\n                },\r\n                selectionType: 'single',\r\n                emptyState: {\r\n                    show: true,\r\n                    title: this.listMessages['MANAGE_PARAMETERS.EMPTY_STATE_TITLE'],\r\n                    description: this.listMessages['MANAGE_PARAMETERS.EMPTY_STATE_DESCRIPTION'],\r\n                }\r\n            },\r\n        } as IPepGenericListDataSource\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.translate.get(['MANAGE_PARAMETERS.EMPTY_STATE_TITLE', 'MANAGE_PARAMETERS.EMPTY_STATE_DESCRIPTION']).subscribe(translations => {\r\n            this.listMessages = translations;\r\n            this.dataSource = this.getDataSource();\r\n        })\r\n    }\r\n\r\n    onFieldClick(event: IPepFieldClickEvent) {\r\n        this.openCreateParamForm('edit', event.value);\r\n    }\r\n\r\n    openCreateParamForm(formMode: ParameterFormType, paramName = '') {\r\n        const paramItem = this.parameters.find(x => x.Key === paramName);\r\n        const defaultParam: IParamemeter = {\r\n            DefaultValue: '',\r\n            Key: '',\r\n            Type: 'String',\r\n            Description: ''\r\n        };\r\n\r\n        // Add Accessibility field only if showAccessibility is true.\r\n        if (this.showAccessibility) {\r\n            defaultParam['Internal'] = false;\r\n        }\r\n\r\n        const parameter = { ...defaultParam, ...paramItem };\r\n    \r\n        const formData: IParameterFormData = {\r\n            Parameter: parameter,\r\n            Mode: formMode,\r\n            ShowType: this.showType,\r\n            ShowAccessibility: this.showAccessibility\r\n        };\r\n\r\n        const config = this.dialogService.getDialogConfig({}, 'large');\r\n        config.data = new PepDialogData({\r\n            content: ManageParameterComponent\r\n        })\r\n        \r\n        this.dialogService.openDialog(ManageParameterComponent, formData, config).afterClosed().subscribe((value: IParamemeter) => {\r\n            if (value) {\r\n                const index = this.parameters.findIndex(param => param.Key === value.Key);\r\n                // if the param doesn't exist, push to the end of the array, otherwise edit existing\r\n                if (index < 0) {\r\n                    this.parameters.push(value);\r\n                }\r\n                else {\r\n                    this.parameters.splice(index, 1, value);\r\n                }\r\n\r\n                this.notifyParametersChange();\r\n            }\r\n        });\r\n    }\r\n\r\n    showDeleteDialog(paramName: string) {\r\n        const dataMsg = new PepDialogData({\r\n            title: this.translate.instant('MANAGE_PARAMETERS.DELETE_DIALOG_TITLE', { param_name: paramName }),\r\n            actionsType: 'cancel-delete',\r\n            content: this.translate.instant('MANAGE_PARAMETERS.DELETE_DIALOG_CONTENT')\r\n        });\r\n\r\n        this.dialogService.openDefaultDialog(dataMsg).afterClosed().subscribe(async (isDeletePressed) => {\r\n            if (isDeletePressed) {\r\n                const index = this.parameters.findIndex(x => x.Key === paramName);\r\n                if (index > -1) {\r\n                    this.parameters.splice(index, 1);\r\n                    this.notifyParametersChange();\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    .generic-list {\r\n        height: 100%;\r\n    }   \r\n}",
                    "styleUrl": "./manage-parameters.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataViewService",
                        "type": "ManageParametersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "PepDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataViewService",
                        "type": "ManageParametersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "PepDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<pep-generic-list class=\"generic-list\"\r\n    [title]=\"parametersTitle || ('MANAGE_PARAMETERS.TITLE' | translate)\"\r\n    [showTopBar]=\"true\" \r\n    [dataSource]=\"dataSource\" \r\n    [inline]=\"true\"\r\n    [actions]=\"actions\"\r\n    [addPadding]=\"false\"\r\n    [uuidMapping]=\"'Key'\"\r\n    (fieldClick)=\"onFieldClick($event)\"\r\n    >\r\n    <ng-container right-buttons>\r\n        <pep-button \r\n            class=\"pep-spacing-element\"\r\n            [sizeType]=\"'sm'\" \r\n            [value]=\"'MANAGE_PARAMETERS.ADD_BUTTON_TITLE' | translate\"\r\n            [styleType]=\"'strong'\" \r\n            (buttonClick)=\"openCreateParamForm('add', '')\"\r\n        ></pep-button>\r\n    </ng-container>\r\n</pep-generic-list>"
        },
        {
            "name": "MenuDataViewComponent",
            "id": "component-MenuDataViewComponent-73d1c124618eff6ecb5af4c369963d7ec5c0fdfd892c64aabda8a492a93db1cedef344de7205f86ff38895f60358b218cc6b0d63f93221cc037845567eebe065",
            "file": "projects/ngx-composite-lib/data-view-builder/menu-data-view/menu-data-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "menu-data-view",
            "styleUrls": [
                "./menu-data-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu-data-view.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "availableFieldsTitles",
                    "defaultValue": "new Map<string, string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "Map<string | string>",
                    "decorators": []
                },
                {
                    "name": "emptyDropAreaId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "fields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "Array<DataViewField>",
                    "decorators": []
                },
                {
                    "name": "itemKeyLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "itemTitleLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mappedFieldsId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showAddSeparator",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fieldsChange",
                    "defaultValue": "new EventEmitter<DataViewField[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "EventEmitter<DataViewField[]>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isGrabbing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "separatorTitleModalTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'separatorTitleModalTemplate', {read: TemplateRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewField",
                    "args": [
                        {
                            "name": "draggableItem",
                            "type": "IPepDraggableItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "draggableItem",
                            "type": "IPepDraggableItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addSeparator",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeTitle",
                    "args": [
                        {
                            "name": "menuField",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "menuField",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeDialog",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "notifyFieldsChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onDeleteMappedField",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepButtonClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "menuField",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepButtonClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "menuField",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragEnd",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragEnd",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragStart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragStart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDropField",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<any[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<any[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEditSeparatorField",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepButtonClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "menuField",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepButtonClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "menuField",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTitleChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "menuField",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "menuField",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDialogValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "spliceMappedFields",
                    "args": [
                        {
                            "name": "start",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "deleteCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "start",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "deleteCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CdkDragDrop, CdkDragEnd, CdkDragStart, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { Component, EventEmitter, Input, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { IPepButtonClickEvent } from '@pepperi-addons/ngx-lib/button';\r\nimport { PepDialogService } from '@pepperi-addons/ngx-lib/dialog';\r\nimport { IPepDraggableItem } from '@pepperi-addons/ngx-lib/draggable-items';\r\nimport { DataViewField, MenuDataViewField } from '@pepperi-addons/papi-sdk';\r\nimport { DataViewBuilderService } from '../data-view-builder.service';\r\n\r\n@Component({\r\n    selector: 'menu-data-view',\r\n    templateUrl: './menu-data-view.component.html',\r\n    styleUrls: ['./menu-data-view.component.scss']\r\n})\r\nexport class MenuDataViewComponent implements OnInit {\r\n    @ViewChild('separatorTitleModalTemplate', { read: TemplateRef }) separatorTitleModalTemplate!: TemplateRef<any>;\r\n\r\n    @Input() \r\n    fields: Array<DataViewField> = []; // The data view fields.\r\n\r\n    @Input()\r\n    availableFieldsTitles: Map<string, string> = new Map<string, string>(); // <FieldID, Original Title> from the available fields.\r\n\r\n    @Input() \r\n    emptyDropAreaId = '';\r\n\r\n    @Input() \r\n    mappedFieldsId = '';\r\n\r\n    @Input()\r\n    showAddSeparator = true;\r\n\r\n    @Input()\r\n    itemKeyLabel = '';\r\n\r\n    @Input()\r\n    itemTitleLabel = '';\r\n\r\n    @Output()\r\n    fieldsChange: EventEmitter<DataViewField[]> = new EventEmitter<DataViewField[]>();\r\n    \r\n    isGrabbing = false;\r\n    private dialogRef: MatDialogRef<any> | null = null;\r\n    \r\n    constructor(\r\n        private translate: TranslateService,\r\n        private dialogService: PepDialogService,\r\n        private dataViewBuilderService: DataViewBuilderService\r\n    ) { \r\n        this.dataViewBuilderService.isGrabbingChange$.subscribe((value) => {\r\n            this.isGrabbing = value;\r\n        });\r\n    }\r\n    \r\n    private addNewField(draggableItem: IPepDraggableItem, index: number) {\r\n        // Add new menuField to the mappedFields.\r\n        const menuField: MenuDataViewField = { FieldID: draggableItem.data.key, Title: draggableItem.title };\r\n        this.spliceMappedFields(index, 0, menuField);\r\n    }\r\n    \r\n    private spliceMappedFields(start: number, deleteCount: number, item?: MenuDataViewField) {\r\n        if (item) {\r\n            this.fields.splice(start, deleteCount, item);\r\n        } else {\r\n            this.fields.splice(start, deleteCount);\r\n        }\r\n\r\n        this.notifyFieldsChange();\r\n    }\r\n\r\n    private changeTitle(menuField: MenuDataViewField, title: string) {\r\n        menuField.Title = title;\r\n        this.notifyFieldsChange();\r\n    }\r\n\r\n    private notifyFieldsChange() {\r\n        this.fieldsChange.emit(this.fields);\r\n    }\r\n\r\n    ngOnInit() {\r\n        if(this.itemKeyLabel == ''){\r\n            this.translate.get('DATA_VIEW_BUILDER.MENU_ITEM_KEY_TITLE').toPromise().then((res) => {\r\n                this.itemKeyLabel = res;\r\n            });\r\n        }\r\n        if(this.itemTitleLabel == ''){\r\n            this.translate.get('DATA_VIEW_BUILDER.MENU_ITEM_VALUE_TITLE').toPromise().then((res) => {\r\n                this.itemTitleLabel = res;\r\n            });\r\n        }\r\n    }\r\n\r\n    addSeparator(index: number) {\r\n        const menuField: MenuDataViewField = { FieldID: '', Title: '' };\r\n        this.spliceMappedFields(index, 0, menuField);\r\n    }\r\n\r\n    onDragStart(event: CdkDragStart) {\r\n        this.dataViewBuilderService.onDragStart(event);\r\n    }\r\n\r\n    onDragEnd(event: CdkDragEnd) {\r\n        this.dataViewBuilderService.onDragEnd(event);\r\n    }\r\n    \r\n    onDropField(event: CdkDragDrop<any[]>) {\r\n        if (event.previousContainer === event.container) {\r\n            moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n            this.notifyFieldsChange();\r\n        } else if (event.container.id === 'emptyDropArea') {\r\n            this.addNewField(event.previousContainer.data[event.previousIndex], this.fields.length);\r\n        } else {\r\n            this.addNewField(event.previousContainer.data[event.previousIndex], event.currentIndex);\r\n        }\r\n    }\r\n\r\n    onTitleChanged(event: string, menuField: MenuDataViewField) {\r\n        this.changeTitle(menuField, event);\r\n    }\r\n\r\n    onDeleteMappedField(event: IPepButtonClickEvent, menuField: MenuDataViewField) {\r\n        const index = this.fields.findIndex(ms => ms === menuField);\r\n        if (index > -1) {\r\n            this.spliceMappedFields(index, 1);\r\n        }\r\n    }\r\n\r\n    onEditSeparatorField(event: IPepButtonClickEvent, menuField: MenuDataViewField) {\r\n        this.dialogRef = this.dialogService.openDialog(this.separatorTitleModalTemplate, { value: menuField.Title });\r\n        this.dialogRef.afterClosed().subscribe((titleValue) => {\r\n            if (titleValue !== undefined) {\r\n                this.changeTitle(menuField, titleValue);\r\n            }\r\n        });\r\n    }\r\n\r\n    setDialogValue(value: string) {\r\n        this.closeDialog(value);\r\n    }\r\n\r\n    closeDialog(value: string | undefined = undefined) {\r\n        this.dialogRef?.close(value);\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/variables' as ngx-variables;\r\n@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/mixins' as ngx-mixins;\r\n@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/functions' as ngx-functions;\r\n\r\n@use '../../src/core/style/components/data-view-builder';\r\n\r\n.drop-field-here-area {\r\n    min-height: 5rem;\r\n\r\n    @include data-view-builder.mapped-field-item-container();\r\n    @include ngx-mixins.state-weak-default();\r\n    @include ngx-mixins.inline(ngx-functions.get-pep-color(color-system-primary, color-flat-r-20), 1px, dashed);\r\n\r\n    &.cdk-drop-list-dragging {\r\n        @include ngx-mixins.focus();\r\n        \r\n        &:hover {\r\n            @include ngx-mixins.state-regular-hover(true);\r\n            @include ngx-mixins.focus();\r\n        }\r\n\r\n        // Hide the placeholder when \r\n        ::ng-deep.placeholder-item {\r\n            display: none;\r\n        }\r\n    }\r\n}\r\n\r\n.mapped-fields-area {\r\n    display: flex;\r\n    flex-direction: column;\r\n    // row-gap: ngx-variables.$content-margin;\r\n    column-gap: ngx-variables.$content-margin;\r\n    \r\n    &:not(.no-row-gap) {\r\n        row-gap: ngx-variables.$content-margin;\r\n    }\r\n\r\n    &.cdk-drop-list-dragging {\r\n        ::ng-deep.placeholder-item {\r\n            @include data-view-builder.mapped-field-item-container();\r\n            @include ngx-mixins.state-regular-default(true);\r\n            @include ngx-mixins.focus();\r\n            height: ngx-variables.$draggable-item-height;\r\n        }\r\n    }\r\n\r\n    // The mapped-field-container style declared in style.scss because when dragging in list the item added to the end of the dom and we cannot style it here (component context).\r\n    .mapped-field-container { \r\n        cursor: grab;\r\n        @include data-view-builder.mapped-field-container();\r\n\r\n        &.cdk-drag-placeholder {\r\n            // opacity: 0;\r\n            // @include ngx-mixins.state-regular-default(true);\r\n            @include ngx-mixins.focus();\r\n\r\n            .fields-wrapper,\r\n            .separator-wrapper {\r\n                opacity: 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    .add-separator-container {\r\n        @include data-view-builder.mapped-field-item-container();\r\n        height: ngx-variables.$content-margin;\r\n\r\n        .add-separator {\r\n            position: relative;\r\n            display: none;\r\n        }\r\n\r\n        &:hover .add-separator {\r\n            display: block;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./menu-data-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "PepDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataViewBuilderService",
                        "type": "DataViewBuilderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "PepDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataViewBuilderService",
                        "type": "DataViewBuilderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"fields === null || fields.length === 0; then emptyTemplate; else notEmptyTemplate\"></ng-container>\r\n<ng-template #emptyTemplate>\r\n    <div [id]=\"emptyDropAreaId\" class=\"drop-field-here-area\" cdkDropList (cdkDropListDropped)=\"onDropField($event)\">\r\n        <mat-icon class=\"pep-spacing-element\">\r\n            <pep-icon name=\"arrow_down_alt\"></pep-icon>\r\n        </mat-icon>\r\n        <span class=\"body-sm ellipsis\">\r\n            {{ 'DATA_VIEW_BUILDER.EMPTY_DROP_AREA_TEXT' | translate }}\r\n        </span> \r\n    </div>\r\n</ng-template>\r\n<ng-template #notEmptyTemplate>\r\n    <div [id]=\"mappedFieldsId\" class=\"mapped-fields-area\" [ngClass]=\"{ 'no-row-gap': !isGrabbing }\"\r\n        cdkDropList [cdkDropListData]=\"fields\" (cdkDropListDropped)=\"onDropField($event)\">\r\n        <ng-container *ngFor=\"let menuField of fields; let i = index\" >\r\n            <div class=\"mapped-field-container\" [ngClass]=\"{ 'separator-container': menuField.FieldID === '' }\" \r\n                cdkDrag (cdkDragStarted)=\"onDragStart($event)\" (cdkDragEnded)=\"onDragEnd($event)\">\r\n                <ng-container *ngTemplateOutlet=\"mappedFieldTemplate; context: { menuField: menuField }\"></ng-container>\r\n            </div>\r\n            <div *ngIf=\"!isGrabbing\" class=\"add-separator-container\">\r\n                <pep-button *ngIf=\"showAddSeparator\" class=\"add-separator\" styleType=\"regular\" sizeType=\"sm\" iconName=\"number_plus\" \r\n                    [value]=\"'DATA_VIEW_BUILDER.ADD_SEPARATOR' | translate\" (buttonClick)=\"addSeparator(i+1)\"></pep-button>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #mappedFieldTemplate let-menuField=\"menuField\">\r\n    <ng-container *ngIf=\"menuField.FieldID !== ''; then menuItemTemplate; else separatorTemplate\"></ng-container>\r\n\r\n    <ng-template #menuItemTemplate>\r\n        <div class=\"fields-wrapper\">\r\n            <pep-textbox [label]=\"itemKeyLabel\" [value]=\"menuField.FieldID\" [disabled]=\"true\">\r\n            </pep-textbox>\r\n            \r\n            <pep-textbox [label]=\"itemTitleLabel\" [hint]=\"'(' + (availableFieldsTitles.get(menuField.FieldID) || '') + ')'\"\r\n                [value]=\"menuField.Title\" (valueChange)=\"onTitleChanged($event, menuField)\">\r\n            </pep-textbox>\r\n    \r\n            <pep-button class=\"center-button\" iconName=\"system_bin\" [title]=\"'ACTIONS.DELETE' | translate\" (buttonClick)=\"onDeleteMappedField($event, menuField)\"></pep-button>\r\n        </div>\r\n    </ng-template>\r\n    <ng-template #separatorTemplate>\r\n        <div class=\"separator-wrapper \">\r\n            <div class=\"pep-spacing-element title title-md color-dimmed\">\r\n                <span [title]=\"menuField.Title\">{{ menuField.Title }}</span>\r\n            </div>\r\n            <div class=\"list-actions\">\r\n                <pep-button iconName=\"system_edit\" [title]=\"'ACTIONS.EDIT' | translate\" sizeType=\"xs\" styleType=\"regular\" (buttonClick)=\"onEditSeparatorField($event, menuField)\"></pep-button>\r\n                <pep-button iconName=\"system_bin\" [title]=\"'ACTIONS.DELETE' | translate\" sizeType=\"xs\" styleType=\"regular\" (buttonClick)=\"onDeleteMappedField($event, menuField)\"></pep-button>\r\n            </div>\r\n        </div>\r\n    </ng-template>\r\n</ng-template>\r\n\r\n<ng-template #separatorTitleModalTemplate let-data>\r\n    <pep-dialog [title]=\"'DATA_VIEW_BUILDER.SEPARATOR_TITLE' | translate\">\r\n        <ng-container pep-dialog-content>\r\n            <pep-textbox #txt [label]=\"'DATA_VIEW_BUILDER.ADD_A_TITLE' | translate\" [(value)]=\"data.value\">\r\n            </pep-textbox>\r\n        </ng-container>\r\n        <ng-container pep-dialog-actions>\r\n            <div class=\"pep-spacing-element-negative\">\r\n                <button mat-button class=\"pep-spacing-element pep-button md weak\"\r\n                    (click)=\"closeDialog()\">\r\n                    {{'Cancel' | translate}}\r\n                </button>\r\n                <button mat-button class=\"pep-spacing-element pep-button md strong\"\r\n                    (click)=\"setDialogValue(txt.value)\">\r\n                    {{ 'Save' | translate}}\r\n                </button>\r\n            </div>\r\n        </ng-container>\r\n    </pep-dialog>\r\n</ng-template>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-dc14b12320300a3560aae9da5f0ea2923d91413cab32b5b2ecbb1832e735b7621b9f08e659d24dfe63817a4bf48114b0c2f97fd6bda0a718a6cfe00b9199f492",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { User } from './User';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"onLogout.emit($event)\"\r\n      (onLogin)=\"onLogin.emit($event)\"\r\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\r\n    ></storybook-header>\r\n    <section>\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport default class PageComponent {\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n\r\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\r\n//   <article>\r\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\r\n\r\n// );\r\n// Page.propTypes = {\r\n//   user: PropTypes.shape({}),\r\n//   onLogin: PropTypes.func.isRequired,\r\n//   onLogout: PropTypes.func.isRequired,\r\n//   onCreateAccount: PropTypes.func.isRequired,\r\n// };\r\n\r\n// Page.defaultProps = {\r\n//   user: null,\r\n// };\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\nsection h2 {\r\n  font-weight: 900;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nsection p {\r\n  margin: 1em 0;\r\n}\r\n\r\nsection a {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\nsection ul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\nsection li {\r\n  margin-bottom: 8px;\r\n}\r\n\r\nsection .tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\nsection .tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\nsection .tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\nsection .tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "RichTextComponent",
            "id": "component-RichTextComponent-05a9894bb4a1e58dc39cebab533943f2db4e5ed43b9e3629eca239cba3352d04534f67f1be79b28974fab59c98527b3927b93fa97fb483051c9bd3d627a266c0",
            "file": "projects/ngx-composite-lib/rich-text/rich-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-rich-text",
            "styleUrls": [
                "./rich-text.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./rich-text.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "inlineMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "PepLayoutType",
                    "decorators": []
                },
                {
                    "name": "mandatory",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "maxFieldCharacters",
                    "defaultValue": "300",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "renderEnlargeButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "renderTitle",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rowSpan",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "sanitize",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showTitle",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "toolbarOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "IPepRichHtmlTextareaToolbarOptions",
                    "decorators": []
                },
                {
                    "name": "useAssetsForImages",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "visible",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "PepHorizontalAlignment",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_toolbarOptions",
                    "defaultValue": "this.getDefaultToolbarOptions()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepRichHtmlTextareaToolbarOptions",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "quillEditor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getDefaultToolbarOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepRichHtmlTextareaToolbarOptions",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "insertAssets",
                    "args": [
                        {
                            "name": "assetUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "assetUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEditorOpen",
                    "args": [
                        {
                            "name": "editor",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "editor",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openAssetsPickerDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "valueChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewContainerRef } from '@angular/core';\r\nimport { PepAddonBlockLoaderService } from '@pepperi-addons/ngx-lib/remote-loader';\r\nimport { RichTextService } from './rich-text.service';\r\nimport { DEFAULT_HORIZONTAL_ALIGNMENT, PepHorizontalAlignment, PepLayoutType } from '@pepperi-addons/ngx-lib';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { IPepRichHtmlTextareaToolbarOptions } from '@pepperi-addons/ngx-lib/rich-html-textarea';\r\nimport Quill from 'quill';\r\n\r\n@Component({\r\n    selector: 'pep-rich-text',\r\n    templateUrl: './rich-text.component.html',\r\n    styleUrls: ['./rich-text.component.scss']\r\n})\r\nexport class RichTextComponent implements OnInit {\r\n\r\n    @Input() key = '';\r\n    @Input() value = '';\r\n    @Input() label = '';\r\n    @Input() mandatory = false;\r\n    @Input() disabled = false;\r\n    @Input() readonly = false;\r\n    @Input() maxFieldCharacters = 300;\r\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\r\n    @Input() sanitize = true;\r\n    @Input() rowSpan = 1;\r\n    @Input() visible = true;\r\n    @Input() isActive = false;\r\n    @Input() showTitle = true;\r\n    @Input() renderTitle = true;\r\n    @Input() renderEnlargeButton = true;\r\n    @Input() layoutType: PepLayoutType = 'form';\r\n    @Input() inlineMode = false;\r\n    @Input() useAssetsForImages = true;\r\n    \r\n    private quillEditor: any;\r\n    protected _toolbarOptions: IPepRichHtmlTextareaToolbarOptions = this.getDefaultToolbarOptions();\r\n    @Input()\r\n    get toolbarOptions(): IPepRichHtmlTextareaToolbarOptions {\r\n        return this._toolbarOptions;\r\n    }\r\n    set toolbarOptions(options: IPepRichHtmlTextareaToolbarOptions) {\r\n        if (options) {\r\n            this._toolbarOptions = options;\r\n        }\r\n    }\r\n\r\n    @Output()\r\n        valueChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    constructor(\r\n        private viewContainerRef: ViewContainerRef,\r\n        private addonBlockLoaderService: PepAddonBlockLoaderService, \r\n        private RichTextService: RichTextService) { \r\n            this.toolbarOptions = this.getDefaultToolbarOptions();\r\n        }\r\n\r\n    ngOnInit() {\r\n        // Do nothing.\r\n        \r\n    }\r\n\r\n\r\n    getDefaultToolbarOptions(): IPepRichHtmlTextareaToolbarOptions {\r\n        return {\r\n            font: false,\r\n            size: false,\r\n            header: true,\r\n            bold: true,\r\n            italic: true,\r\n            underline: true,\r\n            strike: false,\r\n            link: true,\r\n            image: { useAssetsABI : true },\r\n            ordered: true,\r\n            bullet: true,\r\n            color: true,\r\n            background: false,\r\n            align: true\r\n        };\r\n    }\r\n\r\n    onEditorOpen(editor: any){\r\n        this.quillEditor = editor;\r\n\r\n        if(this.useAssetsForImages){\r\n            const imageButton = document.querySelector('.ql-image');\r\n            const newButton = document.querySelector('.quill-editor-image-btn')?.cloneNode(true);\r\n            \r\n            if(imageButton && newButton){\r\n                newButton.addEventListener(\"click\", () => { this.openAssetsPickerDialog();});\r\n                //newButton.addEventListener(\"click\", () => { this.insertAssets('https://pfs.pepperi.com/50d42a3f-f21d-40fa-8c24-a1359b04dbb7/ad909780-0c23-401e-8e8e-f514cc4f6aa2/Assets/logo.jpg');});\r\n                imageButton.parentNode?.appendChild(newButton);\r\n                imageButton.setAttribute('style','display:none');    \r\n            }\r\n        }\r\n    }\r\n    \r\n    openAssetsPickerDialog() {\r\n        const dialogRef = this.addonBlockLoaderService.loadAddonBlockInDialog({\r\n            container: this.viewContainerRef,\r\n            name: 'AssetPicker',\r\n            hostObject: {\r\n                selectionType: 'single',\r\n                allowedAssetsTypes: 'images',\r\n                inDialog: true\r\n            },\r\n            size: 'full-screen',\r\n            hostEventsCallback: async (event) => {\r\n                if (event?.action === 'on-save') {\r\n                    if(event.url){\r\n                        this.insertAssets(event.url);\r\n                    }\r\n                    dialogRef?.close();\r\n                } else if (event.action === 'on-cancel') {\r\n                    dialogRef?.close();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    insertAssets(assetUrl: string){\r\n        const range = this.quillEditor.getSelection() || { index: 0, length: 0};\r\n        this.quillEditor.insertEmbed(range.index, 'image', assetUrl);\r\n    }\r\n\r\n    valueChanged(event: any){\r\n        this.valueChange.emit(event);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep .quill-editor-image-btn{\r\n    display: none;\r\n    width: 2.5rem !important;\r\n}",
                    "styleUrl": "./rich-text.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "addonBlockLoaderService",
                        "type": "PepAddonBlockLoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "RichTextService",
                        "type": "RichTextService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "addonBlockLoaderService",
                        "type": "PepAddonBlockLoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "RichTextService",
                        "type": "RichTextService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "toolbarOptions": {
                    "name": "toolbarOptions",
                    "setSignature": {
                        "name": "toolbarOptions",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "options",
                                "type": "IPepRichHtmlTextareaToolbarOptions",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "jsdoctags": [
                            {
                                "name": "options",
                                "type": "IPepRichHtmlTextareaToolbarOptions",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "toolbarOptions",
                        "type": "",
                        "returnType": "IPepRichHtmlTextareaToolbarOptions",
                        "line": 38
                    }
                }
            },
            "templateData": "<pep-rich-html-textarea [key]=\"key\" \r\n                        [value]=\"value\"\r\n                        [label]=\"label\" \r\n                        [mandatory]=\"mandatory\"\r\n                        [disabled]=\"disabled\"\r\n                        [readonly]=\"readonly\"\r\n                        [maxFieldCharacters]=\"maxFieldCharacters\" \r\n                        [xAlignment]=\"xAlignment\" \r\n                        [toolbarOptions]=\"toolbarOptions\"\r\n                        [rowSpan]=\"rowSpan\" \r\n                        [visible]=\"visible\"\r\n                        \r\n                        [isActive]=\"isActive\"\r\n                        [showTitle]=\"showTitle\"\r\n                        [renderTitle]=\"renderTitle\"\r\n                        [renderEnlargeButton]=\"renderEnlargeButton\"\r\n                        [layoutType]=\"layoutType\"\r\n                        [inlineMode]=\"inlineMode\"\r\n                        (editorCreated)=\"onEditorOpen($event)\"\r\n                        (valueChange)=\"valueChanged($event)\">\r\n</pep-rich-html-textarea>\r\n<pep-button [sizeType]=\"'sm'\" [classNames]=\"'pep-spacing-element quill-editor-image-btn'\" \r\n                [iconName]=\"'system_image'\" (buttonClick)=\"openAssetsPickerDialog()\">\r\n</pep-button>"
        },
        {
            "name": "ShadowSettingsComponent",
            "id": "component-ShadowSettingsComponent-670c79f19431e3d6a71f2a01245f2fc6c932e145b3e26c0c834355aa9c5dc4e750f9f2d274bd7a2833913e464fca9f89e24aa67a362eea35db117ede31c75698",
            "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-shadow-settings",
            "styleUrls": [
                "./shadow-settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shadow-settings.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "shadow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "PepShadowSettings",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "shadowChange",
                    "defaultValue": "new EventEmitter<PepShadowSettings>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<PepShadowSettings>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_shadow",
                    "defaultValue": "new PepShadowSettings()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepShadowSettings",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "shadowIntensities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<PepButton>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "shadowSizes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<PepButton>",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onIntensityChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "PepShadowIntensityType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "PepShadowIntensityType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSizeChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "PepSizeType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "PepSizeType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUseChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "raiseShadowChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { PepSizeType } from '@pepperi-addons/ngx-lib';\r\nimport { IPepButtonClickEvent, PepButton } from '@pepperi-addons/ngx-lib/button';\r\nimport { PepShadowIntensityType, PepShadowSettings } from './shadow-settings.model';\r\n\r\n@Component({\r\n    selector: 'pep-shadow-settings',\r\n    templateUrl: './shadow-settings.component.html',\r\n    styleUrls: ['./shadow-settings.component.scss']\r\n})\r\nexport class ShadowSettingsComponent implements OnInit {\r\n\r\n    private _shadow: PepShadowSettings = new PepShadowSettings();\r\n    @Input()\r\n    set shadow(value: PepShadowSettings) {\r\n        if (!value) {\r\n            this._shadow = new PepShadowSettings();\r\n        } else {\r\n            this._shadow = value;\r\n        }\r\n    }\r\n    get shadow(): PepShadowSettings {\r\n        return this._shadow;\r\n    }\r\n\r\n    @Output()\r\n    shadowChange: EventEmitter<PepShadowSettings> = new EventEmitter<PepShadowSettings>();\r\n    \r\n    shadowSizes: Array<PepButton> = [];\r\n    shadowIntensities: Array<PepButton> = [];\r\n\r\n    constructor(\r\n        private translate: TranslateService,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void { \r\n        // Get the first translation for load all translations.\r\n        this.translate.get('SHADOW_SETTINGS.INTENSITY_SOFT').toPromise().then((typeSoft) => {\r\n            this.shadowSizes = [\r\n                { key: 'sm', value: this.translate.instant('GENERAL.SM'), callback: () => this.onSizeChange('sm') },\r\n                { key: 'md', value: this.translate.instant('GENERAL.MD'), callback: () => this.onSizeChange('md') },\r\n                { key: 'lg', value: this.translate.instant('GENERAL.LG'), callback: () => this.onSizeChange('lg') },\r\n                { key: 'xl', value: this.translate.instant('GENERAL.XL'), callback: () => this.onSizeChange('xl') }\r\n            ];\r\n\r\n            this.shadowIntensities = [\r\n                { key: 'soft', value: typeSoft, callback: () => this.onIntensityChange('soft') },\r\n                { key: 'regular', value: this.translate.instant('SHADOW_SETTINGS.INTENSITY_REGULAR'), callback: () => this.onIntensityChange('regular') },\r\n                { key: 'hard', value: this.translate.instant('SHADOW_SETTINGS.INTENSITY_HARD'), callback: () => this.onIntensityChange('hard') }\r\n            ];\r\n        });\r\n    }\r\n\r\n\r\n    private raiseShadowChange() {\r\n        this.shadowChange.emit(this.shadow);\r\n    }\r\n\r\n    onUseChanged(value: boolean) {\r\n        this.shadow.use = value;\r\n        this.raiseShadowChange();\r\n    }\r\n\r\n    onSizeChange(value: PepSizeType) {\r\n        this.shadow.size = value;\r\n        this.raiseShadowChange();\r\n    }\r\n\r\n    onIntensityChange(value: PepShadowIntensityType) {\r\n        this.shadow.intensity = value;\r\n        this.raiseShadowChange();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/variables' as ngx-variables;\r\n\r\n:host {\r\n    width: 100%;\r\n    // max-width: 200px;\r\n\r\n    .shadow-size-group,\r\n    .shadow-type-group {\r\n        display: block;\r\n        margin-bottom: ngx-variables.$form-spacing;\r\n    }\r\n}",
                    "styleUrl": "./shadow-settings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "shadow": {
                    "name": "shadow",
                    "setSignature": {
                        "name": "shadow",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "PepShadowSettings",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "PepShadowSettings",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "shadow",
                        "type": "",
                        "returnType": "PepShadowSettings",
                        "line": 23
                    }
                }
            },
            "templateData": "<pep-checkbox class=\"checkbox-as-title\" [label]=\"'SHADOW_SETTINGS.TITLE' | translate\" [renderTitle]=\"false\" [value]=\"shadow.use\" (valueChange)=\"onUseChanged($event)\"></pep-checkbox>\r\n<pep-field-title [label]=\"'SHADOW_SETTINGS.SIZE' | translate\" [disabled]=\"!shadow.use\"></pep-field-title>\r\n<pep-group-buttons class=\"shadow-size-group\" [buttons]=\"shadowSizes\" [selectedButtonKey]=\"shadow.size\" [stretch]=\"true\" buttonsClass=\"md regular\" [buttonsDisabled]=\"!shadow.use\" viewType=\"toggle\">\r\n</pep-group-buttons>\r\n<pep-field-title [label]=\"'SHADOW_SETTINGS.INTENSITY' | translate\" [disabled]=\"!shadow.use\"></pep-field-title>\r\n<pep-group-buttons class=\"shadow-intensity-group\" [buttons]=\"shadowIntensities\" [selectedButtonKey]=\"shadow.intensity\" [stretch]=\"true\" buttonsClass=\"md regular\" [buttonsDisabled]=\"!shadow.use\" viewType=\"toggle\">\r\n</pep-group-buttons>"
        },
        {
            "name": "ShowIfBadgeComponent",
            "id": "component-ShowIfBadgeComponent-5a58e484c4bff42d51740d5be3f0880802b74cb1a6e9e4a2b31209aff1b671f0b9127f993469a6947d53ff03df235037ed57ff8920ef65a5b1d61616c3a97f72",
            "file": "projects/ngx-composite-lib/show-if-badge/show-if-badge.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-show-if-badge",
            "styleUrls": [
                "./show-if-badge.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./show-if-badge.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'hsl(0,0%,0%)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconName",
                    "defaultValue": "pepIconSystemView.name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 646,
                            "end": 698,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 351,
                            "tagName": {
                                "pos": 647,
                                "end": 651,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "comment": "<p>See {@link PepIconType}</p>\n",
                            "typeExpression": {
                                "pos": 652,
                                "end": 665,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 653,
                                    "end": 664,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 183,
                                    "typeName": {
                                        "pos": 653,
                                        "end": 664,
                                        "flags": 16777216,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 80,
                                        "escapedText": "PepIconType"
                                    }
                                }
                            }
                        },
                        {
                            "pos": 698,
                            "end": 733,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 699,
                                "end": 707,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "memberof"
                            },
                            "comment": "<p>PepButtonComponent</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIf you want to show an icon in the button then select an icon form the provided icon list\n\n",
                    "description": "<p>If you want to show an icon in the button then select an icon form the provided icon list</p>\n",
                    "line": 23,
                    "type": "PepIconType",
                    "decorators": []
                },
                {
                    "name": "showIf",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isRtl",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { PepLayoutService } from '@pepperi-addons/ngx-lib';\r\nimport { PepIconType, pepIconSystemView } from '@pepperi-addons/ngx-lib/icon';\r\nimport { PepColorSettings } from '@pepperi-addons/ngx-composite-lib/color-settings';\r\n\r\n\r\n@Component({\r\n    selector: 'pep-show-if-badge',\r\n    templateUrl: './show-if-badge.component.html',\r\n    styleUrls: ['./show-if-badge.component.scss']\r\n})\r\n\r\nexport class ShowIfBadgeComponent {\r\n    @Input() showIf = false;\r\n   \r\n     /**\r\n     * If you want to show an icon in the button then select an icon form the provided icon list\r\n     *\r\n     * @type {PepIconType} See {@link PepIconType}\r\n     * @memberof PepButtonComponent\r\n     */\r\n   @Input() iconName: PepIconType = pepIconSystemView.name;\r\n   @Input() backgroundColor = 'hsl(0,0%,0%)';\r\n   \r\n    \r\n    protected isRtl = false;\r\n    \r\n    constructor(protected layoutService: PepLayoutService) { \r\n        this.isRtl = this.layoutService.isRtl();\r\n    }\r\n\r\n    ngOnInit(){\r\n        setTimeout(() => {\r\n            const badge = document.getElementsByClassName(\"mat-badge-content\")[0] as HTMLElement;\r\n                if(badge){\r\n                    badge.setAttribute('style', 'background-color:'+ this.backgroundColor + '!important');\r\n                }\r\n          }, 0);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/mixins';\r\n@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/functions';\r\n\r\n.show-if-badge {\r\n    @include mixins.pep-badge();\r\n    position: relative;\r\n    right: 0;\r\n    \r\n    &.rtl-direction {\r\n        right: unset;\r\n        left: 0;\r\n    }\r\n\r\n    .mat-icon {\r\n        right: 0;\r\n        height: 2.5rem;\r\n        width: 2.5rem;\r\n        margin-top: -1rem;\r\n        margin-right: -1.25rem;\r\n\r\n        ::ng-deep.svg-icon {\r\n            fill: functions.get-pep-color(color-system-primary-invert, color-base);\r\n            width: 1.75rem;\r\n            height: 1.75rem;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./show-if-badge.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div *ngIf=\"showIf\" class=\"show-if-badge\" [ngClass]=\"{ 'rtl-direction': isRtl }\">\r\n    <mat-icon class=\"mat-badge-content\">\r\n        <pep-icon [name]=\"iconName\"></pep-icon>\r\n    </mat-icon>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-cc8bab75fa3f8366eb65456982f6038d630513154636a9e8563499701e5ba26af6a7a3616f8c99e02b6f2e5fe1654edd62887dd3e36a6ee8bb51f6ee55e1f17f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib-tester/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { PepAddonService } from '@pepperi-addons/ngx-lib';\r\nimport { PepTextboxModule } from '@pepperi-addons/ngx-lib/textbox';\r\nimport { NgxLibHelperModule } from './common/ngx-helper.module';\r\nimport { PepNgxCompositeLibModule } from '@pepperi-addons/ngx-composite-lib';\r\nimport { PepColorSettingsModule } from '@pepperi-addons/ngx-composite-lib/color-settings';\r\nimport { PepShadowSettingsModule } from '@pepperi-addons/ngx-composite-lib/shadow-settings';\r\nimport { PepGroupButtonsSettingsModule } from '@pepperi-addons/ngx-composite-lib/group-buttons-settings';\r\nimport { PepFileStatusPanelModule } from '@pepperi-addons/ngx-composite-lib/file-status-panel';\r\nimport { PepGenericListModule } from '@pepperi-addons/ngx-composite-lib/generic-list';\r\nimport { PepDataViewBuilderModule } from '@pepperi-addons/ngx-composite-lib/data-view-builder';\r\nimport { PepIconPickerModule } from 'projects/ngx-composite-lib/icon-picker';\r\nimport { PepRichTextModule } from 'projects/ngx-composite-lib/rich-text';\r\nimport { PepShowIfBadgeModule } from 'projects/ngx-composite-lib/show-if-badge';\r\nimport { PepGenericFormModule } from '@pepperi-addons/ngx-composite-lib/generic-form';\r\nimport { ComponentsExampleComponent } from './components-example/components-example.component';\r\nimport { GenericListExampleComponent } from './generic-list-example/generic-list-example.component';\r\nimport { GenericFormExampleComponent } from './generic-form-example/generic-form-example.component';\r\nimport { DataViewBuilderExampleComponent } from './data-view-builder-example/data-view-builder-example.component';\r\n\r\nimport {\r\n    TranslateModule,\r\n    TranslateLoader,\r\n    TranslateService,\r\n} from '@ngx-translate/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        ComponentsExampleComponent,\r\n        GenericListExampleComponent,\r\n        GenericFormExampleComponent,\r\n        DataViewBuilderExampleComponent,\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        BrowserModule,\r\n        BrowserAnimationsModule,\r\n        ReactiveFormsModule,\r\n        AppRoutingModule,\r\n        NgxLibHelperModule,\r\n        PepNgxCompositeLibModule,\r\n        PepColorSettingsModule,\r\n        PepTextboxModule,\r\n        PepShadowSettingsModule,\r\n        PepGroupButtonsSettingsModule,\r\n        PepFileStatusPanelModule,\r\n        PepGenericListModule,\r\n        PepGenericFormModule,\r\n        PepIconPickerModule,\r\n        PepRichTextModule,\r\n        PepShowIfBadgeModule,\r\n        PepDataViewBuilderModule,\r\n        TranslateModule.forRoot({\r\n            loader: {\r\n                provide: TranslateLoader,\r\n                useFactory: (addonService: PepAddonService) => \r\n                    PepAddonService.createMultiTranslateLoader('', addonService, ['ngx-lib', 'ngx-composite-lib']),\r\n                deps: [PepAddonService]\r\n            }\r\n        }),\r\n    ],\r\n    providers: [],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { \r\n    constructor(\r\n        translate: TranslateService,\r\n        private pepAddonService: PepAddonService\r\n    ) {\r\n        this.pepAddonService.setDefaultTranslateLang(translate);\r\n    }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ComponentsExampleComponent"
                        },
                        {
                            "name": "DataViewBuilderExampleComponent"
                        },
                        {
                            "name": "GenericFormExampleComponent"
                        },
                        {
                            "name": "GenericListExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "NgxLibHelperModule"
                        },
                        {
                            "name": "PepColorSettingsModule"
                        },
                        {
                            "name": "PepDataViewBuilderModule"
                        },
                        {
                            "name": "PepFileStatusPanelModule"
                        },
                        {
                            "name": "PepGenericFormModule"
                        },
                        {
                            "name": "PepGenericListModule"
                        },
                        {
                            "name": "PepGroupButtonsSettingsModule"
                        },
                        {
                            "name": "PepIconPickerModule"
                        },
                        {
                            "name": "PepNgxCompositeLibModule"
                        },
                        {
                            "name": "PepRichTextModule"
                        },
                        {
                            "name": "PepShadowSettingsModule"
                        },
                        {
                            "name": "PepShowIfBadgeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-3f82b2ecea18846c160e2cbd8db1734799b355cedbaf0d91ed2ac05b256aa054d53293f6c9c519777d8040c090b11fb2bf206b2948c383beb17e3b90af29dec0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib-tester/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ComponentsExampleComponent } from './components-example/components-example.component';\r\nimport { GenericListExampleComponent } from './generic-list-example/generic-list-example.component';\r\nimport { GenericFormExampleComponent } from './generic-form-example/generic-form-example.component';\r\nimport { DataViewBuilderExampleComponent } from './data-view-builder-example/data-view-builder-example.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: `generic-list-example`,\r\n        component: GenericListExampleComponent,\r\n    },\r\n    {\r\n        path: `generic-form-example`,\r\n        component: GenericFormExampleComponent,\r\n    },\r\n    {\r\n        path: `data-view-builder-example`,\r\n        component: DataViewBuilderExampleComponent,\r\n    },\r\n    {\r\n        path: '**',\r\n        component: ComponentsExampleComponent,\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgxLibHelperModule",
            "id": "module-NgxLibHelperModule-35b8312c341930dae0ae837b113298c06ed61e415e2f1200cb5d84d87863874810b4cb0029f0b979516432be34fb96a23fad67d4eb03cee100601438399eaba0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport {\r\n    PepNgxLibModule,\r\n    PepAddonService,\r\n    PepCustomizationService,\r\n    PepFileService,\r\n} from '@pepperi-addons/ngx-lib';\r\nimport { PepAttachmentModule } from '@pepperi-addons/ngx-lib/attachment';\r\nimport { PepBreadCrumbsModule } from '@pepperi-addons/ngx-lib/bread-crumbs';\r\nimport { PepButtonModule } from '@pepperi-addons/ngx-lib/button';\r\nimport { PepCarouselModule } from '@pepperi-addons/ngx-lib/carousel';\r\nimport { PepCheckboxModule } from '@pepperi-addons/ngx-lib/checkbox';\r\nimport { PepColorModule } from '@pepperi-addons/ngx-lib/color';\r\nimport { PepDateModule } from '@pepperi-addons/ngx-lib/date';\r\nimport { PepGroupButtonsModule } from '@pepperi-addons/ngx-lib/group-buttons';\r\nimport { PepImageModule } from '@pepperi-addons/ngx-lib/image';\r\nimport { PepImagesFilmstripModule } from '@pepperi-addons/ngx-lib/images-filmstrip';\r\nimport { PepQuantitySelectorModule } from '@pepperi-addons/ngx-lib/quantity-selector';\r\nimport { PepRichHtmlTextareaModule } from '@pepperi-addons/ngx-lib/rich-html-textarea';\r\nimport { PepSearchModule } from '@pepperi-addons/ngx-lib/search';\r\nimport { PepSelectModule } from '@pepperi-addons/ngx-lib/select';\r\nimport { PepSliderModule } from '@pepperi-addons/ngx-lib/slider';\r\nimport { PepSeparatorModule } from '@pepperi-addons/ngx-lib/separator';\r\nimport { PepSideBarModule } from '@pepperi-addons/ngx-lib/side-bar';\r\nimport { PepSignatureModule } from '@pepperi-addons/ngx-lib/signature';\r\nimport { PepSizeDetectorModule } from '@pepperi-addons/ngx-lib/size-detector';\r\nimport { PepTextareaModule } from '@pepperi-addons/ngx-lib/textarea';\r\nimport { PepTextboxModule } from '@pepperi-addons/ngx-lib/textbox';\r\nimport { PepListModule } from '@pepperi-addons/ngx-lib/list';\r\nimport { PepMenuModule } from '@pepperi-addons/ngx-lib/menu';\r\nimport { PepTopBarModule } from '@pepperi-addons/ngx-lib/top-bar';\r\nimport { PepPageLayoutModule } from '@pepperi-addons/ngx-lib/page-layout';\r\n\r\nimport { PepFormModule } from '@pepperi-addons/ngx-lib/form';\r\n\r\nimport { PepSmartFiltersModule } from '@pepperi-addons/ngx-lib/smart-filters';\r\n\r\nimport {\r\n    PepIconModule,\r\n    PepIconRegistry,\r\n    pepIconSystemBolt,\r\n    pepIconNoImage,\r\n    pepIconNoImage2,\r\n    pepIconArrowTwoWaysVerT,\r\n    pepIconArrowDown,\r\n    pepIconArrowUp,\r\n    pepIconArrowRightAlt,\r\n    pepIconArrowLeftAlt,\r\n    pepIconArrowDownAlt,\r\n    pepIconArrowUpAlt,\r\n    pepIconNumberNumber,\r\n    pepIconNumberPlus,\r\n    pepIconSystemBin,\r\n    pepIconSystemEdit,\r\n    pepIconSystemClose,\r\n    pepIconSystemFilter,\r\n    pepIconSystemMenu,\r\n    pepIconSystemHome,\r\n    pepIconSystemSettings,\r\n    pepIconSystemQuestion,\r\n    pepIconSystemAvatar,\r\n    pepIconSystemDoor,\r\n    pepIconSystemPrint,\r\n    pepIconSystemSearch,\r\n    pepIconSystemSpinner,\r\n    pepIconSystemInfo,\r\n    pepIconShoppingCart,\r\n    pepIconTimeCal,\r\n    pepIconViewCardLg,\r\n    pepIconViewCardMd,\r\n    pepIconViewCardSm,\r\n    pepIconViewTable,\r\n    pepIconViewMatrix,\r\n    pepIconViewLine,\r\n} from '@pepperi-addons/ngx-lib/icon';\r\nconst pepIcons = [\r\n    pepIconSystemBolt,\r\n    pepIconNoImage,\r\n    pepIconNoImage2,\r\n    pepIconArrowTwoWaysVerT,\r\n    pepIconArrowDown,\r\n    pepIconArrowUp,\r\n    pepIconArrowRightAlt,\r\n    pepIconArrowLeftAlt,\r\n    pepIconArrowDownAlt,\r\n    pepIconArrowUpAlt,\r\n    pepIconNumberNumber,\r\n    pepIconNumberPlus,\r\n    pepIconSystemBin,\r\n    pepIconSystemEdit,\r\n    pepIconSystemClose,\r\n    pepIconSystemFilter,\r\n    pepIconSystemMenu,\r\n    pepIconSystemHome,\r\n    pepIconSystemSettings,\r\n    pepIconSystemQuestion,\r\n    pepIconSystemAvatar,\r\n    pepIconSystemDoor,\r\n    pepIconSystemPrint,\r\n    pepIconSystemSearch,\r\n    pepIconSystemSpinner,\r\n    pepIconSystemInfo,\r\n    pepIconShoppingCart,\r\n    pepIconTimeCal,\r\n    pepIconViewCardLg,\r\n    pepIconViewCardMd,\r\n    pepIconViewCardSm,\r\n    pepIconViewTable,\r\n    pepIconViewMatrix,\r\n    pepIconViewLine,\r\n];\r\n\r\nconst pepperiComponentsModules = [\r\n    PepAttachmentModule,\r\n    PepCarouselModule,\r\n    PepBreadCrumbsModule,\r\n    PepButtonModule,\r\n    PepCheckboxModule,\r\n    PepColorModule,\r\n    PepDateModule,\r\n    PepGroupButtonsModule,\r\n    PepImageModule,\r\n    PepImagesFilmstripModule,\r\n    PepListModule,\r\n    PepCheckboxModule,\r\n    PepQuantitySelectorModule,\r\n    PepRichHtmlTextareaModule,\r\n    PepSearchModule,\r\n    PepSelectModule,\r\n    PepSeparatorModule,\r\n    PepSliderModule,\r\n    PepSideBarModule,\r\n    PepSignatureModule,\r\n    PepSizeDetectorModule,\r\n    PepTextareaModule,\r\n    PepTextboxModule,\r\n    PepIconModule,\r\n    PepMenuModule,\r\n    PepTopBarModule,\r\n    PepPageLayoutModule,\r\n    PepSmartFiltersModule,\r\n    PepFormModule\r\n];\r\n\r\n@NgModule({\r\n    declarations: [],\r\n    imports: [\r\n        CommonModule,\r\n        PepNgxLibModule,\r\n        pepperiComponentsModules,\r\n    ],\r\n    exports: [PepNgxLibModule, pepperiComponentsModules],\r\n})\r\nexport class NgxLibHelperModule {\r\n    constructor(\r\n        private pepperiIconRegistry: PepIconRegistry,\r\n    ) {\r\n        this.pepperiIconRegistry.registerIcons(pepIcons);\r\n    }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepColorSettingsModule",
            "id": "module-PepColorSettingsModule-5c9ed6ccb4730960e57ee8af21d0f3aa09b02439d900bba74ff1392c80e7e52dd47f439344710412a0ef649449250cc366d2e99c51a21e04213bd4ff93b5e5af",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/color-settings/color-settings.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\r\nimport { PepColorModule } from '@pepperi-addons/ngx-lib/color';\r\nimport { PepCheckboxModule } from '@pepperi-addons/ngx-lib/checkbox';\r\nimport { PepSliderModule } from '@pepperi-addons/ngx-lib/slider';\r\n\r\nimport { ColorSettingsComponent } from './color-settings.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ColorSettingsComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        PepNgxLibModule,\r\n        PepCheckboxModule,\r\n        PepColorModule,\r\n        PepSliderModule\r\n    ],\r\n    exports: [ColorSettingsComponent],\r\n})\r\nexport class PepColorSettingsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ColorSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ColorSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepDataViewBuilderModule",
            "id": "module-PepDataViewBuilderModule-875c1e5214143f93208215ea486380d12ea864cecdfd03a9e046285df79d44195feff48eb5d5a01571c3e4f6e90d93202db78ca16bc70f17585a680ff0ca5a84",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/data-view-builder/data-view-builder.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\n\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\r\nimport { PepButtonModule } from '@pepperi-addons/ngx-lib/button';\r\nimport { PepDialogModule } from '@pepperi-addons/ngx-lib/dialog';\r\nimport { PepMenuModule } from '@pepperi-addons/ngx-lib/menu';\r\nimport { PepPageLayoutModule } from '@pepperi-addons/ngx-lib/page-layout';\r\nimport { PepTextboxModule } from '@pepperi-addons/ngx-lib/textbox';\r\nimport { PepTopBarModule } from '@pepperi-addons/ngx-lib/top-bar';\r\nimport { PepDraggableItemsModule } from '@pepperi-addons/ngx-lib/draggable-items';\r\nimport { PepIconRegistry, PepIconModule, pepIconSystemClose, pepIconArrowDownAlt, pepIconSystemBin, pepIconNumberPlus } from '@pepperi-addons/ngx-lib/icon';\r\n\r\nimport { DataViewBuilderService } from './data-view-builder.service';\r\n\r\nimport { DataViewBuilderComponent } from './data-view-builder.component';\r\nimport { MenuDataViewComponent } from './menu-data-view/menu-data-view.component';\r\n\r\nconst pepIcons = [\r\n    pepIconSystemClose,\r\n    pepIconArrowDownAlt,\r\n    pepIconSystemBin,\r\n    pepIconNumberPlus\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        DataViewBuilderComponent, MenuDataViewComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        DragDropModule,\r\n        MatIconModule,\r\n        PepNgxLibModule,\r\n        PepButtonModule,\r\n        PepDialogModule,\r\n        PepIconModule,\r\n        PepMenuModule,\r\n        PepPageLayoutModule,\r\n        PepTextboxModule,\r\n        PepTopBarModule,\r\n        PepDraggableItemsModule,\r\n    ],\r\n    exports: [DataViewBuilderComponent],\r\n    providers: [DataViewBuilderService]\r\n})\r\nexport class PepDataViewBuilderModule {\r\n    constructor(\r\n        private pepIconRegistry: PepIconRegistry,\r\n    ) {\r\n        this.pepIconRegistry.registerIcons(pepIcons);\r\n    }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DataViewBuilderService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DataViewBuilderComponent"
                        },
                        {
                            "name": "MenuDataViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DataViewBuilderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepFileStatusPanelModule",
            "id": "module-PepFileStatusPanelModule-66d4fc5c3a0b42fa989958b7f602e35bf728819c3bc96219d1465cf2881bd2c1ae4fa74f099da5ac14349f770e4d57f8ce12563ea66ef725cde390dddae45f37",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FileStatusPanelComponent } from './file-status-panel.component';\r\nimport { PepTextboxModule } from '@pepperi-addons/ngx-lib/textbox';\r\nimport { PepTopBarModule } from '@pepperi-addons/ngx-lib/top-bar';\r\nimport { PepDialogModule } from '@pepperi-addons/ngx-lib/dialog';\r\nimport { PepButtonModule } from '@pepperi-addons/ngx-lib/button';\r\nimport { PepIconModule, PepIconRegistry, pepIconArrowRightAlt } from '@pepperi-addons/ngx-lib/icon';\r\nimport { PepSnackBarModule } from '@pepperi-addons/ngx-lib/snack-bar';\r\nimport { MAT_SNACK_BAR_DATA, MatSnackBarRef } from '@angular/material/snack-bar';\r\n\r\nconst pepIcons = [\r\n    pepIconArrowRightAlt,\r\n]\r\n\r\n@NgModule({\r\n    declarations: [\r\n        FileStatusPanelComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        PepTopBarModule,\r\n        PepTextboxModule,\r\n        PepButtonModule,\r\n        PepIconModule,\r\n        PepDialogModule,\r\n        PepSnackBarModule\r\n    ],\r\n    exports: [FileStatusPanelComponent],\r\n    providers:[\r\n        {\r\n        provide: MatSnackBarRef,\r\n        useValue: {}\r\n        }, \r\n        {\r\n            provide: MAT_SNACK_BAR_DATA,\r\n            useValue: {} // Add any data you wish to test if it is passed/used correctly\r\n        }\r\n    ]\r\n})\r\n\r\nexport class PepFileStatusPanelModule { \r\n    constructor(\r\n        private pepIconRegistry: PepIconRegistry,\r\n    ) {\r\n        this.pepIconRegistry.registerIcons(pepIcons);\r\n    }\r\n}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FileStatusPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FileStatusPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepFlowPickerButtonModule",
            "id": "module-PepFlowPickerButtonModule-53830fe6a31175b7bb57dd923dc56fb583929af426819f4f77b012e8790d434a41b1c6dddb9d4530b99f89e17f4e93a94e521da3dd32437c73cad1f04d04fd57",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/flow-picker-button/flow-picker-button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\r\nimport { PepButtonModule } from '@pepperi-addons/ngx-lib/button';\r\nimport { PepRemoteLoaderModule } from '@pepperi-addons/ngx-lib/remote-loader';\r\n\r\nimport { FlowPickerButtonComponent } from './flow-picker-button.component';\r\nimport { FlowPickerService } from './flow-picker-button.service';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        FlowPickerButtonComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        PepNgxLibModule,\r\n        PepButtonModule,\r\n        PepRemoteLoaderModule\r\n    ],\r\n    providers: [FlowPickerService],\r\n    exports: [FlowPickerButtonComponent],\r\n})\r\nexport class PepFlowPickerButtonModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FlowPickerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FlowPickerButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FlowPickerButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepGenericFormModule",
            "id": "module-PepGenericFormModule-97b6f192d9556e6e97cecea2aa61523fa8e96219dfd57fd1a15d1d2fc21220053c7d6635e3bdb5aeb04e6869c87eee11906f712f99c4c3237856c36d0349a32e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/generic-form/generic-form.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n//import { MatFormFieldModule } from '@angular/material/form-field';\r\n//import { MaterialModule } from '@pepperi-addons/ngx-lib/';\r\n//import { ReactiveFormsModule } from '@angular/forms';\r\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\r\nimport { PepFormModule } from '@pepperi-addons/ngx-lib/form';\r\nimport { PepMenuModule } from '@pepperi-addons/ngx-lib/menu';\r\nimport { PepPageLayoutModule } from '@pepperi-addons/ngx-lib/page-layout';\r\nimport { PepTopBarModule } from '@pepperi-addons/ngx-lib/top-bar';\r\n//import { PepTextboxModule } from '@pepperi-addons/ngx-lib/textbox';\r\n//import { PepDateModule } from '@pepperi-addons/ngx-lib/date';\r\n\r\nimport { PepGenericFormService } from './generic-form.service';\r\n\r\nimport { GenericFormComponent } from './generic-form.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        GenericFormComponent\r\n    ],\r\n    imports: [\r\n        CommonModule, \r\n\r\n       // MatFormFieldModule,\r\n     //   ReactiveFormsModule,\r\n\r\n        PepNgxLibModule,\r\n       // PepListModule,\r\n        PepFormModule,\r\n        PepMenuModule,\r\n        PepPageLayoutModule,\r\n        PepTopBarModule,\r\n     //   PepTextboxModule,\r\n      //  PepDateModule\r\n     //   PepSearchModule,\r\n      //  PepBreadCrumbsModule\r\n    ],\r\n    exports: [\r\n        GenericFormComponent\r\n    ],\r\n    providers: [\r\n        PepGenericFormService\r\n    ]\r\n})\r\nexport class PepGenericFormModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "PepGenericFormService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GenericFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GenericFormComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepGenericListModule",
            "id": "module-PepGenericListModule-d1e720d914f498a066db60cc0be3b3559d12d6831820c20fd630a76cbb1c9d8a1108861c457ef73ac52b409574ab7f5df3e1771fa0f2eeb425bb74b94c1fecf1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/generic-list/generic-list.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, APP_INITIALIZER } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { GenericListComponent } from './generic-list.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\r\nimport { PepListModule } from '@pepperi-addons/ngx-lib/list';\r\nimport { PepFormModule } from '@pepperi-addons/ngx-lib/form';\r\nimport { PepMenuModule } from '@pepperi-addons/ngx-lib/menu';\r\nimport { PepPageLayoutModule } from '@pepperi-addons/ngx-lib/page-layout';\r\nimport { PepTopBarModule } from '@pepperi-addons/ngx-lib/top-bar';\r\nimport { PepSideBarModule } from '@pepperi-addons/ngx-lib/side-bar';\r\nimport { PepSearchModule } from '@pepperi-addons/ngx-lib/search';\r\nimport { PepBreadCrumbsModule } from '@pepperi-addons/ngx-lib/bread-crumbs';\r\nimport { PepSmartFiltersModule } from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { PepIconModule, PepIconRegistry, pepIconLeafRound, pepIconLeafSkiny, pepIconSystemView } from '@pepperi-addons/ngx-lib/icon';\r\nimport { PepGenericListService } from './generic-list.service';\r\nimport { firstValueFrom } from 'rxjs';\r\n\r\nconst pepIcons = [\r\n    pepIconLeafRound,\r\n    pepIconLeafSkiny, pepIconSystemView\r\n]\r\n\r\n/*\r\nexport function appInitializerFactory(translate: TranslateService) {\r\n    return () => {\r\n        translate.setDefaultLang('en');\r\n        return firstValueFrom(translate.use('en'));\r\n    }\r\n}*/\r\n\r\n@NgModule({\r\n    declarations: [\r\n        GenericListComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        PepNgxLibModule,\r\n        MatIconModule,\r\n        PepListModule,\r\n        PepFormModule,\r\n        PepMenuModule,\r\n        PepPageLayoutModule,\r\n        PepTopBarModule,\r\n        PepSideBarModule,\r\n        PepSearchModule,\r\n        PepBreadCrumbsModule,\r\n        PepIconModule,\r\n        PepSmartFiltersModule\r\n    ],\r\n    exports: [\r\n        GenericListComponent        \r\n    ],\r\n    providers: [\r\n        PepGenericListService,\r\n        /*{\r\n            provide: APP_INITIALIZER,\r\n            useFactory: appInitializerFactory,\r\n            deps: [TranslateService],\r\n            multi: true\r\n        } */\r\n    ]\r\n})\r\nexport class PepGenericListModule { \r\n    constructor(\r\n        private pepIconRegistry: PepIconRegistry\r\n    ) {\r\n        this.pepIconRegistry.registerIcons(pepIcons);\r\n    }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "PepGenericListService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GenericListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GenericListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepGroupButtonsSettingsModule",
            "id": "module-PepGroupButtonsSettingsModule-8016332b24ab8ef3525511cb3fe0058d8eb181c474fda3771b3b266d61697cb04e8943388e09a6e2738a5608d15157ee75b700114fd81568b4f67286fdd96e45",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GroupButtonsSettingsComponent } from './group-buttons-settings.component';\r\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\r\nimport { PepFieldTitleModule } from '@pepperi-addons/ngx-lib/field-title';\r\nimport { PepGroupButtonsModule } from '@pepperi-addons/ngx-lib/group-buttons';\r\nimport { pepIconArrowLeftAlt, pepIconArrowRightAlt, PepIconModule, PepIconRegistry, pepIconTextAlignCenter, pepIconTextAlignLeft, pepIconTextAlignRight } from '@pepperi-addons/ngx-lib/icon';\r\n\r\nconst pepIcons = [\r\n    pepIconTextAlignCenter, \r\n    pepIconTextAlignLeft, \r\n    pepIconTextAlignRight,\r\n    pepIconArrowRightAlt,\r\n    pepIconArrowLeftAlt\r\n]\r\n\r\n@NgModule({\r\n    declarations: [\r\n        GroupButtonsSettingsComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        PepNgxLibModule,\r\n        PepFieldTitleModule,\r\n        PepGroupButtonsModule,\r\n        PepIconModule\r\n    ],\r\n    exports: [GroupButtonsSettingsComponent]\r\n})\r\nexport class PepGroupButtonsSettingsModule { \r\n    constructor(\r\n        private pepIconRegistry: PepIconRegistry,\r\n    ) {\r\n        this.pepIconRegistry.registerIcons(pepIcons);\r\n    }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GroupButtonsSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GroupButtonsSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepIconPickerModule",
            "id": "module-PepIconPickerModule-9e5c13760dd7dceb6c3d438ff50dcf431167ffc26e277f69407ff525e0ea7139fc1ffa70af91383cdac3c747cd21ebf2dc947d949ac5acc8703f39fbe90325ce",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/icon-picker/icon-picker.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\r\nimport { PepButtonModule } from '@pepperi-addons/ngx-lib/button';\r\nimport { PepFieldTitleModule } from '@pepperi-addons/ngx-lib/field-title';\r\nimport { PepRemoteLoaderModule } from '@pepperi-addons/ngx-lib/remote-loader';\r\nimport { PepCheckboxModule } from '@pepperi-addons/ngx-lib/checkbox';\r\nimport { IconPickerComponent } from './icon-picker.component';\r\nimport { FlowPickerService } from './icon-picker.service';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        IconPickerComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        PepNgxLibModule,\r\n        PepButtonModule,\r\n        PepFieldTitleModule,\r\n        PepCheckboxModule,\r\n        PepRemoteLoaderModule\r\n    ],\r\n    providers: [FlowPickerService],\r\n    exports: [IconPickerComponent],\r\n})\r\nexport class PepIconPickerModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FlowPickerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IconPickerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IconPickerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepManageParametersModule",
            "id": "module-PepManageParametersModule-4d4ddba81c3e1a47bd10fee701330fc03452f8446a81ecc1df191f8d5061b0b312bf851f8137c735e52ed8c8ce1900a9c1aa5ae2e166e4fbe06b6f5def061930",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\r\nimport { ManageParametersComponent } from './manage-parameters.component';\r\nimport { ManageParameterComponent } from './manage-parameter/manage-parameter.component';\r\nimport { PepDialogModule } from '@pepperi-addons/ngx-lib/dialog';\r\nimport { PepGenericListModule } from '@pepperi-addons/ngx-composite-lib/generic-list';\r\nimport { PepGenericFormModule } from '@pepperi-addons/ngx-composite-lib/generic-form';\r\nimport { PepButtonModule } from '@pepperi-addons/ngx-lib/button';\r\nimport { ManageParametersService } from './manage-parameters.service';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ManageParametersComponent, ManageParameterComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        PepNgxLibModule,\r\n        PepDialogModule,\r\n        PepButtonModule,\r\n        PepGenericListModule,\r\n        PepGenericFormModule\r\n    ],\r\n    providers: [ManageParametersService],\r\n    exports: [ManageParametersComponent],\r\n})\r\nexport class PepManageParametersModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ManageParametersService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ManageParameterComponent"
                        },
                        {
                            "name": "ManageParametersComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepGenericFormModule"
                        },
                        {
                            "name": "PepGenericListModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ManageParametersComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepNgxCompositeLibModule",
            "id": "module-PepNgxCompositeLibModule-0042131d35237b2fb3e6ae47edbf5c940115f7a472fcf133c59ea0bae7c86ccd936fb9aa79bc79a3636e967e2d92f690fe18f07144c017627d70a55a7748810d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/src/ngx-composite-lib.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n//import { TranslateModule } from '@ngx-translate/core';\r\n// import { HttpClientModule } from '@angular/common/http';\r\n// import { ReactiveFormsModule } from '@angular/forms';\r\nimport { PepResetConfigurationFieldDirective } from './core/common/directives/reset-configuration-field.directive';\r\nimport { PepDIMXHelperService, PepCompositeLibUtilitiesService } from './core/common/services/index';\r\n\r\nimport { PepRemoteLoaderModule } from '@pepperi-addons/ngx-lib/remote-loader';\r\n\r\nimport {\r\n    PepIconModule,\r\n    PepIconRegistry,\r\n    pepIconDeviceResponsive,\r\n} from '@pepperi-addons/ngx-lib/icon';\r\n\r\nconst utilitiesList = [\r\n    PepResetConfigurationFieldDirective\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        utilitiesList\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        PepIconModule,\r\n        PepRemoteLoaderModule,\r\n    ],\r\n    exports: [\r\n        utilitiesList\r\n        //TranslateModule\r\n    ],\r\n    providers: [\r\n        PepDIMXHelperService,\r\n        PepCompositeLibUtilitiesService\r\n    ]\r\n})\r\nexport class PepNgxCompositeLibModule {\r\n    constructor(\r\n        private pepIconRegistry: PepIconRegistry\r\n    ) {\r\n        this.pepIconRegistry.registerIcons([\r\n            pepIconDeviceResponsive\r\n        ]);\r\n    }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "PepCompositeLibUtilitiesService"
                        },
                        {
                            "name": "PepDIMXHelperService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepResetConfigurationFieldDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepResetConfigurationFieldDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepRichTextModule",
            "id": "module-PepRichTextModule-10a5965fa8bfa4105a18e73436ff3bedef02a7f1058e7caef06c5bc4d5d64a6b7ef0c1e7d23ba7757392ae122546de5bb37bd81ca80c0335a9e747a4b57ecfd6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/rich-text/rich-text.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\r\nimport { PepRichHtmlTextareaModule } from '@pepperi-addons/ngx-lib/rich-html-textarea';\r\nimport { PepRemoteLoaderModule } from '@pepperi-addons/ngx-lib/remote-loader';\r\nimport { PepButtonModule } from '@pepperi-addons/ngx-lib/button';\r\nimport { RichTextComponent } from './rich-text.component';\r\nimport { RichTextService } from './rich-text.service';\r\nimport { \r\n    PepIconModule,\r\n    PepIconRegistry,\r\n    pepIconSystemImage\r\n} from '@pepperi-addons/ngx-lib/icon';\r\n\r\nconst pepIcons = [\r\n    pepIconSystemImage\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        RichTextComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        PepNgxLibModule,\r\n        PepIconModule,\r\n        PepButtonModule,\r\n        PepRichHtmlTextareaModule,\r\n        PepRemoteLoaderModule\r\n    ],\r\n    providers: [RichTextService],\r\n    exports: [RichTextComponent],\r\n})\r\nexport class PepRichTextModule {\r\n    constructor(private pepIconRegistry: PepIconRegistry) {\r\n        this.pepIconRegistry.registerIcons(pepIcons);\r\n    }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "RichTextService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RichTextComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RichTextComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepShadowSettingsModule",
            "id": "module-PepShadowSettingsModule-e7d8aff1381494ac9e5e504443363bef4dd7e40faf1cfff998b767915f3c78e327e2c7fb046b6e2a0931ece3819c1a179ee01f147d09b84303b8462b69f07e82",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ShadowSettingsComponent } from './shadow-settings.component';\r\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\r\nimport { PepCheckboxModule } from '@pepperi-addons/ngx-lib/checkbox';\r\nimport { PepFieldTitleModule } from '@pepperi-addons/ngx-lib/field-title';\r\nimport { PepGroupButtonsModule } from '@pepperi-addons/ngx-lib/group-buttons';\r\nimport { PepSliderModule } from '@pepperi-addons/ngx-lib/slider';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ShadowSettingsComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        PepNgxLibModule,\r\n        PepCheckboxModule,\r\n        PepFieldTitleModule,\r\n        PepGroupButtonsModule,\r\n        PepSliderModule\r\n    ],\r\n    exports: [ShadowSettingsComponent],\r\n})\r\nexport class PepShadowSettingsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ShadowSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ShadowSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepShowIfBadgeModule",
            "id": "module-PepShowIfBadgeModule-3ca953dc7c1e2bcf12ed70a1fee4ac0c4f4d6192d8670ac9606bc08fc1c40c0496c95ea59b93f731219fc6fbe5841ceb604dfdac3647d953bc1f642915141413",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/show-if-badge/show-if-badge.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { PepNgxLibModule, PepAddonService } from '@pepperi-addons/ngx-lib';\r\nimport { PepIconModule, PepIconRegistry, pepIconSystemView} from '@pepperi-addons/ngx-lib/icon';\r\n\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\n\r\nimport { ShowIfBadgeComponent } from './show-if-badge.component';\r\n\r\nconst pepIcons = [\r\n    pepIconSystemView\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ShowIfBadgeComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        PepNgxLibModule,\r\n        PepIconModule,\r\n        MatIconModule,\r\n        MatBadgeModule,\r\n        TranslateModule.forChild(),\r\n    ],\r\n    exports: [ShowIfBadgeComponent]\r\n})\r\nexport class PepShowIfBadgeModule { \r\n\r\nconstructor(\r\n    private pepIconRegistry: PepIconRegistry\r\n    ) {\r\n        this.pepIconRegistry.registerIcons(pepIcons);\r\n    }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ShowIfBadgeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ShowIfBadgeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/color-settings/color-settings.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/data-view-builder/data-view-builder.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-form/generic-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/rich-text/rich-text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/show-if-badge/show-if-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "breadCrumbsItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CompactMode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    production: false\r\n}"
            },
            {
                "name": "FakeCardsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    {\r\n        UUID: '00000000-0000-0000-0000-000000abcdef',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/8/32944058_1.jpg?ft=1',\r\n        UnitPrice: '34.0000',\r\n        ObjectMenu: '',\r\n        TotalUnitsPriceAfterDiscount: '31.0000',\r\n        UnitsQuantity: '1.0000',\r\n        ItemExternalID: 'ABC1234'\r\n    },\r\n    {\r\n        UUID: '1624db9d-3c6f-4814-a92f-ac45a991df74',\r\n        ItemImage: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/6/32944056_1.jpg?ft=1',\r\n        UnitPrice: '55.0000',\r\n        ObjectMenu: '',\r\n        TotalUnitsPriceAfterDiscount: '40.0000',\r\n        UnitsQuantity: '1.0000',\r\n        ItemExternalID: 'DDD4444'\r\n    },\r\n    {\r\n        UUID: '00000000-0000-0000-0000-000000abcdef',\r\n        ItemImage: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        UnitPrice: '23.0000',\r\n        ObjectMenu: '',\r\n        TotalUnitsPriceAfterDiscount: '18.0000',\r\n        UnitsQuantity: '1.0000',\r\n        ItemExternalID: 'FER321'\r\n    },\r\n    {\r\n        UUID: '00000000-0000-0000-0000-000000abcdef',\r\n        ItemImage: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        UnitPrice: '60.0000',\r\n        ObjectMenu: '',\r\n        TotalUnitsPriceAfterDiscount: '60.0000',\r\n        UnitsQuantity: '1.0000',\r\n        ItemExternalID: 'POR444'\r\n    }\r\n]"
            },
            {
                "name": "FakeCardsDataView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    {\r\n        \"FieldID\": \"Image\",\r\n        \"Type\": \"Image\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 0,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 3,\r\n                \"Height\": 3\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"UnitPrice\",\r\n        \"Type\": \"Currency\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 3,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 6,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ObjectMenu\",\r\n        \"Type\": \"InternalLink\",\r\n        \"Title\": \"Menu\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": false,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 9,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 1,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"TotalUnitsPriceAfterDiscount\",\r\n        \"Type\": \"Currency\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 3,\r\n                \"Y\": 1\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 7,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"UnitsQuantity\",\r\n        \"Type\": \"NumberReal\",\r\n        \"Title\": \"Unit Quantity\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": false,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 3,\r\n                \"Y\": 2\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 7,\r\n                \"Height\": 2\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemExternalID\",\r\n        \"Type\": \"TextBox\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 0,\r\n                \"Y\": 3\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 3,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    }\r\n]"
            },
            {
                "name": "FakeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n    GeneralInformation: 'Rich Text Example',\r\n    //  ItemExternalID: 'Abcd',\r\n    ActionDateTime: '2021-11-22T09:26:02Z',\r\n    WrntyID: '272764514',\r\n    TSATsaTextTest: 'Some text',\r\n    DeliveryDate: '2021-11-22',\r\n    AccountInformation: '',\r\n    BranchDbId: '1',\r\n    BillToName: 'AD',\r\n    ShipToName: 'Someone',\r\n    ButtunTest: 'Yar',\r\n    /*BillToAddress: {\r\n        Value: 'Israel',\r\n        GroupFields: [\r\n            {\r\n                ShipToCountryIso: {\r\n                    Value: 'IL',\r\n                    OptionalValues: [{ Key: \"AD\", Value: \"Andorra\" }, { Key: \"IL\", Value: \"UIsrael\" }],\r\n                }\r\n            },\r\n            { ShipToStateIso: '' },\r\n            { ShipToCity: '' },\r\n            { ShipToStreet: '' },\r\n            { ShipToZipCode: '' }\r\n\r\n        ]\r\n    }, \r\n\r\n    ItemName: {\r\n        Value: 'abc',\r\n        OptionalValues: [{ Key: 'a', Value: 1 }, { Key: 'b', Value: 2 }]\r\n    }, */\r\n    UnitsQuantity: 10000,\r\n    TotalUnitsPriceAfterDiscount: 20000,\r\n    TSASetPriceForHardContract: 'high price',\r\n    TSALabels: null,\r\n    TSALabelQty: 0,\r\n    TSALabelCode: '',\r\n    TSABagsQty: 4,\r\n    TSAAmountPerBag: 999,\r\n    TSABagPrevValue: 7,\r\n    ItemTSAPackAllIn1Bag: 'all-pack'\r\n\r\n}"
            },
            {
                "name": "FakeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    Addons: [\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '2e51566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d152',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '31f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd701',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: 'ba0adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '1c24db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '2251566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '33f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '44fb64d8-2b2c-4dec-8563-ac9fa98cd701',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '50adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '6c24db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '7e51566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d154',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '81f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '94fb64d8-2b2c-4dec-8563-ac9fa98cd701',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '100adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '1124db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '1251566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '13f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd731',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '150adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '1624db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        }\r\n    ],\r\n}"
            },
            {
                "name": "FakeDataOld",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ObjectsDataRowCell[]",
                "defaultValue": "[\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"GeneralInformation\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 13,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '2',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true,\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"ExternalID\",\r\n        BackgroundColor: \"\",\r\n        Enabled: false,\r\n        FieldType: 1,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true,\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"ActionDateTime\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 6,\r\n        FormattedValue: \"11/22/2021 11:26 AM\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '607483216',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"2021-11-22T09:26:02Z\",\r\n        Visible: true,\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"WrntyID\",\r\n        BackgroundColor: \"\",\r\n        Enabled: false,\r\n        FieldType: 2,\r\n        FormattedValue: \"272764514\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '607492672',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"272764514\",\r\n        Visible: true,\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"TSATsaTextTest\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 1,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '1610126992',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true,\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"DeliveryDate\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 5,\r\n        FormattedValue: \"11/22/2021\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"2021-11-22\",\r\n        Visible: true,\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"AccountInformation\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 13,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '607499200',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true,\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"BranchDbId\",\r\n        BackgroundColor: \"\",\r\n        Enabled: false,\r\n        FieldType: 16,\r\n        FormattedValue: \"12234566686869\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '-1',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"1\",\r\n        Visible: true,\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"BillToName\",\r\n        BackgroundColor: \"\",\r\n        Enabled: false,\r\n        FieldType: 1,\r\n        FormattedValue: \"12234566686869\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '-1',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"12234566686869\",\r\n        Visible: true,\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"ShipToName\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 1,\r\n        FormattedValue: \"12234566686869\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '-1',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"12234566686869\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"BillToAddress\",\r\n        BackgroundColor: \"\",\r\n        Enabled: false,\r\n        FieldType: 14,\r\n        FormattedValue: \"Israel\",\r\n        GroupFields: [\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"BillToCountryIso\",\r\n                BackgroundColor: \"\",\r\n                Enabled: true,\r\n                FieldType: 16,\r\n                FormattedValue: \"Israel\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [{ Key: \"AD\", Value: \"Andorra\" }, { Key: \"IL\", Value: \"Israel\" }],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '1505137882',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"IL\",\r\n                Visible: true,\r\n            },\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"BillToStateIso\",\r\n                BackgroundColor: \"\",\r\n                Enabled: false,\r\n                FieldType: 16,\r\n                FormattedValue: \"\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '1585223436',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"\",\r\n                Visible: true,\r\n            },\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"BillToCity\",\r\n                BackgroundColor: \"\",\r\n                Enabled: true,\r\n                FieldType: 1,\r\n                FormattedValue: \"\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '607497088',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"\",\r\n                Visible: true\r\n            },\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"BillToStreet\",\r\n                BackgroundColor: \"\",\r\n                Enabled: true,\r\n                FieldType: 1,\r\n                FormattedValue: \"\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '0',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"\",\r\n                Visible: true,\r\n            },\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"BillToZipCode\",\r\n                BackgroundColor: \"\",\r\n                Enabled: true,\r\n                FieldType: 1,\r\n                FormattedValue: \"\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '1525717912',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"\",\r\n                Visible: true\r\n            }\r\n        ],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"Israel\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"ShipToAddress\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 14,\r\n        FormattedValue: \"Israel\",\r\n        GroupFields: [\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"ShipToCountryIso\",\r\n                BackgroundColor: \"\",\r\n                Enabled: true,\r\n                FieldType: 16,\r\n                FormattedValue: \"Israel\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [{ Key: \"AD\", Value: \"Andorra\" }, { Key: \"IL\", Value: \"UIsrael\" }],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '-1',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"IL\",\r\n                Visible: true\r\n            },\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"ShipToStateIso\",\r\n                BackgroundColor: \"\",\r\n                Enabled: false,\r\n                FieldType: 16,\r\n                FormattedValue: \"\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '0',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"\",\r\n                Visible: true\r\n            },\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"ShipToCity\",\r\n                BackgroundColor: \"\",\r\n                Enabled: true,\r\n                FieldType: 1,\r\n                FormattedValue: \"\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '0',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"\",\r\n                Visible: true\r\n            },\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"ShipToStreet\",\r\n                BackgroundColor: \"\",\r\n                Enabled: true,\r\n                FieldType: 1,\r\n                FormattedValue: \"\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '0',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"\",\r\n                Visible: true\r\n            },\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"ShipToZipCode\",\r\n                BackgroundColor: \"\",\r\n                Enabled: true,\r\n                FieldType: 1,\r\n                FormattedValue: \"\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '1530042974',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"\",\r\n                Visible: true\r\n            }\r\n        ],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '-1',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"Israel\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"BillToPhone\",\r\n        BackgroundColor: \"\",\r\n        Enabled: false,\r\n        FieldType: 1,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"ShipToPhone\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 1,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"OrderInformation\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 13,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"TSAImage1\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 20,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"TSAmulti\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 12,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [{ Key: \"ACV\", Value: \"ACV\" }, { Key: \"123\", Value: \"123\" }, { Key: \"DFGH\", Value: \"DFGH\" }],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"TSADropdown\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 11,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [{ Key: \"1\", Value: \"1\" }, { Key: \"23\", Value: \"23\" }, { Key: \"4\", Value: \"4\" }, { Key: \"5\", Value: \"5\" }],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"AccountTSAAccountDropdown\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 11,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [{ Key: \"A\", Value: \"A\" }, { Key: \"B\", Value: \"B\" }, { Key: \"C\", Value: \"C\" }, { Key: \"D\", Value: \"D\" }],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"TSACalculatedNumberbilltocountry\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 7,\r\n        FormattedValue: \"1\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"1\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"TSAUDTTEST\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 3,\r\n        FormattedValue: \"{\\\"success\\\":true}\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"{\\\"success\\\":true}\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"TSAUDTtesttest\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 1,\r\n        FormattedValue: \"Jfnfhdhdhfhfhfhfhf\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"Jfnfhdhdhfhfhfhfhf\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"Signature\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 25,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '2',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"TSAsignaturetest\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 25,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true\r\n    }\r\n]"
            },
            {
                "name": "FakeDataViewFields",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\r\n    {\r\n        FieldID: 'GeneralInformation',\r\n        Type: 'RichTextHTML',\r\n        Title: 'General Information',\r\n        Mandatory: false,\r\n        ReadOnly: false,\r\n        Layout: {\r\n            Origin: {\r\n                X: 0,\r\n                Y: 0\r\n            },\r\n            Size: {\r\n                Width: 2,\r\n                Height: 0\r\n            }\r\n        },\r\n        Style: {\r\n            Alignment: {\r\n                Horizontal: 'Stretch',\r\n                Vertical: 'Stretch'\r\n            }\r\n        },\r\n        AdditionalProps: {\r\n            renderTitle: false,\r\n            renderEnlargeButton: false\r\n        }\r\n    },\r\n    {\r\n        FieldID: 'GeneralInformationTwo',\r\n        Type: 'TextHeader',\r\n        Title: 'Description',\r\n        Mandatory: false,\r\n        ReadOnly: false,\r\n        Layout: {\r\n            Origin: {\r\n                X: 0,\r\n                Y: 1\r\n            },\r\n            Size: {\r\n                Width: 2,\r\n                Height: 0\r\n            }\r\n        },\r\n        Style: {\r\n            Alignment: {\r\n                Horizontal: 'Stretch',\r\n                Vertical: 'Stretch'\r\n            }\r\n        }\r\n    },\r\n    {\r\n        FieldID: 'WrntyID',\r\n        Type: 'LimitedLengthTextBox',\r\n        Title: 'ID',\r\n        Mandatory: false,\r\n        ReadOnly: true,\r\n        Layout: {\r\n            Origin: {\r\n                X: 0,\r\n                Y: 2\r\n            },\r\n            Size: {\r\n                Width: 1,\r\n                Height: 0\r\n            }\r\n        },\r\n        Style: {\r\n            Alignment: {\r\n                Horizontal: 'Stretch',\r\n                Vertical: 'Stretch'\r\n            }\r\n        }\r\n    },\r\n    {\r\n        FieldID: 'TSATsaTextTest',\r\n        Type: 'TextBox',\r\n        Title: 'TSA Tsa Text Test',\r\n        Mandatory: true,\r\n        ReadOnly: false,\r\n        Layout: {\r\n            Origin: {\r\n                X: 1,\r\n                Y: 2\r\n            },\r\n            Size: {\r\n                Width: 1,\r\n                Height: 0\r\n            }\r\n        },\r\n        Style: {\r\n            Alignment: {\r\n                Horizontal: 'Stretch',\r\n                Vertical: 'Stretch'\r\n            }\r\n        }\r\n    },\r\n    {\r\n        FieldID: 'ButtunTest',\r\n        Type: 'Button',\r\n        Title: 'TSA Tsa Btn Test',\r\n        Mandatory: true,\r\n        ReadOnly: false,\r\n        Layout: {\r\n            Origin: {\r\n                X: 0,\r\n                Y: 3\r\n            },\r\n            Size: {\r\n                Width: 2,\r\n                Height: 0\r\n            }\r\n        },\r\n        Style: {\r\n            Alignment: {\r\n                Horizontal: 'Stretch',\r\n                Vertical: 'Stretch'\r\n            }\r\n        },\r\n        \r\n    }\r\n]"
            },
            {
                "name": "FakeLineData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    {   \r\n        UUID: '00000000-0000-0000-0000-000000abcdef',\r\n        ItemHasActiveCampaign: '1',\r\n        ItemIndicatorsWithoutCampaign: '',\r\n        ItemExternalID: 'FER321',\r\n        ObjectMenu: '',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        ItemParentCode: '',\r\n        ItemDimension1Name: 'Kuko',\r\n        UnitsQuantity: '1.0000'\r\n    },\r\n    {   \r\n        UUID: '00000000-0000-0000-0000-000000abcdee',\r\n        ItemHasActiveCampaign: '1',\r\n        ItemIndicatorsWithoutCampaign: '',\r\n        ItemExternalID: 'FER333',\r\n        ObjectMenu: '',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        ItemParentCode: '',\r\n        ItemDimension1Name: 'Kuko',\r\n        UnitsQuantity: '1.0000'\r\n    },\r\n    {   \r\n        UUID: '00000000-0000-0000-0000-000000abcded',\r\n        ItemHasActiveCampaign: '1',\r\n        ItemIndicatorsWithoutCampaign: '',\r\n        ItemExternalID: 'FER999',\r\n        ObjectMenu: '',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        ItemParentCode: '',\r\n        ItemDimension1Name: 'Kuko',\r\n        UnitsQuantity: '1.0000'\r\n    },\r\n    {   \r\n        UUID: '00000000-0000-0000-0000-000000abcdec',\r\n        ItemHasActiveCampaign: '1',\r\n        ItemIndicatorsWithoutCampaign: '',\r\n        ItemExternalID: 'FER778',\r\n        ObjectMenu: '',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        ItemParentCode: '',\r\n        ItemDimension1Name: 'Kuko',\r\n        UnitsQuantity: '1.0000'\r\n    }\r\n]"
            },
            {
                "name": "FakeLineDataView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    {\r\n        \"FieldID\": \"ItemHasActiveCampaign\",\r\n        \"Type\": \"Boolean\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 0,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 1,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Left\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemIndicatorsWithoutCampaign\",\r\n        \"Type\": \"Indicators\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 1,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 2,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Left\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemExternalID\",\r\n        \"Type\": \"TextBox\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 4,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 5,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ObjectMenu\",\r\n        \"Type\": \"InternalLink\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": false,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 9,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 1,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Right\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"Image\",\r\n        \"Type\": \"ImageURL\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 0,\r\n                \"Y\": 1\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 4,\r\n                \"Height\": 4\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemParentCode\",\r\n        \"Type\": \"TextBox\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 4,\r\n                \"Y\": 1\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 6,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemDimension1Name\",\r\n        \"Type\": \"TextBox\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 4,\r\n                \"Y\": 2\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 6,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"UnitsQuantity\",\r\n        \"Type\": \"NumberRealQuantitySelector\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": false,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 4,\r\n                \"Y\": 3\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 6,\r\n                \"Height\": 2\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    }\r\n]"
            },
            {
                "name": "FakeSmartFilterFields",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    {\r\n        FieldID: 'BillToName',\r\n        Type: 'MultipleStringValues',\r\n        Title: 'Bill To Name',\r\n        OptionalValues: [{ Key: \"AD\", Value: \"Andorra\" }, { Key: \"IL\", Value: \"Israel\" }]\r\n    },\r\n    {\r\n        FieldID: 'AllowDecimal',\r\n        Type: 'Bool',\r\n        Title: 'Allow Decimal'\r\n    },\r\n    {\r\n        FieldID: 'CaseQuantity',\r\n        Type: 'Integer',\r\n        Title: 'Case Quantity'\r\n    },\r\n    { FieldID: 'TSAAttachmentTest', Title: 'TSA Attachment Test', Type: 'String' },\r\n    { FieldID: 'ActionDateTime', Title: 'Action Date Time', Type: 'DateTime' },\r\n]"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NoDataFoundMsg",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Pager",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "pepIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/data-view-builder/data-view-builder.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    pepIconSystemClose,\r\n    pepIconArrowDownAlt,\r\n    pepIconSystemBin,\r\n    pepIconNumberPlus\r\n]"
            },
            {
                "name": "pepIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    pepIconArrowRightAlt,\r\n]"
            },
            {
                "name": "pepIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-list/generic-list.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    pepIconLeafRound,\r\n    pepIconLeafSkiny, pepIconSystemView\r\n]"
            },
            {
                "name": "pepIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    pepIconTextAlignCenter, \r\n    pepIconTextAlignLeft, \r\n    pepIconTextAlignRight,\r\n    pepIconArrowRightAlt,\r\n    pepIconArrowLeftAlt\r\n]"
            },
            {
                "name": "pepIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/rich-text/rich-text.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    pepIconSystemImage\r\n]"
            },
            {
                "name": "pepIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/show-if-badge/show-if-badge.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    pepIconSystemView\r\n]"
            },
            {
                "name": "pepIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    pepIconSystemBolt,\r\n    pepIconNoImage,\r\n    pepIconNoImage2,\r\n    pepIconArrowTwoWaysVerT,\r\n    pepIconArrowDown,\r\n    pepIconArrowUp,\r\n    pepIconArrowRightAlt,\r\n    pepIconArrowLeftAlt,\r\n    pepIconArrowDownAlt,\r\n    pepIconArrowUpAlt,\r\n    pepIconNumberNumber,\r\n    pepIconNumberPlus,\r\n    pepIconSystemBin,\r\n    pepIconSystemEdit,\r\n    pepIconSystemClose,\r\n    pepIconSystemFilter,\r\n    pepIconSystemMenu,\r\n    pepIconSystemHome,\r\n    pepIconSystemSettings,\r\n    pepIconSystemQuestion,\r\n    pepIconSystemAvatar,\r\n    pepIconSystemDoor,\r\n    pepIconSystemPrint,\r\n    pepIconSystemSearch,\r\n    pepIconSystemSpinner,\r\n    pepIconSystemInfo,\r\n    pepIconShoppingCart,\r\n    pepIconTimeCal,\r\n    pepIconViewCardLg,\r\n    pepIconViewCardMd,\r\n    pepIconViewCardSm,\r\n    pepIconViewTable,\r\n    pepIconViewMatrix,\r\n    pepIconViewLine,\r\n]"
            },
            {
                "name": "pepperiComponentsModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    PepAttachmentModule,\r\n    PepCarouselModule,\r\n    PepBreadCrumbsModule,\r\n    PepButtonModule,\r\n    PepCheckboxModule,\r\n    PepColorModule,\r\n    PepDateModule,\r\n    PepGroupButtonsModule,\r\n    PepImageModule,\r\n    PepImagesFilmstripModule,\r\n    PepListModule,\r\n    PepCheckboxModule,\r\n    PepQuantitySelectorModule,\r\n    PepRichHtmlTextareaModule,\r\n    PepSearchModule,\r\n    PepSelectModule,\r\n    PepSeparatorModule,\r\n    PepSliderModule,\r\n    PepSideBarModule,\r\n    PepSignatureModule,\r\n    PepSizeDetectorModule,\r\n    PepTextareaModule,\r\n    PepTextboxModule,\r\n    PepIconModule,\r\n    PepMenuModule,\r\n    PepTopBarModule,\r\n    PepPageLayoutModule,\r\n    PepSmartFiltersModule,\r\n    PepFormModule\r\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SmartFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "snackBarRef",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MatSnackBarRef | null",
                "defaultValue": "null"
            },
            {
                "name": "snackBarService",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PepSnackBarService | null",
                "defaultValue": "null"
            },
            {
                "name": "Story1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/color-settings/color-settings.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Story1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Story1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-form/generic-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Story1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Story1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Story1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/rich-text/rich-text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Story2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/color-settings/color-settings.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Story2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Story2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/rich-text/rich-text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Story3",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/rich-text/rich-text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/color-settings/color-settings.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ColorSettingsComponent>",
                "defaultValue": "(\r\n    args: ColorSettingsComponent\r\n) => ({\r\n    props: {\r\n        ...args,\r\n        colorChange: action('colorChange'),\r\n    },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/data-view-builder/data-view-builder.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DataViewBuilderComponent>",
                "defaultValue": "(\r\n    args: DataViewBuilderComponent\r\n) => ({\r\n    props: {\r\n        ...args,\r\n        dataViewChange: action('dataViewChange'),\r\n    },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FileStatusPanelComponent>",
                "defaultValue": "(\r\n    args: FileStatusPanelComponent\r\n) => ({\r\n    props: {\r\n        ...args,\r\n        closeClick: action('closeClick'),\r\n        onButtonClick: (event: any) => openFilePanel(event, args),\r\n    },\r\n    template: `\r\n    <pep-button sizeType=\"md\" value=\"Click me\" (buttonClick)=\"onButtonClick($event)\"></pep-button>\r\n`,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-form/generic-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<GenericFormComponent>",
                "defaultValue": "(args: GenericFormComponent) => ({\r\n    props: {\r\n        ...args,\r\n        valueChange: action('valueChange'),\r\n        fieldClick: action('fieldClick'),\r\n        formValidationChange: action('formValidationChange')\r\n    }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<GenericListComponent>",
                "defaultValue": "(args: GenericListComponent) => ({\r\n    props: {\r\n        ...args,\r\n        fieldClick: action('fieldClick'),\r\n        valueChange: action('valueChange'),\r\n        breadCrumbItemClick: action('breadCrumbItemClick'),\r\n    },\r\n    template: `\r\n        <div style=\"height: 40vh\">\r\n            <pep-generic-list [dataSource]=\"dataSource\" [actions]=\"actions\" [breadCrumbsItems]=\"breadCrumbsItems\" [uuidMapping]=\"uuidMapping\" [disabled]=\"disabled\" \r\n                [addPadding]=\"addPadding\" [title]=\"title\" [description]=\"description\" [inline]=\"inline\" [showSearch]=\"showSearch\" [selectionType]=\"selectionType\"\r\n                [noDataFoundMsg]=\"noDataFoundMsg\" [supportSorting]=\"supportSorting\" [supportSorting]=\"supportSorting\" [showTopBar]=\"showTopBar\" [pager]=\"pager\"\r\n                [tableViewType]=\"tableViewType\" [zebraStripes]=\"zebraStripes\" [smartFilter]=\"smartFilter\" (valueChange)=\"valueChange\" (fieldClick)=\"fieldClick\" \r\n                (breadCrumbItemClick)=\"breadCrumbItemClick\">\r\n            </pep-generic-list>\r\n        </div>\r\n    `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<GroupButtonsSettingsComponent>",
                "defaultValue": "(\r\n    args: GroupButtonsSettingsComponent\r\n) => ({\r\n    props: {\r\n        ...args,\r\n        btnkeyChange: action('btnkeyChange'), \r\n    },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ManageParametersComponent>",
                "defaultValue": "(\r\n    args: ManageParametersComponent\r\n) => ({\r\n    props: {\r\n        ...args,\r\n        parametersChange: action('parametersChange'),\r\n    },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/rich-text/rich-text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<RichTextComponent>",
                "defaultValue": "(args: RichTextComponent) => ({\r\n    props: {\r\n        ...args,\r\n        valueChange: action('valueChange'),\r\n    },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ShadowSettingsComponent>",
                "defaultValue": "(\r\n    args: ShadowSettingsComponent\r\n) => ({\r\n    props: {\r\n        ...args,\r\n        shadowChange: action('shadowChange'),\r\n    },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/show-if-badge/show-if-badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ShowIfBadgeComponent>",
                "defaultValue": "(args: ShowIfBadgeComponent) => ({\r\n    props: {\r\n        ...args,\r\n    },\r\n})"
            },
            {
                "name": "uiControlData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n    Type: 'Form',\r\n    // Columns: 2,\r\n    ControlFields: [{\r\n        ApiName: \"GeneralInformation\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"\",\r\n        FieldType: 13,\r\n        Layout: { Height: 1, LineNumber: 0, Width: 2, X: 0, XAlignment: 0, Y: 0, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 0,\r\n        Width: 2,\r\n        X: 0,\r\n        XAlignment: 0,\r\n        Y: 0,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 100,\r\n        MinValue: 0,\r\n        ReadOnly: false,\r\n        Title: \"General Information\"\r\n    },\r\n    {\r\n        ApiName: \"ExternalID\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"External ID\",\r\n        FieldType: 1,\r\n        Layout: { Height: 1, LineNumber: 1, Width: 1, X: 0, XAlignment: 0, Y: 1, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 1,\r\n        Width: 1,\r\n        X: 0,\r\n        XAlignment: 0,\r\n        Y: 1,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: true,\r\n        Title: \"External ID\"\r\n    },\r\n    {\r\n        ApiName: \"ActionDateTime\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Action Time\",\r\n        FieldType: 6,\r\n        Layout: { Height: 1, LineNumber: 1, Width: 1, X: 1, XAlignment: 0, Y: 1, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 1,\r\n        Width: 1,\r\n        X: 1,\r\n        XAlignment: 0,\r\n        Y: 1,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Action Time\"\r\n    },\r\n    {\r\n        ApiName: \"WrntyID\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"ID\",\r\n        FieldType: 2,\r\n        Layout: { Height: 1, LineNumber: 2, Width: 1, X: 0, XAlignment: 0, Y: 2, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 2,\r\n        Width: 1,\r\n        X: 0,\r\n        XAlignment: 0,\r\n        Y: 2,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: true,\r\n        Title: \"ID\"\r\n    },\r\n    {\r\n        ApiName: \"TSATsaTextTest\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"TsaTextTest\",\r\n        FieldType: 1,\r\n        Layout: { Height: 1, LineNumber: 2, Width: 1, X: 1, XAlignment: 0, Y: 2, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 2,\r\n        Width: 1,\r\n        X: 1,\r\n        XAlignment: 0,\r\n        Y: 2,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"TsaTextTest\"\r\n    },\r\n    {\r\n        ApiName: \"DeliveryDate\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Delivery Date\",\r\n        FieldType: 5,\r\n        Layout: { Height: 1, LineNumber: 3, Width: 2, X: 0, XAlignment: 0, Y: 3, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 3,\r\n        Width: 2,\r\n        X: 0,\r\n        XAlignment: 0,\r\n        Y: 3,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Delivery Date\"\r\n    },\r\n    {\r\n        ApiName: \"AccountInformation\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"\",\r\n        FieldType: 13,\r\n        Layout: { Height: 1, LineNumber: 4, Width: 2, X: 0, XAlignment: 0, Y: 4, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 4,\r\n        Width: 2,\r\n        X: 0,\r\n        XAlignment: 0,\r\n        Y: 4,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 100,\r\n        MinValue: 0,\r\n        ReadOnly: false,\r\n        Title: \"Account Information\"\r\n    },\r\n    {\r\n        ApiName: \"BranchDbId\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Branch\",\r\n        FieldType: 16,\r\n        Layout: { Height: 1, LineNumber: 5, Width: 1, X: 1, XAlignment: 0, Y: 5, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 5,\r\n        Width: 1,\r\n        X: 1,\r\n        XAlignment: 0,\r\n        Y: 5,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Branch\"\r\n    },\r\n    {\r\n        ApiName: \"BillToName\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Bill to Name\",\r\n        FieldType: 1,\r\n        Layout: { Height: 1, LineNumber: 6, Width: 1, X: 0, XAlignment: 0, Y: 6, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 6,\r\n        Width: 1,\r\n        X: 0,\r\n        XAlignment: 0,\r\n        Y: 6,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: true,\r\n        Title: \"Bill to Name\"\r\n    },\r\n    {\r\n        ApiName: \"ShipToName\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Ship to Name\",\r\n        FieldType: 1,\r\n        Layout: { Height: 1, LineNumber: 6, Width: 1, X: 1, XAlignment: 0, Y: 6, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 6,\r\n        Width: 1,\r\n        X: 1,\r\n        XAlignment: 0,\r\n        Y: 6,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Ship to Name\"\r\n    },\r\n    {\r\n        ApiName: \"BillToAddress\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Bill to Address\",\r\n        FieldType: 14,\r\n        Layout: { Height: 2, LineNumber: 7, Width: 1, X: 0, XAlignment: 0, Y: 7, YAlignment: 3 },\r\n        Height: 2,\r\n        LineNumber: 7,\r\n        Width: 1,\r\n        X: 0,\r\n        XAlignment: 0,\r\n        Y: 7,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: true,\r\n        Title: \"Bill to Address\"\r\n    },\r\n    {\r\n        ApiName: \"ShipToAddress\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Ship to Address\",\r\n        FieldType: 14,\r\n        Layout: { Height: 2, LineNumber: 7, Width: 1, X: 1, XAlignment: 0, Y: 7, YAlignment: 3 },\r\n        Height: 2,\r\n        LineNumber: 7,\r\n        Width: 1,\r\n        X: 1,\r\n        XAlignment: 0,\r\n        Y: 7,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Ship to Address\"\r\n    },\r\n    {\r\n        ApiName: \"BillToPhone\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Bill to Phone\",\r\n        FieldType: 1,\r\n        Layout: { Height: 1, LineNumber: 8, Width: 1, X: 0, XAlignment: 0, Y: 10, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: true,\r\n        Title: \"Bill to Phone\",\r\n    },\r\n    {\r\n        ApiName: \"ShipToPhone\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Ship to Phone\",\r\n        FieldType: 1,\r\n        Layout: { Height: 1, LineNumber: 8, Width: 1, X: 1, XAlignment: 0, Y: 10, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Ship to Phone\"\r\n    },\r\n    {\r\n        ApiName: \"OrderInformation\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"\",\r\n        FieldType: 13,\r\n        Layout: { Height: 1, LineNumber: 9, Width: 2, X: 0, XAlignment: 0, Y: 11, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 100,\r\n        MinValue: 0,\r\n        ReadOnly: false,\r\n        Title: \"Order Information\"\r\n    },\r\n    {\r\n        ApiName: \"TSAImage1\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Image1\",\r\n        FieldType: 20,\r\n        Layout: { Height: 4, LineNumber: 10, Width: 2, X: 0, XAlignment: 0, Y: 12, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Image1\"\r\n    },\r\n    {\r\n        ApiName: \"TSAmulti\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"multi\",\r\n        FieldType: 12,\r\n        Layout: { Height: 1, LineNumber: 11, Width: 2, X: 0, XAlignment: 0, Y: 16, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"multi\",\r\n    },\r\n    {\r\n        ApiName: \"TSADropdown\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Dropdown\",\r\n        FieldType: 11,\r\n        Layout: { Height: 1, LineNumber: 12, Width: 2, X: 0, XAlignment: 0, Y: 17, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Dropdown\"\r\n    },\r\n    {\r\n        ApiName: \"AccountTSAAccountDropdown\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Account Account Dropdown\",\r\n        FieldType: 11,\r\n        Layout: { Height: 1, LineNumber: 13, Width: 2, X: 0, XAlignment: 0, Y: 18, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Account Dropdown\"\r\n    },\r\n    {\r\n        ApiName: \"TSACalculatedNumberbilltocountry\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Calculated Number bill to country\",\r\n        FieldType: 7,\r\n        Layout: { Height: 1, LineNumber: 14, Width: 2, X: 0, XAlignment: 0, Y: 19, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Calculated Number bill to country\"\r\n    },\r\n    {\r\n        ApiName: \"TSAUDTTEST\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"UDT TEST\",\r\n        FieldType: 3,\r\n        Layout: { Height: 2, LineNumber: 15, Width: 2, X: 0, XAlignment: 0, Y: 20, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"UDT TEST\"\r\n    },\r\n    {\r\n        ApiName: \"TSAUDTtesttest\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"UDTtesttest\",\r\n        FieldType: 1,\r\n        Layout: { Height: 1, LineNumber: 16, Width: 2, X: 0, XAlignment: 0, Y: 22, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"UDTtesttest\"\r\n    },\r\n    {\r\n        ApiName: \"Signature\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Signature\",\r\n        FieldType: 25,\r\n        Layout: { Height: 2, LineNumber: 17, Width: 2, X: 0, XAlignment: 0, Y: 23, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Signature\"\r\n    },\r\n    {\r\n        ApiName: \"TSAsignaturetest\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"signaturetest\",\r\n        FieldType: 25,\r\n        Layout: { Height: 2, LineNumber: 18, Width: 2, X: 0, XAlignment: 0, Y: 25, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"signaturetest\"\r\n    }\r\n    ]\r\n}"
            },
            {
                "name": "utilitiesList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/src/ngx-composite-lib.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    PepResetConfigurationFieldDirective\r\n]"
            },
            {
                "name": "ZebraStripes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [
            {
                "name": "getSnackBarData",
                "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "args",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "initSnackBarService",
                "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "sb",
                        "type": "PepSnackBarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "sb",
                        "type": "PepSnackBarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "openFilePanel",
                "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "event",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "args",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "event",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "args",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "FileStatusType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"uploading\" | \"downloading\" | \"done\" | \"failed\" | \"hidden\" | \"deleting\"",
                "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ParameterFormType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"add\" | \"edit\"",
                "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "PepDataViewBuilderType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"menu\" | \"list\" | \"card\" | \"not-supported\"",
                "file": "projects/ngx-composite-lib/data-view-builder/data-view-builder.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "PepGroupbuttonsTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sizes\" | \"font-weight\" | \"width-sizes\" | \"vertical-align\" | \"horizontal-align\" | \"left-right-arrows\" | \"boolean\" | \"custom\"",
                "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "PepShadowIntensityType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"soft\" | \"regular\" | \"hard\"",
                "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/ngx-composite-lib/color-settings/color-settings.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/color-settings/color-settings.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Story1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/color-settings/color-settings.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Story2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/color-settings/color-settings.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/color-settings/color-settings.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ColorSettingsComponent>",
                    "defaultValue": "(\r\n    args: ColorSettingsComponent\r\n) => ({\r\n    props: {\r\n        ...args,\r\n        colorChange: action('colorChange'),\r\n    },\r\n})"
                }
            ],
            "projects/ngx-composite-lib/data-view-builder/data-view-builder.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/data-view-builder/data-view-builder.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/data-view-builder/data-view-builder.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DataViewBuilderComponent>",
                    "defaultValue": "(\r\n    args: DataViewBuilderComponent\r\n) => ({\r\n    props: {\r\n        ...args,\r\n        dataViewChange: action('dataViewChange'),\r\n    },\r\n})"
                }
            ],
            "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "snackBarRef",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSnackBarRef | null",
                    "defaultValue": "null"
                },
                {
                    "name": "snackBarService",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepSnackBarService | null",
                    "defaultValue": "null"
                },
                {
                    "name": "Story1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Story2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FileStatusPanelComponent>",
                    "defaultValue": "(\r\n    args: FileStatusPanelComponent\r\n) => ({\r\n    props: {\r\n        ...args,\r\n        closeClick: action('closeClick'),\r\n        onButtonClick: (event: any) => openFilePanel(event, args),\r\n    },\r\n    template: `\r\n    <pep-button sizeType=\"md\" value=\"Click me\" (buttonClick)=\"onButtonClick($event)\"></pep-button>\r\n`,\r\n})"
                }
            ],
            "projects/ngx-composite-lib/generic-form/generic-form.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-form/generic-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Story1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-form/generic-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-form/generic-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<GenericFormComponent>",
                    "defaultValue": "(args: GenericFormComponent) => ({\r\n    props: {\r\n        ...args,\r\n        valueChange: action('valueChange'),\r\n        fieldClick: action('fieldClick'),\r\n        formValidationChange: action('formValidationChange')\r\n    }\r\n})"
                }
            ],
            "projects/ngx-composite-lib/generic-list/generic-list.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "breadCrumbsItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "CompactMode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NoDataFoundMsg",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Pager",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SmartFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<GenericListComponent>",
                    "defaultValue": "(args: GenericListComponent) => ({\r\n    props: {\r\n        ...args,\r\n        fieldClick: action('fieldClick'),\r\n        valueChange: action('valueChange'),\r\n        breadCrumbItemClick: action('breadCrumbItemClick'),\r\n    },\r\n    template: `\r\n        <div style=\"height: 40vh\">\r\n            <pep-generic-list [dataSource]=\"dataSource\" [actions]=\"actions\" [breadCrumbsItems]=\"breadCrumbsItems\" [uuidMapping]=\"uuidMapping\" [disabled]=\"disabled\" \r\n                [addPadding]=\"addPadding\" [title]=\"title\" [description]=\"description\" [inline]=\"inline\" [showSearch]=\"showSearch\" [selectionType]=\"selectionType\"\r\n                [noDataFoundMsg]=\"noDataFoundMsg\" [supportSorting]=\"supportSorting\" [supportSorting]=\"supportSorting\" [showTopBar]=\"showTopBar\" [pager]=\"pager\"\r\n                [tableViewType]=\"tableViewType\" [zebraStripes]=\"zebraStripes\" [smartFilter]=\"smartFilter\" (valueChange)=\"valueChange\" (fieldClick)=\"fieldClick\" \r\n                (breadCrumbItemClick)=\"breadCrumbItemClick\">\r\n            </pep-generic-list>\r\n        </div>\r\n    `,\r\n})"
                },
                {
                    "name": "ZebraStripes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Story1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<GroupButtonsSettingsComponent>",
                    "defaultValue": "(\r\n    args: GroupButtonsSettingsComponent\r\n) => ({\r\n    props: {\r\n        ...args,\r\n        btnkeyChange: action('btnkeyChange'), \r\n    },\r\n})"
                }
            ],
            "projects/ngx-composite-lib/manage-parameters/manage-parameters.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Story1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ManageParametersComponent>",
                    "defaultValue": "(\r\n    args: ManageParametersComponent\r\n) => ({\r\n    props: {\r\n        ...args,\r\n        parametersChange: action('parametersChange'),\r\n    },\r\n})"
                }
            ],
            "projects/ngx-composite-lib/rich-text/rich-text.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/rich-text/rich-text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Story1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/rich-text/rich-text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Story2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/rich-text/rich-text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Story3",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/rich-text/rich-text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/rich-text/rich-text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<RichTextComponent>",
                    "defaultValue": "(args: RichTextComponent) => ({\r\n    props: {\r\n        ...args,\r\n        valueChange: action('valueChange'),\r\n    },\r\n})"
                }
            ],
            "projects/ngx-composite-lib/shadow-settings/shadow-settings.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ShadowSettingsComponent>",
                    "defaultValue": "(\r\n    args: ShadowSettingsComponent\r\n) => ({\r\n    props: {\r\n        ...args,\r\n        shadowChange: action('shadowChange'),\r\n    },\r\n})"
                }
            ],
            "projects/ngx-composite-lib/show-if-badge/show-if-badge.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/show-if-badge/show-if-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/show-if-badge/show-if-badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ShowIfBadgeComponent>",
                    "defaultValue": "(args: ShowIfBadgeComponent) => ({\r\n    props: {\r\n        ...args,\r\n    },\r\n})"
                }
            ],
            "projects/ngx-composite-lib/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/ngx-composite-lib-tester/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/ngx-composite-lib-tester/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    production: true\r\n}"
                }
            ],
            "projects/ngx-composite-lib-tester/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    production: false\r\n}"
                }
            ],
            "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts": [
                {
                    "name": "FakeCardsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    {\r\n        UUID: '00000000-0000-0000-0000-000000abcdef',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/8/32944058_1.jpg?ft=1',\r\n        UnitPrice: '34.0000',\r\n        ObjectMenu: '',\r\n        TotalUnitsPriceAfterDiscount: '31.0000',\r\n        UnitsQuantity: '1.0000',\r\n        ItemExternalID: 'ABC1234'\r\n    },\r\n    {\r\n        UUID: '1624db9d-3c6f-4814-a92f-ac45a991df74',\r\n        ItemImage: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/6/32944056_1.jpg?ft=1',\r\n        UnitPrice: '55.0000',\r\n        ObjectMenu: '',\r\n        TotalUnitsPriceAfterDiscount: '40.0000',\r\n        UnitsQuantity: '1.0000',\r\n        ItemExternalID: 'DDD4444'\r\n    },\r\n    {\r\n        UUID: '00000000-0000-0000-0000-000000abcdef',\r\n        ItemImage: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        UnitPrice: '23.0000',\r\n        ObjectMenu: '',\r\n        TotalUnitsPriceAfterDiscount: '18.0000',\r\n        UnitsQuantity: '1.0000',\r\n        ItemExternalID: 'FER321'\r\n    },\r\n    {\r\n        UUID: '00000000-0000-0000-0000-000000abcdef',\r\n        ItemImage: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        UnitPrice: '60.0000',\r\n        ObjectMenu: '',\r\n        TotalUnitsPriceAfterDiscount: '60.0000',\r\n        UnitsQuantity: '1.0000',\r\n        ItemExternalID: 'POR444'\r\n    }\r\n]"
                },
                {
                    "name": "FakeCardsDataView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    {\r\n        \"FieldID\": \"Image\",\r\n        \"Type\": \"Image\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 0,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 3,\r\n                \"Height\": 3\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"UnitPrice\",\r\n        \"Type\": \"Currency\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 3,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 6,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ObjectMenu\",\r\n        \"Type\": \"InternalLink\",\r\n        \"Title\": \"Menu\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": false,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 9,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 1,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"TotalUnitsPriceAfterDiscount\",\r\n        \"Type\": \"Currency\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 3,\r\n                \"Y\": 1\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 7,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"UnitsQuantity\",\r\n        \"Type\": \"NumberReal\",\r\n        \"Title\": \"Unit Quantity\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": false,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 3,\r\n                \"Y\": 2\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 7,\r\n                \"Height\": 2\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemExternalID\",\r\n        \"Type\": \"TextBox\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 0,\r\n                \"Y\": 3\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 3,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    }\r\n]"
                },
                {
                    "name": "FakeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    Addons: [\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '2e51566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d152',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '31f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd701',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: 'ba0adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '1c24db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '2251566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '33f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '44fb64d8-2b2c-4dec-8563-ac9fa98cd701',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '50adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '6c24db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '7e51566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d154',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '81f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '94fb64d8-2b2c-4dec-8563-ac9fa98cd701',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '100adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '1124db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '1251566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '13f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd731',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '150adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '1624db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        }\r\n    ],\r\n}"
                },
                {
                    "name": "FakeLineData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    {   \r\n        UUID: '00000000-0000-0000-0000-000000abcdef',\r\n        ItemHasActiveCampaign: '1',\r\n        ItemIndicatorsWithoutCampaign: '',\r\n        ItemExternalID: 'FER321',\r\n        ObjectMenu: '',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        ItemParentCode: '',\r\n        ItemDimension1Name: 'Kuko',\r\n        UnitsQuantity: '1.0000'\r\n    },\r\n    {   \r\n        UUID: '00000000-0000-0000-0000-000000abcdee',\r\n        ItemHasActiveCampaign: '1',\r\n        ItemIndicatorsWithoutCampaign: '',\r\n        ItemExternalID: 'FER333',\r\n        ObjectMenu: '',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        ItemParentCode: '',\r\n        ItemDimension1Name: 'Kuko',\r\n        UnitsQuantity: '1.0000'\r\n    },\r\n    {   \r\n        UUID: '00000000-0000-0000-0000-000000abcded',\r\n        ItemHasActiveCampaign: '1',\r\n        ItemIndicatorsWithoutCampaign: '',\r\n        ItemExternalID: 'FER999',\r\n        ObjectMenu: '',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        ItemParentCode: '',\r\n        ItemDimension1Name: 'Kuko',\r\n        UnitsQuantity: '1.0000'\r\n    },\r\n    {   \r\n        UUID: '00000000-0000-0000-0000-000000abcdec',\r\n        ItemHasActiveCampaign: '1',\r\n        ItemIndicatorsWithoutCampaign: '',\r\n        ItemExternalID: 'FER778',\r\n        ObjectMenu: '',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        ItemParentCode: '',\r\n        ItemDimension1Name: 'Kuko',\r\n        UnitsQuantity: '1.0000'\r\n    }\r\n]"
                },
                {
                    "name": "FakeLineDataView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    {\r\n        \"FieldID\": \"ItemHasActiveCampaign\",\r\n        \"Type\": \"Boolean\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 0,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 1,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Left\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemIndicatorsWithoutCampaign\",\r\n        \"Type\": \"Indicators\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 1,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 2,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Left\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemExternalID\",\r\n        \"Type\": \"TextBox\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 4,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 5,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ObjectMenu\",\r\n        \"Type\": \"InternalLink\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": false,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 9,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 1,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Right\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"Image\",\r\n        \"Type\": \"ImageURL\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 0,\r\n                \"Y\": 1\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 4,\r\n                \"Height\": 4\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemParentCode\",\r\n        \"Type\": \"TextBox\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 4,\r\n                \"Y\": 1\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 6,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemDimension1Name\",\r\n        \"Type\": \"TextBox\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 4,\r\n                \"Y\": 2\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 6,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"UnitsQuantity\",\r\n        \"Type\": \"NumberRealQuantitySelector\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": false,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 4,\r\n                \"Y\": 3\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 6,\r\n                \"Height\": 2\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    }\r\n]"
                },
                {
                    "name": "FakeSmartFilterFields",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    {\r\n        FieldID: 'BillToName',\r\n        Type: 'MultipleStringValues',\r\n        Title: 'Bill To Name',\r\n        OptionalValues: [{ Key: \"AD\", Value: \"Andorra\" }, { Key: \"IL\", Value: \"Israel\" }]\r\n    },\r\n    {\r\n        FieldID: 'AllowDecimal',\r\n        Type: 'Bool',\r\n        Title: 'Allow Decimal'\r\n    },\r\n    {\r\n        FieldID: 'CaseQuantity',\r\n        Type: 'Integer',\r\n        Title: 'Case Quantity'\r\n    },\r\n    { FieldID: 'TSAAttachmentTest', Title: 'TSA Attachment Test', Type: 'String' },\r\n    { FieldID: 'ActionDateTime', Title: 'Action Date Time', Type: 'DateTime' },\r\n]"
                }
            ],
            "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts": [
                {
                    "name": "FakeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n    GeneralInformation: 'Rich Text Example',\r\n    //  ItemExternalID: 'Abcd',\r\n    ActionDateTime: '2021-11-22T09:26:02Z',\r\n    WrntyID: '272764514',\r\n    TSATsaTextTest: 'Some text',\r\n    DeliveryDate: '2021-11-22',\r\n    AccountInformation: '',\r\n    BranchDbId: '1',\r\n    BillToName: 'AD',\r\n    ShipToName: 'Someone',\r\n    ButtunTest: 'Yar',\r\n    /*BillToAddress: {\r\n        Value: 'Israel',\r\n        GroupFields: [\r\n            {\r\n                ShipToCountryIso: {\r\n                    Value: 'IL',\r\n                    OptionalValues: [{ Key: \"AD\", Value: \"Andorra\" }, { Key: \"IL\", Value: \"UIsrael\" }],\r\n                }\r\n            },\r\n            { ShipToStateIso: '' },\r\n            { ShipToCity: '' },\r\n            { ShipToStreet: '' },\r\n            { ShipToZipCode: '' }\r\n\r\n        ]\r\n    }, \r\n\r\n    ItemName: {\r\n        Value: 'abc',\r\n        OptionalValues: [{ Key: 'a', Value: 1 }, { Key: 'b', Value: 2 }]\r\n    }, */\r\n    UnitsQuantity: 10000,\r\n    TotalUnitsPriceAfterDiscount: 20000,\r\n    TSASetPriceForHardContract: 'high price',\r\n    TSALabels: null,\r\n    TSALabelQty: 0,\r\n    TSALabelCode: '',\r\n    TSABagsQty: 4,\r\n    TSAAmountPerBag: 999,\r\n    TSABagPrevValue: 7,\r\n    ItemTSAPackAllIn1Bag: 'all-pack'\r\n\r\n}"
                },
                {
                    "name": "FakeDataOld",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ObjectsDataRowCell[]",
                    "defaultValue": "[\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"GeneralInformation\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 13,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '2',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true,\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"ExternalID\",\r\n        BackgroundColor: \"\",\r\n        Enabled: false,\r\n        FieldType: 1,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true,\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"ActionDateTime\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 6,\r\n        FormattedValue: \"11/22/2021 11:26 AM\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '607483216',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"2021-11-22T09:26:02Z\",\r\n        Visible: true,\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"WrntyID\",\r\n        BackgroundColor: \"\",\r\n        Enabled: false,\r\n        FieldType: 2,\r\n        FormattedValue: \"272764514\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '607492672',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"272764514\",\r\n        Visible: true,\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"TSATsaTextTest\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 1,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '1610126992',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true,\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"DeliveryDate\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 5,\r\n        FormattedValue: \"11/22/2021\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"2021-11-22\",\r\n        Visible: true,\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"AccountInformation\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 13,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '607499200',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true,\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"BranchDbId\",\r\n        BackgroundColor: \"\",\r\n        Enabled: false,\r\n        FieldType: 16,\r\n        FormattedValue: \"12234566686869\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '-1',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"1\",\r\n        Visible: true,\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"BillToName\",\r\n        BackgroundColor: \"\",\r\n        Enabled: false,\r\n        FieldType: 1,\r\n        FormattedValue: \"12234566686869\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '-1',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"12234566686869\",\r\n        Visible: true,\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"ShipToName\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 1,\r\n        FormattedValue: \"12234566686869\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '-1',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"12234566686869\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"BillToAddress\",\r\n        BackgroundColor: \"\",\r\n        Enabled: false,\r\n        FieldType: 14,\r\n        FormattedValue: \"Israel\",\r\n        GroupFields: [\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"BillToCountryIso\",\r\n                BackgroundColor: \"\",\r\n                Enabled: true,\r\n                FieldType: 16,\r\n                FormattedValue: \"Israel\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [{ Key: \"AD\", Value: \"Andorra\" }, { Key: \"IL\", Value: \"Israel\" }],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '1505137882',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"IL\",\r\n                Visible: true,\r\n            },\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"BillToStateIso\",\r\n                BackgroundColor: \"\",\r\n                Enabled: false,\r\n                FieldType: 16,\r\n                FormattedValue: \"\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '1585223436',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"\",\r\n                Visible: true,\r\n            },\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"BillToCity\",\r\n                BackgroundColor: \"\",\r\n                Enabled: true,\r\n                FieldType: 1,\r\n                FormattedValue: \"\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '607497088',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"\",\r\n                Visible: true\r\n            },\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"BillToStreet\",\r\n                BackgroundColor: \"\",\r\n                Enabled: true,\r\n                FieldType: 1,\r\n                FormattedValue: \"\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '0',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"\",\r\n                Visible: true,\r\n            },\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"BillToZipCode\",\r\n                BackgroundColor: \"\",\r\n                Enabled: true,\r\n                FieldType: 1,\r\n                FormattedValue: \"\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '1525717912',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"\",\r\n                Visible: true\r\n            }\r\n        ],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"Israel\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"ShipToAddress\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 14,\r\n        FormattedValue: \"Israel\",\r\n        GroupFields: [\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"ShipToCountryIso\",\r\n                BackgroundColor: \"\",\r\n                Enabled: true,\r\n                FieldType: 16,\r\n                FormattedValue: \"Israel\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [{ Key: \"AD\", Value: \"Andorra\" }, { Key: \"IL\", Value: \"UIsrael\" }],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '-1',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"IL\",\r\n                Visible: true\r\n            },\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"ShipToStateIso\",\r\n                BackgroundColor: \"\",\r\n                Enabled: false,\r\n                FieldType: 16,\r\n                FormattedValue: \"\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '0',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"\",\r\n                Visible: true\r\n            },\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"ShipToCity\",\r\n                BackgroundColor: \"\",\r\n                Enabled: true,\r\n                FieldType: 1,\r\n                FormattedValue: \"\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '0',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"\",\r\n                Visible: true\r\n            },\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"ShipToStreet\",\r\n                BackgroundColor: \"\",\r\n                Enabled: true,\r\n                FieldType: 1,\r\n                FormattedValue: \"\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '0',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"\",\r\n                Visible: true\r\n            },\r\n            {\r\n                Accessory: \"\",\r\n                AdditionalValue: \"\",\r\n                ApiName: \"ShipToZipCode\",\r\n                BackgroundColor: \"\",\r\n                Enabled: true,\r\n                FieldType: 1,\r\n                FormattedValue: \"\",\r\n                GroupFields: [],\r\n                Highlighted: false,\r\n                NotificationInfo: \"\",\r\n                OptionalValues: [],\r\n                ReferenceObjectInternalType: \"\",\r\n                ReferenceObjectSubType: \"\",\r\n                ReferenceObjectType: '1530042974',\r\n                TextColor: \"\",\r\n                UiPageKey: \"\",\r\n                Value: \"\",\r\n                Visible: true\r\n            }\r\n        ],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '-1',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"Israel\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"BillToPhone\",\r\n        BackgroundColor: \"\",\r\n        Enabled: false,\r\n        FieldType: 1,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"ShipToPhone\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 1,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"OrderInformation\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 13,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"TSAImage1\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 20,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"TSAmulti\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 12,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [{ Key: \"ACV\", Value: \"ACV\" }, { Key: \"123\", Value: \"123\" }, { Key: \"DFGH\", Value: \"DFGH\" }],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"TSADropdown\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 11,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [{ Key: \"1\", Value: \"1\" }, { Key: \"23\", Value: \"23\" }, { Key: \"4\", Value: \"4\" }, { Key: \"5\", Value: \"5\" }],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"AccountTSAAccountDropdown\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 11,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [{ Key: \"A\", Value: \"A\" }, { Key: \"B\", Value: \"B\" }, { Key: \"C\", Value: \"C\" }, { Key: \"D\", Value: \"D\" }],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"TSACalculatedNumberbilltocountry\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 7,\r\n        FormattedValue: \"1\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"1\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"TSAUDTTEST\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 3,\r\n        FormattedValue: \"{\\\"success\\\":true}\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"{\\\"success\\\":true}\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"TSAUDTtesttest\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 1,\r\n        FormattedValue: \"Jfnfhdhdhfhfhfhfhf\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"Jfnfhdhdhfhfhfhfhf\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"Signature\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 25,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '2',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true\r\n    },\r\n    {\r\n        Accessory: \"\",\r\n        AdditionalValue: \"\",\r\n        ApiName: \"TSAsignaturetest\",\r\n        BackgroundColor: \"\",\r\n        Enabled: true,\r\n        FieldType: 25,\r\n        FormattedValue: \"\",\r\n        GroupFields: [],\r\n        Highlighted: false,\r\n        NotificationInfo: \"\",\r\n        OptionalValues: [],\r\n        ReferenceObjectInternalType: \"\",\r\n        ReferenceObjectSubType: \"\",\r\n        ReferenceObjectType: '0',\r\n        TextColor: \"\",\r\n        UiPageKey: \"\",\r\n        Value: \"\",\r\n        Visible: true\r\n    }\r\n]"
                },
                {
                    "name": "FakeDataViewFields",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\r\n    {\r\n        FieldID: 'GeneralInformation',\r\n        Type: 'RichTextHTML',\r\n        Title: 'General Information',\r\n        Mandatory: false,\r\n        ReadOnly: false,\r\n        Layout: {\r\n            Origin: {\r\n                X: 0,\r\n                Y: 0\r\n            },\r\n            Size: {\r\n                Width: 2,\r\n                Height: 0\r\n            }\r\n        },\r\n        Style: {\r\n            Alignment: {\r\n                Horizontal: 'Stretch',\r\n                Vertical: 'Stretch'\r\n            }\r\n        },\r\n        AdditionalProps: {\r\n            renderTitle: false,\r\n            renderEnlargeButton: false\r\n        }\r\n    },\r\n    {\r\n        FieldID: 'GeneralInformationTwo',\r\n        Type: 'TextHeader',\r\n        Title: 'Description',\r\n        Mandatory: false,\r\n        ReadOnly: false,\r\n        Layout: {\r\n            Origin: {\r\n                X: 0,\r\n                Y: 1\r\n            },\r\n            Size: {\r\n                Width: 2,\r\n                Height: 0\r\n            }\r\n        },\r\n        Style: {\r\n            Alignment: {\r\n                Horizontal: 'Stretch',\r\n                Vertical: 'Stretch'\r\n            }\r\n        }\r\n    },\r\n    {\r\n        FieldID: 'WrntyID',\r\n        Type: 'LimitedLengthTextBox',\r\n        Title: 'ID',\r\n        Mandatory: false,\r\n        ReadOnly: true,\r\n        Layout: {\r\n            Origin: {\r\n                X: 0,\r\n                Y: 2\r\n            },\r\n            Size: {\r\n                Width: 1,\r\n                Height: 0\r\n            }\r\n        },\r\n        Style: {\r\n            Alignment: {\r\n                Horizontal: 'Stretch',\r\n                Vertical: 'Stretch'\r\n            }\r\n        }\r\n    },\r\n    {\r\n        FieldID: 'TSATsaTextTest',\r\n        Type: 'TextBox',\r\n        Title: 'TSA Tsa Text Test',\r\n        Mandatory: true,\r\n        ReadOnly: false,\r\n        Layout: {\r\n            Origin: {\r\n                X: 1,\r\n                Y: 2\r\n            },\r\n            Size: {\r\n                Width: 1,\r\n                Height: 0\r\n            }\r\n        },\r\n        Style: {\r\n            Alignment: {\r\n                Horizontal: 'Stretch',\r\n                Vertical: 'Stretch'\r\n            }\r\n        }\r\n    },\r\n    {\r\n        FieldID: 'ButtunTest',\r\n        Type: 'Button',\r\n        Title: 'TSA Tsa Btn Test',\r\n        Mandatory: true,\r\n        ReadOnly: false,\r\n        Layout: {\r\n            Origin: {\r\n                X: 0,\r\n                Y: 3\r\n            },\r\n            Size: {\r\n                Width: 2,\r\n                Height: 0\r\n            }\r\n        },\r\n        Style: {\r\n            Alignment: {\r\n                Horizontal: 'Stretch',\r\n                Vertical: 'Stretch'\r\n            }\r\n        },\r\n        \r\n    }\r\n]"
                },
                {
                    "name": "uiControlData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n    Type: 'Form',\r\n    // Columns: 2,\r\n    ControlFields: [{\r\n        ApiName: \"GeneralInformation\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"\",\r\n        FieldType: 13,\r\n        Layout: { Height: 1, LineNumber: 0, Width: 2, X: 0, XAlignment: 0, Y: 0, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 0,\r\n        Width: 2,\r\n        X: 0,\r\n        XAlignment: 0,\r\n        Y: 0,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 100,\r\n        MinValue: 0,\r\n        ReadOnly: false,\r\n        Title: \"General Information\"\r\n    },\r\n    {\r\n        ApiName: \"ExternalID\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"External ID\",\r\n        FieldType: 1,\r\n        Layout: { Height: 1, LineNumber: 1, Width: 1, X: 0, XAlignment: 0, Y: 1, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 1,\r\n        Width: 1,\r\n        X: 0,\r\n        XAlignment: 0,\r\n        Y: 1,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: true,\r\n        Title: \"External ID\"\r\n    },\r\n    {\r\n        ApiName: \"ActionDateTime\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Action Time\",\r\n        FieldType: 6,\r\n        Layout: { Height: 1, LineNumber: 1, Width: 1, X: 1, XAlignment: 0, Y: 1, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 1,\r\n        Width: 1,\r\n        X: 1,\r\n        XAlignment: 0,\r\n        Y: 1,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Action Time\"\r\n    },\r\n    {\r\n        ApiName: \"WrntyID\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"ID\",\r\n        FieldType: 2,\r\n        Layout: { Height: 1, LineNumber: 2, Width: 1, X: 0, XAlignment: 0, Y: 2, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 2,\r\n        Width: 1,\r\n        X: 0,\r\n        XAlignment: 0,\r\n        Y: 2,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: true,\r\n        Title: \"ID\"\r\n    },\r\n    {\r\n        ApiName: \"TSATsaTextTest\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"TsaTextTest\",\r\n        FieldType: 1,\r\n        Layout: { Height: 1, LineNumber: 2, Width: 1, X: 1, XAlignment: 0, Y: 2, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 2,\r\n        Width: 1,\r\n        X: 1,\r\n        XAlignment: 0,\r\n        Y: 2,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"TsaTextTest\"\r\n    },\r\n    {\r\n        ApiName: \"DeliveryDate\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Delivery Date\",\r\n        FieldType: 5,\r\n        Layout: { Height: 1, LineNumber: 3, Width: 2, X: 0, XAlignment: 0, Y: 3, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 3,\r\n        Width: 2,\r\n        X: 0,\r\n        XAlignment: 0,\r\n        Y: 3,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Delivery Date\"\r\n    },\r\n    {\r\n        ApiName: \"AccountInformation\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"\",\r\n        FieldType: 13,\r\n        Layout: { Height: 1, LineNumber: 4, Width: 2, X: 0, XAlignment: 0, Y: 4, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 4,\r\n        Width: 2,\r\n        X: 0,\r\n        XAlignment: 0,\r\n        Y: 4,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 100,\r\n        MinValue: 0,\r\n        ReadOnly: false,\r\n        Title: \"Account Information\"\r\n    },\r\n    {\r\n        ApiName: \"BranchDbId\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Branch\",\r\n        FieldType: 16,\r\n        Layout: { Height: 1, LineNumber: 5, Width: 1, X: 1, XAlignment: 0, Y: 5, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 5,\r\n        Width: 1,\r\n        X: 1,\r\n        XAlignment: 0,\r\n        Y: 5,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Branch\"\r\n    },\r\n    {\r\n        ApiName: \"BillToName\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Bill to Name\",\r\n        FieldType: 1,\r\n        Layout: { Height: 1, LineNumber: 6, Width: 1, X: 0, XAlignment: 0, Y: 6, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 6,\r\n        Width: 1,\r\n        X: 0,\r\n        XAlignment: 0,\r\n        Y: 6,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: true,\r\n        Title: \"Bill to Name\"\r\n    },\r\n    {\r\n        ApiName: \"ShipToName\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Ship to Name\",\r\n        FieldType: 1,\r\n        Layout: { Height: 1, LineNumber: 6, Width: 1, X: 1, XAlignment: 0, Y: 6, YAlignment: 3 },\r\n        Height: 1,\r\n        LineNumber: 6,\r\n        Width: 1,\r\n        X: 1,\r\n        XAlignment: 0,\r\n        Y: 6,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Ship to Name\"\r\n    },\r\n    {\r\n        ApiName: \"BillToAddress\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Bill to Address\",\r\n        FieldType: 14,\r\n        Layout: { Height: 2, LineNumber: 7, Width: 1, X: 0, XAlignment: 0, Y: 7, YAlignment: 3 },\r\n        Height: 2,\r\n        LineNumber: 7,\r\n        Width: 1,\r\n        X: 0,\r\n        XAlignment: 0,\r\n        Y: 7,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: true,\r\n        Title: \"Bill to Address\"\r\n    },\r\n    {\r\n        ApiName: \"ShipToAddress\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Ship to Address\",\r\n        FieldType: 14,\r\n        Layout: { Height: 2, LineNumber: 7, Width: 1, X: 1, XAlignment: 0, Y: 7, YAlignment: 3 },\r\n        Height: 2,\r\n        LineNumber: 7,\r\n        Width: 1,\r\n        X: 1,\r\n        XAlignment: 0,\r\n        Y: 7,\r\n        YAlignment: 3,\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Ship to Address\"\r\n    },\r\n    {\r\n        ApiName: \"BillToPhone\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Bill to Phone\",\r\n        FieldType: 1,\r\n        Layout: { Height: 1, LineNumber: 8, Width: 1, X: 0, XAlignment: 0, Y: 10, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: true,\r\n        Title: \"Bill to Phone\",\r\n    },\r\n    {\r\n        ApiName: \"ShipToPhone\",\r\n        ColumnWidth: 1,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Ship to Phone\",\r\n        FieldType: 1,\r\n        Layout: { Height: 1, LineNumber: 8, Width: 1, X: 1, XAlignment: 0, Y: 10, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Ship to Phone\"\r\n    },\r\n    {\r\n        ApiName: \"OrderInformation\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"\",\r\n        FieldType: 13,\r\n        Layout: { Height: 1, LineNumber: 9, Width: 2, X: 0, XAlignment: 0, Y: 11, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 100,\r\n        MinValue: 0,\r\n        ReadOnly: false,\r\n        Title: \"Order Information\"\r\n    },\r\n    {\r\n        ApiName: \"TSAImage1\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Image1\",\r\n        FieldType: 20,\r\n        Layout: { Height: 4, LineNumber: 10, Width: 2, X: 0, XAlignment: 0, Y: 12, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Image1\"\r\n    },\r\n    {\r\n        ApiName: \"TSAmulti\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"multi\",\r\n        FieldType: 12,\r\n        Layout: { Height: 1, LineNumber: 11, Width: 2, X: 0, XAlignment: 0, Y: 16, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"multi\",\r\n    },\r\n    {\r\n        ApiName: \"TSADropdown\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Dropdown\",\r\n        FieldType: 11,\r\n        Layout: { Height: 1, LineNumber: 12, Width: 2, X: 0, XAlignment: 0, Y: 17, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Dropdown\"\r\n    },\r\n    {\r\n        ApiName: \"AccountTSAAccountDropdown\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Account Account Dropdown\",\r\n        FieldType: 11,\r\n        Layout: { Height: 1, LineNumber: 13, Width: 2, X: 0, XAlignment: 0, Y: 18, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Account Dropdown\"\r\n    },\r\n    {\r\n        ApiName: \"TSACalculatedNumberbilltocountry\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Calculated Number bill to country\",\r\n        FieldType: 7,\r\n        Layout: { Height: 1, LineNumber: 14, Width: 2, X: 0, XAlignment: 0, Y: 19, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Calculated Number bill to country\"\r\n    },\r\n    {\r\n        ApiName: \"TSAUDTTEST\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"UDT TEST\",\r\n        FieldType: 3,\r\n        Layout: { Height: 2, LineNumber: 15, Width: 2, X: 0, XAlignment: 0, Y: 20, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"UDT TEST\"\r\n    },\r\n    {\r\n        ApiName: \"TSAUDTtesttest\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"UDTtesttest\",\r\n        FieldType: 1,\r\n        Layout: { Height: 1, LineNumber: 16, Width: 2, X: 0, XAlignment: 0, Y: 22, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"UDTtesttest\"\r\n    },\r\n    {\r\n        ApiName: \"Signature\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"Signature\",\r\n        FieldType: 25,\r\n        Layout: { Height: 2, LineNumber: 17, Width: 2, X: 0, XAlignment: 0, Y: 23, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"Signature\"\r\n    },\r\n    {\r\n        ApiName: \"TSAsignaturetest\",\r\n        ColumnWidth: 2,\r\n        ColumnWidthType: 0,\r\n        FieldName: \"signaturetest\",\r\n        FieldType: 25,\r\n        Layout: { Height: 2, LineNumber: 18, Width: 2, X: 0, XAlignment: 0, Y: 25, YAlignment: 3 },\r\n        Mandatory: false,\r\n        MaxFieldCharacters: 0,\r\n        MaxFieldLines: 0,\r\n        MaxValue: 1000000000,\r\n        MinValue: -1000000000,\r\n        ReadOnly: false,\r\n        Title: \"signaturetest\"\r\n    }\r\n    ]\r\n}"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
                }
            ],
            "projects/ngx-composite-lib/data-view-builder/data-view-builder.module.ts": [
                {
                    "name": "pepIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/data-view-builder/data-view-builder.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    pepIconSystemClose,\r\n    pepIconArrowDownAlt,\r\n    pepIconSystemBin,\r\n    pepIconNumberPlus\r\n]"
                }
            ],
            "projects/ngx-composite-lib/file-status-panel/file-status-panel.module.ts": [
                {
                    "name": "pepIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    pepIconArrowRightAlt,\r\n]"
                }
            ],
            "projects/ngx-composite-lib/generic-list/generic-list.module.ts": [
                {
                    "name": "pepIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-list/generic-list.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    pepIconLeafRound,\r\n    pepIconLeafSkiny, pepIconSystemView\r\n]"
                }
            ],
            "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.module.ts": [
                {
                    "name": "pepIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    pepIconTextAlignCenter, \r\n    pepIconTextAlignLeft, \r\n    pepIconTextAlignRight,\r\n    pepIconArrowRightAlt,\r\n    pepIconArrowLeftAlt\r\n]"
                }
            ],
            "projects/ngx-composite-lib/rich-text/rich-text.module.ts": [
                {
                    "name": "pepIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/rich-text/rich-text.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    pepIconSystemImage\r\n]"
                }
            ],
            "projects/ngx-composite-lib/show-if-badge/show-if-badge.module.ts": [
                {
                    "name": "pepIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/show-if-badge/show-if-badge.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    pepIconSystemView\r\n]"
                }
            ],
            "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts": [
                {
                    "name": "pepIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    pepIconSystemBolt,\r\n    pepIconNoImage,\r\n    pepIconNoImage2,\r\n    pepIconArrowTwoWaysVerT,\r\n    pepIconArrowDown,\r\n    pepIconArrowUp,\r\n    pepIconArrowRightAlt,\r\n    pepIconArrowLeftAlt,\r\n    pepIconArrowDownAlt,\r\n    pepIconArrowUpAlt,\r\n    pepIconNumberNumber,\r\n    pepIconNumberPlus,\r\n    pepIconSystemBin,\r\n    pepIconSystemEdit,\r\n    pepIconSystemClose,\r\n    pepIconSystemFilter,\r\n    pepIconSystemMenu,\r\n    pepIconSystemHome,\r\n    pepIconSystemSettings,\r\n    pepIconSystemQuestion,\r\n    pepIconSystemAvatar,\r\n    pepIconSystemDoor,\r\n    pepIconSystemPrint,\r\n    pepIconSystemSearch,\r\n    pepIconSystemSpinner,\r\n    pepIconSystemInfo,\r\n    pepIconShoppingCart,\r\n    pepIconTimeCal,\r\n    pepIconViewCardLg,\r\n    pepIconViewCardMd,\r\n    pepIconViewCardSm,\r\n    pepIconViewTable,\r\n    pepIconViewMatrix,\r\n    pepIconViewLine,\r\n]"
                },
                {
                    "name": "pepperiComponentsModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    PepAttachmentModule,\r\n    PepCarouselModule,\r\n    PepBreadCrumbsModule,\r\n    PepButtonModule,\r\n    PepCheckboxModule,\r\n    PepColorModule,\r\n    PepDateModule,\r\n    PepGroupButtonsModule,\r\n    PepImageModule,\r\n    PepImagesFilmstripModule,\r\n    PepListModule,\r\n    PepCheckboxModule,\r\n    PepQuantitySelectorModule,\r\n    PepRichHtmlTextareaModule,\r\n    PepSearchModule,\r\n    PepSelectModule,\r\n    PepSeparatorModule,\r\n    PepSliderModule,\r\n    PepSideBarModule,\r\n    PepSignatureModule,\r\n    PepSizeDetectorModule,\r\n    PepTextareaModule,\r\n    PepTextboxModule,\r\n    PepIconModule,\r\n    PepMenuModule,\r\n    PepTopBarModule,\r\n    PepPageLayoutModule,\r\n    PepSmartFiltersModule,\r\n    PepFormModule\r\n]"
                }
            ],
            "projects/ngx-composite-lib/src/ngx-composite-lib.module.ts": [
                {
                    "name": "utilitiesList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/src/ngx-composite-lib.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    PepResetConfigurationFieldDirective\r\n]"
                }
            ]
        },
        "groupedFunctions": {
            "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts": [
                {
                    "name": "getSnackBarData",
                    "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initSnackBarService",
                    "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "sb",
                            "type": "PepSnackBarService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "sb",
                            "type": "PepSnackBarService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openFilePanel",
                    "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/ngx-composite-lib/file-status-panel/file-status-panel.model.ts": [
                {
                    "name": "FileStatusType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"uploading\" | \"downloading\" | \"done\" | \"failed\" | \"hidden\" | \"deleting\"",
                    "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/ngx-composite-lib/manage-parameters/manage-parameters.model.ts": [
                {
                    "name": "ParameterFormType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"add\" | \"edit\"",
                    "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/ngx-composite-lib/data-view-builder/data-view-builder.model.ts": [
                {
                    "name": "PepDataViewBuilderType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"menu\" | \"list\" | \"card\" | \"not-supported\"",
                    "file": "projects/ngx-composite-lib/data-view-builder/data-view-builder.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.model.ts": [
                {
                    "name": "PepGroupbuttonsTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sizes\" | \"font-weight\" | \"width-sizes\" | \"vertical-align\" | \"horizontal-align\" | \"left-right-arrows\" | \"boolean\" | \"custom\"",
                    "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/ngx-composite-lib/shadow-settings/shadow-settings.model.ts": [
                {
                    "name": "PepShadowIntensityType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"soft\" | \"regular\" | \"hard\"",
                    "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "projects/ngx-composite-lib-tester/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepperiComponentsModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/components-example/components-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentsExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/data-view-builder-example/data-view-builder-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DataViewBuilderExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeDataOld",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeDataViewFields",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uiControlData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-form-example/generic-form-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenericFormExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeCardsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeCardsDataView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeLineData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeLineDataView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeSmartFilterFields",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-list-example/generic-list-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenericListExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/42",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/color-settings/color-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/color-settings/color-settings.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepColorSettings",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/color-settings/color-settings.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/color-settings/color-settings.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Story1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/color-settings/color-settings.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Story2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/color-settings/color-settings.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/data-view-builder/data-view-builder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DataViewBuilderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/data-view-builder/data-view-builder.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/data-view-builder/data-view-builder.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataViewBuilderService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/data-view-builder/data-view-builder.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/data-view-builder/data-view-builder.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/data-view-builder/menu-data-view/menu-data-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuDataViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/file-status-panel/file-status-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileStatusPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/file-status-panel/file-status-panel.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FileStatus",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/file-status-panel/file-status-panel.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getSnackBarData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initSnackBarService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "openFilePanel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "snackBarRef",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "snackBarService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Story1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Story2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/file-status-panel/file-status-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/flow-picker-button/flow-picker-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FlowPickerButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/flow-picker-button/flow-picker-button.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FlowPickerService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenericFormComponent",
                "coveragePercent": 8,
                "coverageCount": "2/25",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericFormData",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericFormDataParams",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericFormDataView",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericFormDataViewField",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericFormFieldUpdate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericFormValueChange",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepGenericFormService",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Story1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenericListComponent",
                "coveragePercent": 5,
                "coverageCount": "4/78",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListActions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListDataRow",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListDataSource",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListDataViewField",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListEmptyState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListInitData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListListInputs",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListPager",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListParams",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListSmartFilter",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepSmartFilters",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepGenericListService",
                "coveragePercent": 10,
                "coverageCount": "1/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "breadCrumbsItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CompactMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoDataFoundMsg",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pager",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SmartFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ZebraStripes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupButtonsSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Story1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/icon-picker/icon-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconPickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/icon-picker/icon-picker.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FlowPickerService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/manage-parameters/manage-parameter/manage-parameter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ManageParameterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/manage-parameters/manage-parameters.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ManageParametersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/manage-parameters/manage-parameters.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IParamemeter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/manage-parameters/manage-parameters.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IParameterFormData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/manage-parameters/manage-parameters.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IParametersColumn",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/manage-parameters/manage-parameters.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ManageParametersService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/manage-parameters/manage-parameters.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/manage-parameters/manage-parameters.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Story1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/manage-parameters/manage-parameters.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/rich-text/rich-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RichTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/rich-text/rich-text.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/rich-text/rich-text.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RichTextService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/rich-text/rich-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/rich-text/rich-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Story1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/rich-text/rich-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Story2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/rich-text/rich-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Story3",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/rich-text/rich-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/shadow-settings/shadow-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShadowSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/shadow-settings/shadow-settings.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepShadowSettings",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/shadow-settings/shadow-settings.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/shadow-settings/shadow-settings.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/show-if-badge/show-if-badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShowIfBadgeComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/show-if-badge/show-if-badge.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/show-if-badge/show-if-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/show-if-badge/show-if-badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/directives/reset-configuration-field.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PepResetConfigurationFieldDirective",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepDIMXHelperService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DIMXExportOptions",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DIMXHostObject",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DIMXImportOptions",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DIMXRecursiveExportOptions",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DIMXRecursiveImportOptions",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/services/utilities.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepCompositeLibUtilitiesService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/ngx-composite-lib.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "utilitiesList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}