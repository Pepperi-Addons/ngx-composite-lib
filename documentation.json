{
    "pipes": [],
    "interfaces": [
        {
            "name": "DIMXExportOptions",
            "id": "interface-DIMXExportOptions-e366b4038f7b1d782e30f684ceb98b986524ebd5fc9855acf616b4aaec74f5ea887b51fec31d67460a3eb0487a141f37866229e7219ea6d5e3ca3d9122ef846c",
            "file": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, ViewContainerRef } from \"@angular/core\";\r\nimport { PepAddonBlockLoaderService } from \"@pepperi-addons/ngx-lib/remote-loader\";\r\n\r\nexport interface DIMXHostObject {\r\n    DIMXAddonUUID: string;\r\n    DIMXResource: string;\r\n}\r\n\r\nexport interface DIMXImportOptions {\r\n    OverwriteObject?: boolean;\r\n    Delimiter?: string;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveImportOptions {\r\n    OverwriteObject?: boolean;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXExportOptions {\r\n    DIMXExportFormat?: string;\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    DIMXExportDelimiter?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveExportOptions {\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\n@Injectable()\r\nexport class PepDIMXHelperService {\r\n    private dimxFunctions!: {\r\n        DIMXImport: (options?: DIMXImportOptions) => void,\r\n        DIMXRecursiveImport: (options?: DIMXRecursiveImportOptions) => void,\r\n        DIMXExport: (options?: DIMXExportOptions) => void,\r\n        DIMXRecursiveExport: (options?: DIMXRecursiveExportOptions) => void\r\n    };\r\n\r\n    constructor(\r\n        private addonBlockLoaderService: PepAddonBlockLoaderService\r\n    ) {\r\n    }\r\n\r\n    register(viewContainerRef: ViewContainerRef, dimxHostObject: DIMXHostObject, onDIMXProcessDoneCallback: (dimxEvent: any) => void) {\r\n        return this.addonBlockLoaderService.loadAddonBlockInContainer({\r\n            container: viewContainerRef,\r\n            name: 'DIMX',\r\n            hostObject: dimxHostObject,\r\n            hostEventsCallback: (event: any) => {\r\n                if (event.action === 'DIMXFunctionsRegister') {\r\n                    this.dimxFunctions = event.value;\r\n                } else if (event.action === 'DIMXProcessDone') {\r\n                    onDIMXProcessDoneCallback(event.value);\r\n                } else {\r\n                    console.error('Unknown event action: ' + event.action);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    import(options?: DIMXImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXImport) === 'function') {\r\n            this.dimxFunctions.DIMXImport(options);\r\n        } else {\r\n            console.error('DIMXImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_import(options?: DIMXRecursiveImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveImport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveImport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    export(options?: DIMXExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXExport) === 'function') {\r\n            this.dimxFunctions.DIMXExport(options);\r\n        } else {\r\n            console.error('DIMXExport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_export(options?: DIMXRecursiveExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveExport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveExport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveExport function not found, are you registered?');\r\n        }\r\n    }\r\n}",
            "properties": [
                {
                    "name": "ActionID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "AdditionalData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "DIMXExportDelimiter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "DIMXExportFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "DIMXExportFileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "DIMXExportFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "DIMXExportIncludeDeleted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "DIMXExportWhere",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DIMXHostObject",
            "id": "interface-DIMXHostObject-e366b4038f7b1d782e30f684ceb98b986524ebd5fc9855acf616b4aaec74f5ea887b51fec31d67460a3eb0487a141f37866229e7219ea6d5e3ca3d9122ef846c",
            "file": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, ViewContainerRef } from \"@angular/core\";\r\nimport { PepAddonBlockLoaderService } from \"@pepperi-addons/ngx-lib/remote-loader\";\r\n\r\nexport interface DIMXHostObject {\r\n    DIMXAddonUUID: string;\r\n    DIMXResource: string;\r\n}\r\n\r\nexport interface DIMXImportOptions {\r\n    OverwriteObject?: boolean;\r\n    Delimiter?: string;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveImportOptions {\r\n    OverwriteObject?: boolean;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXExportOptions {\r\n    DIMXExportFormat?: string;\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    DIMXExportDelimiter?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveExportOptions {\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\n@Injectable()\r\nexport class PepDIMXHelperService {\r\n    private dimxFunctions!: {\r\n        DIMXImport: (options?: DIMXImportOptions) => void,\r\n        DIMXRecursiveImport: (options?: DIMXRecursiveImportOptions) => void,\r\n        DIMXExport: (options?: DIMXExportOptions) => void,\r\n        DIMXRecursiveExport: (options?: DIMXRecursiveExportOptions) => void\r\n    };\r\n\r\n    constructor(\r\n        private addonBlockLoaderService: PepAddonBlockLoaderService\r\n    ) {\r\n    }\r\n\r\n    register(viewContainerRef: ViewContainerRef, dimxHostObject: DIMXHostObject, onDIMXProcessDoneCallback: (dimxEvent: any) => void) {\r\n        return this.addonBlockLoaderService.loadAddonBlockInContainer({\r\n            container: viewContainerRef,\r\n            name: 'DIMX',\r\n            hostObject: dimxHostObject,\r\n            hostEventsCallback: (event: any) => {\r\n                if (event.action === 'DIMXFunctionsRegister') {\r\n                    this.dimxFunctions = event.value;\r\n                } else if (event.action === 'DIMXProcessDone') {\r\n                    onDIMXProcessDoneCallback(event.value);\r\n                } else {\r\n                    console.error('Unknown event action: ' + event.action);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    import(options?: DIMXImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXImport) === 'function') {\r\n            this.dimxFunctions.DIMXImport(options);\r\n        } else {\r\n            console.error('DIMXImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_import(options?: DIMXRecursiveImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveImport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveImport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    export(options?: DIMXExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXExport) === 'function') {\r\n            this.dimxFunctions.DIMXExport(options);\r\n        } else {\r\n            console.error('DIMXExport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_export(options?: DIMXRecursiveExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveExport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveExport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveExport function not found, are you registered?');\r\n        }\r\n    }\r\n}",
            "properties": [
                {
                    "name": "DIMXAddonUUID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "DIMXResource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DIMXImportOptions",
            "id": "interface-DIMXImportOptions-e366b4038f7b1d782e30f684ceb98b986524ebd5fc9855acf616b4aaec74f5ea887b51fec31d67460a3eb0487a141f37866229e7219ea6d5e3ca3d9122ef846c",
            "file": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, ViewContainerRef } from \"@angular/core\";\r\nimport { PepAddonBlockLoaderService } from \"@pepperi-addons/ngx-lib/remote-loader\";\r\n\r\nexport interface DIMXHostObject {\r\n    DIMXAddonUUID: string;\r\n    DIMXResource: string;\r\n}\r\n\r\nexport interface DIMXImportOptions {\r\n    OverwriteObject?: boolean;\r\n    Delimiter?: string;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveImportOptions {\r\n    OverwriteObject?: boolean;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXExportOptions {\r\n    DIMXExportFormat?: string;\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    DIMXExportDelimiter?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveExportOptions {\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\n@Injectable()\r\nexport class PepDIMXHelperService {\r\n    private dimxFunctions!: {\r\n        DIMXImport: (options?: DIMXImportOptions) => void,\r\n        DIMXRecursiveImport: (options?: DIMXRecursiveImportOptions) => void,\r\n        DIMXExport: (options?: DIMXExportOptions) => void,\r\n        DIMXRecursiveExport: (options?: DIMXRecursiveExportOptions) => void\r\n    };\r\n\r\n    constructor(\r\n        private addonBlockLoaderService: PepAddonBlockLoaderService\r\n    ) {\r\n    }\r\n\r\n    register(viewContainerRef: ViewContainerRef, dimxHostObject: DIMXHostObject, onDIMXProcessDoneCallback: (dimxEvent: any) => void) {\r\n        return this.addonBlockLoaderService.loadAddonBlockInContainer({\r\n            container: viewContainerRef,\r\n            name: 'DIMX',\r\n            hostObject: dimxHostObject,\r\n            hostEventsCallback: (event: any) => {\r\n                if (event.action === 'DIMXFunctionsRegister') {\r\n                    this.dimxFunctions = event.value;\r\n                } else if (event.action === 'DIMXProcessDone') {\r\n                    onDIMXProcessDoneCallback(event.value);\r\n                } else {\r\n                    console.error('Unknown event action: ' + event.action);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    import(options?: DIMXImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXImport) === 'function') {\r\n            this.dimxFunctions.DIMXImport(options);\r\n        } else {\r\n            console.error('DIMXImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_import(options?: DIMXRecursiveImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveImport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveImport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    export(options?: DIMXExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXExport) === 'function') {\r\n            this.dimxFunctions.DIMXExport(options);\r\n        } else {\r\n            console.error('DIMXExport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_export(options?: DIMXRecursiveExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveExport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveExport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveExport function not found, are you registered?');\r\n        }\r\n    }\r\n}",
            "properties": [
                {
                    "name": "ActionID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "AdditionalData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "Delimiter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "OverwriteObject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "OwnerID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DIMXRecursiveExportOptions",
            "id": "interface-DIMXRecursiveExportOptions-e366b4038f7b1d782e30f684ceb98b986524ebd5fc9855acf616b4aaec74f5ea887b51fec31d67460a3eb0487a141f37866229e7219ea6d5e3ca3d9122ef846c",
            "file": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, ViewContainerRef } from \"@angular/core\";\r\nimport { PepAddonBlockLoaderService } from \"@pepperi-addons/ngx-lib/remote-loader\";\r\n\r\nexport interface DIMXHostObject {\r\n    DIMXAddonUUID: string;\r\n    DIMXResource: string;\r\n}\r\n\r\nexport interface DIMXImportOptions {\r\n    OverwriteObject?: boolean;\r\n    Delimiter?: string;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveImportOptions {\r\n    OverwriteObject?: boolean;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXExportOptions {\r\n    DIMXExportFormat?: string;\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    DIMXExportDelimiter?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveExportOptions {\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\n@Injectable()\r\nexport class PepDIMXHelperService {\r\n    private dimxFunctions!: {\r\n        DIMXImport: (options?: DIMXImportOptions) => void,\r\n        DIMXRecursiveImport: (options?: DIMXRecursiveImportOptions) => void,\r\n        DIMXExport: (options?: DIMXExportOptions) => void,\r\n        DIMXRecursiveExport: (options?: DIMXRecursiveExportOptions) => void\r\n    };\r\n\r\n    constructor(\r\n        private addonBlockLoaderService: PepAddonBlockLoaderService\r\n    ) {\r\n    }\r\n\r\n    register(viewContainerRef: ViewContainerRef, dimxHostObject: DIMXHostObject, onDIMXProcessDoneCallback: (dimxEvent: any) => void) {\r\n        return this.addonBlockLoaderService.loadAddonBlockInContainer({\r\n            container: viewContainerRef,\r\n            name: 'DIMX',\r\n            hostObject: dimxHostObject,\r\n            hostEventsCallback: (event: any) => {\r\n                if (event.action === 'DIMXFunctionsRegister') {\r\n                    this.dimxFunctions = event.value;\r\n                } else if (event.action === 'DIMXProcessDone') {\r\n                    onDIMXProcessDoneCallback(event.value);\r\n                } else {\r\n                    console.error('Unknown event action: ' + event.action);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    import(options?: DIMXImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXImport) === 'function') {\r\n            this.dimxFunctions.DIMXImport(options);\r\n        } else {\r\n            console.error('DIMXImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_import(options?: DIMXRecursiveImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveImport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveImport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    export(options?: DIMXExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXExport) === 'function') {\r\n            this.dimxFunctions.DIMXExport(options);\r\n        } else {\r\n            console.error('DIMXExport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_export(options?: DIMXRecursiveExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveExport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveExport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveExport function not found, are you registered?');\r\n        }\r\n    }\r\n}",
            "properties": [
                {
                    "name": "ActionID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "AdditionalData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "DIMXExportFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "DIMXExportFileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "DIMXExportIncludeDeleted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "DIMXExportWhere",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DIMXRecursiveImportOptions",
            "id": "interface-DIMXRecursiveImportOptions-e366b4038f7b1d782e30f684ceb98b986524ebd5fc9855acf616b4aaec74f5ea887b51fec31d67460a3eb0487a141f37866229e7219ea6d5e3ca3d9122ef846c",
            "file": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, ViewContainerRef } from \"@angular/core\";\r\nimport { PepAddonBlockLoaderService } from \"@pepperi-addons/ngx-lib/remote-loader\";\r\n\r\nexport interface DIMXHostObject {\r\n    DIMXAddonUUID: string;\r\n    DIMXResource: string;\r\n}\r\n\r\nexport interface DIMXImportOptions {\r\n    OverwriteObject?: boolean;\r\n    Delimiter?: string;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveImportOptions {\r\n    OverwriteObject?: boolean;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXExportOptions {\r\n    DIMXExportFormat?: string;\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    DIMXExportDelimiter?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveExportOptions {\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\n@Injectable()\r\nexport class PepDIMXHelperService {\r\n    private dimxFunctions!: {\r\n        DIMXImport: (options?: DIMXImportOptions) => void,\r\n        DIMXRecursiveImport: (options?: DIMXRecursiveImportOptions) => void,\r\n        DIMXExport: (options?: DIMXExportOptions) => void,\r\n        DIMXRecursiveExport: (options?: DIMXRecursiveExportOptions) => void\r\n    };\r\n\r\n    constructor(\r\n        private addonBlockLoaderService: PepAddonBlockLoaderService\r\n    ) {\r\n    }\r\n\r\n    register(viewContainerRef: ViewContainerRef, dimxHostObject: DIMXHostObject, onDIMXProcessDoneCallback: (dimxEvent: any) => void) {\r\n        return this.addonBlockLoaderService.loadAddonBlockInContainer({\r\n            container: viewContainerRef,\r\n            name: 'DIMX',\r\n            hostObject: dimxHostObject,\r\n            hostEventsCallback: (event: any) => {\r\n                if (event.action === 'DIMXFunctionsRegister') {\r\n                    this.dimxFunctions = event.value;\r\n                } else if (event.action === 'DIMXProcessDone') {\r\n                    onDIMXProcessDoneCallback(event.value);\r\n                } else {\r\n                    console.error('Unknown event action: ' + event.action);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    import(options?: DIMXImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXImport) === 'function') {\r\n            this.dimxFunctions.DIMXImport(options);\r\n        } else {\r\n            console.error('DIMXImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_import(options?: DIMXRecursiveImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveImport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveImport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    export(options?: DIMXExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXExport) === 'function') {\r\n            this.dimxFunctions.DIMXExport(options);\r\n        } else {\r\n            console.error('DIMXExport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_export(options?: DIMXRecursiveExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveExport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveExport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveExport function not found, are you registered?');\r\n        }\r\n    }\r\n}",
            "properties": [
                {
                    "name": "ActionID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "AdditionalData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "OverwriteObject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "OwnerID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IParamemeter",
            "id": "interface-IParamemeter-8bdec15e0c0d59458e3440bac140f3364c68f3e88abdc5d01c50f82ef571f3840a8546c1062f3699660b0692d0d44310a6ae34ed255c0e59d15f76215223db52",
            "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DataViewFieldType, SchemeFieldType } from \"@pepperi-addons/papi-sdk\";\r\n\r\n// import { DebugFlowResult, FlowObject, LogicBlock } from \"shared\";\r\n// import { IPepDraggableItem } from \"@pepperi-addons/ngx-lib/draggable-items\";\r\n// import { PepStyleType } from \"@pepperi-addons/ngx-lib\";\r\n\r\n// export interface LogicBlockEditorOptions extends IAddonBlockLoaderDialogOptions {\r\n//     block: LogicBlock;\r\n// }\r\n\r\n// export interface LogicBlockRelation extends NgComponentRelation {\r\n//     BlockExecutionRelativeURL: string;\r\n// }\r\n\r\n// export type ActionType = 'Add' | 'Edit' | 'Delete' | 'Duplicate' | 'Logs' | 'Test';\r\n\r\n// export interface ActionClickedEventData {\r\n//     ActionType: ActionType,\r\n//     ItemKey?: string\r\n// }\r\n\r\n// export const GL_PAGE_SIZE = 30;\r\n// export const API_PAGE_SIZE = 100;\r\n// export const SELECTION_FIELD_PREFIX = 'ValueSelectionType_';\r\n\r\n// export const SECOND = 1000;\r\n// export const MINUTE = 60 * SECOND;\r\n\r\nexport type ParameterFormType = 'add' | 'edit';\r\n\r\nexport interface IParametersColumn {\r\n    Key: string; // This is the property name of the parameter.\r\n    Title: string;\r\n    Type: DataViewFieldType,\r\n    Width: number;\r\n}\r\n\r\nexport interface IParamemeter {\r\n    Key: string;\r\n    Type: SchemeFieldType;\r\n    Description?: string;\r\n    DefaultValue: any;\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface IParameterFormData {\r\n    Mode: ParameterFormType;\r\n    Parameter: IParamemeter;\r\n    ShowType?: boolean;\r\n    ShowAccessibility?: boolean;\r\n}\r\n\r\n// export interface FlowDraggableItem extends IPepDraggableItem {\r\n//     data: {\r\n//         key: string;\r\n//         addonUUID: string;\r\n//         blockExecutionRelativeURL: string;\r\n//         moduleName: string;\r\n//         componentName: string;\r\n//     }\r\n// }\r\n\r\n// export interface FlowPickerData {\r\n//     runFlowData?: FlowObject\r\n//     fields?: AddonDataScheme['Fields']\r\n// }\r\n\r\n// export interface PageTitleButton {\r\n//     Key: string;\r\n//     Title: string;\r\n//     StyleType: PepStyleType;\r\n//     Disabled: boolean\r\n// }\r\n\r\n// export type PollResultCallback = (status: DebugFlowResult)=> void;",
            "properties": [
                {
                    "name": "DefaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "Description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "Key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "Type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SchemeFieldType",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-8bdec15e0c0d59458e3440bac140f3364c68f3e88abdc5d01c50f82ef571f3840a8546c1062f3699660b0692d0d44310a6ae34ed255c0e59d15f76215223db52",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "IParameterFormData",
            "id": "interface-IParameterFormData-8bdec15e0c0d59458e3440bac140f3364c68f3e88abdc5d01c50f82ef571f3840a8546c1062f3699660b0692d0d44310a6ae34ed255c0e59d15f76215223db52",
            "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DataViewFieldType, SchemeFieldType } from \"@pepperi-addons/papi-sdk\";\r\n\r\n// import { DebugFlowResult, FlowObject, LogicBlock } from \"shared\";\r\n// import { IPepDraggableItem } from \"@pepperi-addons/ngx-lib/draggable-items\";\r\n// import { PepStyleType } from \"@pepperi-addons/ngx-lib\";\r\n\r\n// export interface LogicBlockEditorOptions extends IAddonBlockLoaderDialogOptions {\r\n//     block: LogicBlock;\r\n// }\r\n\r\n// export interface LogicBlockRelation extends NgComponentRelation {\r\n//     BlockExecutionRelativeURL: string;\r\n// }\r\n\r\n// export type ActionType = 'Add' | 'Edit' | 'Delete' | 'Duplicate' | 'Logs' | 'Test';\r\n\r\n// export interface ActionClickedEventData {\r\n//     ActionType: ActionType,\r\n//     ItemKey?: string\r\n// }\r\n\r\n// export const GL_PAGE_SIZE = 30;\r\n// export const API_PAGE_SIZE = 100;\r\n// export const SELECTION_FIELD_PREFIX = 'ValueSelectionType_';\r\n\r\n// export const SECOND = 1000;\r\n// export const MINUTE = 60 * SECOND;\r\n\r\nexport type ParameterFormType = 'add' | 'edit';\r\n\r\nexport interface IParametersColumn {\r\n    Key: string; // This is the property name of the parameter.\r\n    Title: string;\r\n    Type: DataViewFieldType,\r\n    Width: number;\r\n}\r\n\r\nexport interface IParamemeter {\r\n    Key: string;\r\n    Type: SchemeFieldType;\r\n    Description?: string;\r\n    DefaultValue: any;\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface IParameterFormData {\r\n    Mode: ParameterFormType;\r\n    Parameter: IParamemeter;\r\n    ShowType?: boolean;\r\n    ShowAccessibility?: boolean;\r\n}\r\n\r\n// export interface FlowDraggableItem extends IPepDraggableItem {\r\n//     data: {\r\n//         key: string;\r\n//         addonUUID: string;\r\n//         blockExecutionRelativeURL: string;\r\n//         moduleName: string;\r\n//         componentName: string;\r\n//     }\r\n// }\r\n\r\n// export interface FlowPickerData {\r\n//     runFlowData?: FlowObject\r\n//     fields?: AddonDataScheme['Fields']\r\n// }\r\n\r\n// export interface PageTitleButton {\r\n//     Key: string;\r\n//     Title: string;\r\n//     StyleType: PepStyleType;\r\n//     Disabled: boolean\r\n// }\r\n\r\n// export type PollResultCallback = (status: DebugFlowResult)=> void;",
            "properties": [
                {
                    "name": "Mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterFormType",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "Parameter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IParamemeter",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "ShowAccessibility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "ShowType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IParametersColumn",
            "id": "interface-IParametersColumn-8bdec15e0c0d59458e3440bac140f3364c68f3e88abdc5d01c50f82ef571f3840a8546c1062f3699660b0692d0d44310a6ae34ed255c0e59d15f76215223db52",
            "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DataViewFieldType, SchemeFieldType } from \"@pepperi-addons/papi-sdk\";\r\n\r\n// import { DebugFlowResult, FlowObject, LogicBlock } from \"shared\";\r\n// import { IPepDraggableItem } from \"@pepperi-addons/ngx-lib/draggable-items\";\r\n// import { PepStyleType } from \"@pepperi-addons/ngx-lib\";\r\n\r\n// export interface LogicBlockEditorOptions extends IAddonBlockLoaderDialogOptions {\r\n//     block: LogicBlock;\r\n// }\r\n\r\n// export interface LogicBlockRelation extends NgComponentRelation {\r\n//     BlockExecutionRelativeURL: string;\r\n// }\r\n\r\n// export type ActionType = 'Add' | 'Edit' | 'Delete' | 'Duplicate' | 'Logs' | 'Test';\r\n\r\n// export interface ActionClickedEventData {\r\n//     ActionType: ActionType,\r\n//     ItemKey?: string\r\n// }\r\n\r\n// export const GL_PAGE_SIZE = 30;\r\n// export const API_PAGE_SIZE = 100;\r\n// export const SELECTION_FIELD_PREFIX = 'ValueSelectionType_';\r\n\r\n// export const SECOND = 1000;\r\n// export const MINUTE = 60 * SECOND;\r\n\r\nexport type ParameterFormType = 'add' | 'edit';\r\n\r\nexport interface IParametersColumn {\r\n    Key: string; // This is the property name of the parameter.\r\n    Title: string;\r\n    Type: DataViewFieldType,\r\n    Width: number;\r\n}\r\n\r\nexport interface IParamemeter {\r\n    Key: string;\r\n    Type: SchemeFieldType;\r\n    Description?: string;\r\n    DefaultValue: any;\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface IParameterFormData {\r\n    Mode: ParameterFormType;\r\n    Parameter: IParamemeter;\r\n    ShowType?: boolean;\r\n    ShowAccessibility?: boolean;\r\n}\r\n\r\n// export interface FlowDraggableItem extends IPepDraggableItem {\r\n//     data: {\r\n//         key: string;\r\n//         addonUUID: string;\r\n//         blockExecutionRelativeURL: string;\r\n//         moduleName: string;\r\n//         componentName: string;\r\n//     }\r\n// }\r\n\r\n// export interface FlowPickerData {\r\n//     runFlowData?: FlowObject\r\n//     fields?: AddonDataScheme['Fields']\r\n// }\r\n\r\n// export interface PageTitleButton {\r\n//     Key: string;\r\n//     Title: string;\r\n//     StyleType: PepStyleType;\r\n//     Disabled: boolean\r\n// }\r\n\r\n// export type PollResultCallback = (status: DebugFlowResult)=> void;",
            "properties": [
                {
                    "name": "Key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "Title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "Type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataViewFieldType",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "Width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericFormData",
            "id": "interface-IPepGenericFormData-a6ca407432dae3778eb49b207ff63a95abd255e44dc93b6b0bf950a10195669d3164b8f9f89543a121fbcb74ebf398917fe3486cfaea5652cc1f9818a653a4e4",
            "file": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormDataView, BaseFormDataViewField } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \n\n/**\n * Interface represending the form data view\n */\nexport interface IPepGenericFormDataView extends FormDataView {\n    UID?: string;\n    Fields: IPepGenericFormDataViewField[];\n}\n\nexport interface IPepGenericFormDataViewField extends BaseFormDataViewField {\n    OptionalValues: Array<KeyValuePair<string>>;\n    AdditionalProps: { [key: string]: any };\n}\n\n/**\n * Interface representing form data\n */\nexport interface IPepGenericFormData {\n    UID: string;\n    Values: { [key: string]: any };\n}\n\nexport interface IPepGenericFormValueChange {\n    UID: string;\n    ApiName: string;\n    Value: any;\n}\n\nexport interface IPepGenericFormFieldUpdate {\n    FieldId: string;\n    Params: IPepGenericFormDataParams;\n}\n\nexport interface IPepGenericFormDataParams {   \n    Value?: any;   \n    Visible?: boolean;     \n    Enabled?: boolean;      \n    BackgroundColor?: string;\n    TextColor?: string;\n    Highlighted?: boolean;   \n    OptionalValues?: Array<KeyValuePair<string>>;   \n    [key: string]: any;\n}\n\n",
            "properties": [
                {
                    "name": "UID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "Values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Interface representing form data</p>\n",
            "rawdescription": "\n\nInterface representing form data\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericFormDataParams",
            "id": "interface-IPepGenericFormDataParams-a6ca407432dae3778eb49b207ff63a95abd255e44dc93b6b0bf950a10195669d3164b8f9f89543a121fbcb74ebf398917fe3486cfaea5652cc1f9818a653a4e4",
            "file": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormDataView, BaseFormDataViewField } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \n\n/**\n * Interface represending the form data view\n */\nexport interface IPepGenericFormDataView extends FormDataView {\n    UID?: string;\n    Fields: IPepGenericFormDataViewField[];\n}\n\nexport interface IPepGenericFormDataViewField extends BaseFormDataViewField {\n    OptionalValues: Array<KeyValuePair<string>>;\n    AdditionalProps: { [key: string]: any };\n}\n\n/**\n * Interface representing form data\n */\nexport interface IPepGenericFormData {\n    UID: string;\n    Values: { [key: string]: any };\n}\n\nexport interface IPepGenericFormValueChange {\n    UID: string;\n    ApiName: string;\n    Value: any;\n}\n\nexport interface IPepGenericFormFieldUpdate {\n    FieldId: string;\n    Params: IPepGenericFormDataParams;\n}\n\nexport interface IPepGenericFormDataParams {   \n    Value?: any;   \n    Visible?: boolean;     \n    Enabled?: boolean;      \n    BackgroundColor?: string;\n    TextColor?: string;\n    Highlighted?: boolean;   \n    OptionalValues?: Array<KeyValuePair<string>>;   \n    [key: string]: any;\n}\n\n",
            "properties": [
                {
                    "name": "BackgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "Enabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "Highlighted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "OptionalValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValuePair<string>>",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "TextColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "Value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "Visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-a6ca407432dae3778eb49b207ff63a95abd255e44dc93b6b0bf950a10195669d3164b8f9f89543a121fbcb74ebf398917fe3486cfaea5652cc1f9818a653a4e4",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericFormDataView",
            "id": "interface-IPepGenericFormDataView-a6ca407432dae3778eb49b207ff63a95abd255e44dc93b6b0bf950a10195669d3164b8f9f89543a121fbcb74ebf398917fe3486cfaea5652cc1f9818a653a4e4",
            "file": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormDataView, BaseFormDataViewField } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \n\n/**\n * Interface represending the form data view\n */\nexport interface IPepGenericFormDataView extends FormDataView {\n    UID?: string;\n    Fields: IPepGenericFormDataViewField[];\n}\n\nexport interface IPepGenericFormDataViewField extends BaseFormDataViewField {\n    OptionalValues: Array<KeyValuePair<string>>;\n    AdditionalProps: { [key: string]: any };\n}\n\n/**\n * Interface representing form data\n */\nexport interface IPepGenericFormData {\n    UID: string;\n    Values: { [key: string]: any };\n}\n\nexport interface IPepGenericFormValueChange {\n    UID: string;\n    ApiName: string;\n    Value: any;\n}\n\nexport interface IPepGenericFormFieldUpdate {\n    FieldId: string;\n    Params: IPepGenericFormDataParams;\n}\n\nexport interface IPepGenericFormDataParams {   \n    Value?: any;   \n    Visible?: boolean;     \n    Enabled?: boolean;      \n    BackgroundColor?: string;\n    TextColor?: string;\n    Highlighted?: boolean;   \n    OptionalValues?: Array<KeyValuePair<string>>;   \n    [key: string]: any;\n}\n\n",
            "properties": [
                {
                    "name": "Fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericFormDataViewField[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "UID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Interface represending the form data view</p>\n",
            "rawdescription": "\n\nInterface represending the form data view\n",
            "methods": [],
            "extends": [
                "FormDataView"
            ]
        },
        {
            "name": "IPepGenericFormDataViewField",
            "id": "interface-IPepGenericFormDataViewField-a6ca407432dae3778eb49b207ff63a95abd255e44dc93b6b0bf950a10195669d3164b8f9f89543a121fbcb74ebf398917fe3486cfaea5652cc1f9818a653a4e4",
            "file": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormDataView, BaseFormDataViewField } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \n\n/**\n * Interface represending the form data view\n */\nexport interface IPepGenericFormDataView extends FormDataView {\n    UID?: string;\n    Fields: IPepGenericFormDataViewField[];\n}\n\nexport interface IPepGenericFormDataViewField extends BaseFormDataViewField {\n    OptionalValues: Array<KeyValuePair<string>>;\n    AdditionalProps: { [key: string]: any };\n}\n\n/**\n * Interface representing form data\n */\nexport interface IPepGenericFormData {\n    UID: string;\n    Values: { [key: string]: any };\n}\n\nexport interface IPepGenericFormValueChange {\n    UID: string;\n    ApiName: string;\n    Value: any;\n}\n\nexport interface IPepGenericFormFieldUpdate {\n    FieldId: string;\n    Params: IPepGenericFormDataParams;\n}\n\nexport interface IPepGenericFormDataParams {   \n    Value?: any;   \n    Visible?: boolean;     \n    Enabled?: boolean;      \n    BackgroundColor?: string;\n    TextColor?: string;\n    Highlighted?: boolean;   \n    OptionalValues?: Array<KeyValuePair<string>>;   \n    [key: string]: any;\n}\n\n",
            "properties": [
                {
                    "name": "AdditionalProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "OptionalValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValuePair<string>>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseFormDataViewField"
            ]
        },
        {
            "name": "IPepGenericFormFieldUpdate",
            "id": "interface-IPepGenericFormFieldUpdate-a6ca407432dae3778eb49b207ff63a95abd255e44dc93b6b0bf950a10195669d3164b8f9f89543a121fbcb74ebf398917fe3486cfaea5652cc1f9818a653a4e4",
            "file": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormDataView, BaseFormDataViewField } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \n\n/**\n * Interface represending the form data view\n */\nexport interface IPepGenericFormDataView extends FormDataView {\n    UID?: string;\n    Fields: IPepGenericFormDataViewField[];\n}\n\nexport interface IPepGenericFormDataViewField extends BaseFormDataViewField {\n    OptionalValues: Array<KeyValuePair<string>>;\n    AdditionalProps: { [key: string]: any };\n}\n\n/**\n * Interface representing form data\n */\nexport interface IPepGenericFormData {\n    UID: string;\n    Values: { [key: string]: any };\n}\n\nexport interface IPepGenericFormValueChange {\n    UID: string;\n    ApiName: string;\n    Value: any;\n}\n\nexport interface IPepGenericFormFieldUpdate {\n    FieldId: string;\n    Params: IPepGenericFormDataParams;\n}\n\nexport interface IPepGenericFormDataParams {   \n    Value?: any;   \n    Visible?: boolean;     \n    Enabled?: boolean;      \n    BackgroundColor?: string;\n    TextColor?: string;\n    Highlighted?: boolean;   \n    OptionalValues?: Array<KeyValuePair<string>>;   \n    [key: string]: any;\n}\n\n",
            "properties": [
                {
                    "name": "FieldId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "Params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericFormDataParams",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericFormValueChange",
            "id": "interface-IPepGenericFormValueChange-a6ca407432dae3778eb49b207ff63a95abd255e44dc93b6b0bf950a10195669d3164b8f9f89543a121fbcb74ebf398917fe3486cfaea5652cc1f9818a653a4e4",
            "file": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormDataView, BaseFormDataViewField } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \n\n/**\n * Interface represending the form data view\n */\nexport interface IPepGenericFormDataView extends FormDataView {\n    UID?: string;\n    Fields: IPepGenericFormDataViewField[];\n}\n\nexport interface IPepGenericFormDataViewField extends BaseFormDataViewField {\n    OptionalValues: Array<KeyValuePair<string>>;\n    AdditionalProps: { [key: string]: any };\n}\n\n/**\n * Interface representing form data\n */\nexport interface IPepGenericFormData {\n    UID: string;\n    Values: { [key: string]: any };\n}\n\nexport interface IPepGenericFormValueChange {\n    UID: string;\n    ApiName: string;\n    Value: any;\n}\n\nexport interface IPepGenericFormFieldUpdate {\n    FieldId: string;\n    Params: IPepGenericFormDataParams;\n}\n\nexport interface IPepGenericFormDataParams {   \n    Value?: any;   \n    Visible?: boolean;     \n    Enabled?: boolean;      \n    BackgroundColor?: string;\n    TextColor?: string;\n    Highlighted?: boolean;   \n    OptionalValues?: Array<KeyValuePair<string>>;   \n    [key: string]: any;\n}\n\n",
            "properties": [
                {
                    "name": "ApiName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "UID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "Value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericListActions",
            "id": "interface-IPepGenericListActions-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "data",
                            "type": "PepSelectionData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<literal type[]>",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "PepSelectionData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "IPepGenericListDataRow",
            "id": "interface-IPepGenericListDataRow-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "isEditable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "isSelectableForActions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "isSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericListDataSource",
            "id": "interface-IPepGenericListDataSource-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "inputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListListInputs",
                    "optional": true,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "params",
                            "type": "IPepGenericListParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<IPepGenericListInitData>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "IPepGenericListParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "params",
                            "type": "IPepGenericListParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "Promise<any[]>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "IPepGenericListParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "IPepGenericListDataViewField",
            "id": "interface-IPepGenericListDataViewField-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "OptionalValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<KeyValuePair<string>>",
                    "optional": true,
                    "description": "",
                    "line": 91
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "BaseFormDataViewField"
            ]
        },
        {
            "name": "IPepGenericListEmptyState",
            "id": "interface-IPepGenericListEmptyState-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "show",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 96
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericListInitData",
            "id": "interface-IPepGenericListInitData-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "dataView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GridDataView | CardDataView | LineDataView",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "isPepRowData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[] | IPepGenericListDataRow[]",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "totalCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericListListInputs",
            "id": "interface-IPepGenericListListInputs-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "emptyState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListEmptyState",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "hideSelectAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "noDataFoundMsg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "pager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListPager",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "selectionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepListSelectionType",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "smartFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListSmartFilter",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "supportSorting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "tableViewType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepListTableViewType",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "zebraStripes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 60
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericListPager",
            "id": "interface-IPepGenericListPager-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepListPagerType",
                    "optional": false,
                    "description": "",
                    "line": 73
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericListParams",
            "id": "interface-IPepGenericListParams-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "fromIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "pageIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "searchString",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "sorting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepListSortingChangeEvent",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "toIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepGenericListSmartFilter",
            "id": "interface-IPepGenericListSmartFilter-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepSmartFilterData[]",
                    "optional": true,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "dataView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuDataView",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 81
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPepSmartFilters",
            "id": "interface-IPepSmartFilters-db9ff21f745dc0a741d3645e5f4a0e11e79466a409f5ba7209d7e439f505794087de61c00bdb00faa0e6e0b59123a3ce8e0a74f8111e9aef53c2585857f314bd",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n    DataView,\r\n    GridDataView,\r\n    CardDataView,\r\n    LineDataView,\r\n    MenuDataView,\r\n    GridDataViewField,\r\n    BaseFormDataViewField\r\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { KeyValuePair } from '@pepperi-addons/ngx-lib'; \r\nimport {\r\n    PepListPagerType,\r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent,\r\n    PepListTableViewType,\r\n    PepSelectionData\r\n} from '@pepperi-addons/ngx-lib/list';\r\nimport {\r\n    PepSmartFilterBaseField,\r\n    IPepSmartFilterData\r\n} from '@pepperi-addons/ngx-lib/smart-filters';\r\nimport { TmplAstBoundAttribute } from '@angular/compiler';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: IPepGenericListParams): Promise<IPepGenericListInitData>;    \r\n    update?(params: IPepGenericListParams): Promise<any[]>;    \r\n    inputs?: IPepGenericListListInputs;\r\n}\r\n\r\nexport interface IPepGenericListParams {\r\n    searchString?: string;\r\n    filters?: any;\r\n    sorting?: IPepListSortingChangeEvent;\r\n    fromIndex?: number; // 0\r\n    toIndex?: number; // top || page-size\r\n    pageIndex?: number;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView | CardDataView | LineDataView;\r\n    totalCount: number;\r\n    items: {[key: string]: any}[] | IPepGenericListDataRow[];   \r\n    isPepRowData?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListDataRow {\r\n    fields: {[key: string]: any}[];\r\n    isEditable?: boolean;\r\n    isSelected?: boolean;\r\n    isSelectableForActions?: boolean;\r\n}\r\n\r\nexport interface IPepGenericListListInputs {      \r\n    supportSorting?: boolean;\r\n    hideSelectAll?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n    tableViewType?: PepListTableViewType;\r\n    zebraStripes?: boolean;\r\n    smartFilter?: IPepGenericListSmartFilter;\r\n    emptyState?: IPepGenericListEmptyState;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: PepSelectionData): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\nexport interface IPepGenericListSmartFilter {    \r\n    dataView: MenuDataView;\r\n    data?: IPepSmartFilterData[];\r\n    title?: string;\r\n}\r\n\r\nexport interface IPepSmartFilters { \r\n    fields: PepSmartFilterBaseField[],\r\n    data: IPepSmartFilterData[],\r\n    title: string\r\n}\r\n\r\nexport interface IPepGenericListDataViewField extends BaseFormDataViewField {    \r\n    OptionalValues?: Array<KeyValuePair<string>>;        \r\n}\r\n\r\nexport interface IPepGenericListEmptyState { \r\n    show: boolean;\r\n    title?: string;\r\n    description?: string;\r\n}\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepSmartFilterData[]",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepSmartFilterBaseField[]",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "DataViewBuilderService",
            "id": "injectable-DataViewBuilderService-cb69f4d409d79c537595781a4d206e7b75d13fb437d6541725a45b489aae1c736632185f3971dec5de9d0caef01edf7a5212615479bd80b84a1a19b54a47dbde",
            "file": "projects/ngx-composite-lib/data-view-builder/data-view-builder.service.ts",
            "properties": [
                {
                    "name": "_isGrabbingSubject",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changeCursorOnDragEnd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "changeCursorOnDragStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onDragEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragEnd",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragEnd",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragStart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragStart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { CdkDragEnd, CdkDragStart } from '@angular/cdk/drag-drop';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, filter } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DataViewBuilderService {\n    \n    // This subject is for is grabbing mode.\n    private _isGrabbingSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    get isGrabbingChange$(): Observable<boolean> {\n        return this._isGrabbingSubject.asObservable().pipe(distinctUntilChanged());\n    }\n\n    constructor() { \n        //\n    }\n\n    private changeCursorOnDragStart() {\n        document.body.classList.add('inheritCursors');\n        document.body.style.cursor = 'grabbing';\n        this._isGrabbingSubject.next(true);\n    }\n\n    private changeCursorOnDragEnd() {\n        document.body.classList.remove('inheritCursors');\n        document.body.style.cursor = 'unset';\n        this._isGrabbingSubject.next(false);\n    }\n    \n    onDragStart(event: CdkDragStart) {\n        this.changeCursorOnDragStart();\n    }\n\n    onDragEnd(event: CdkDragEnd) {\n        this.changeCursorOnDragEnd();\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "accessors": {
                "isGrabbingChange$": {
                    "name": "isGrabbingChange$",
                    "getSignature": {
                        "name": "isGrabbingChange$",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 13
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FlowPickerService",
            "id": "injectable-FlowPickerService-d90993af86e0b4155053b68f7edccaf70f7b27775da6f549e7951ae01146330a7b1cf7d2d54e83502b1fb4a8451bebcb31395062331077ff3143e5ba5cc78c29",
            "file": "projects/ngx-composite-lib/flow-picker-button/flow-picker-button.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "searchFlows",
                    "args": [
                        {
                            "name": "flowKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "flowKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { PepHttpService, PepSessionService } from '@pepperi-addons/ngx-lib';\nimport { lastValueFrom } from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FlowPickerService {\n    \n    constructor(\n        private httpService: PepHttpService\n        ) {\n    }\n    \n    async searchFlows(flowKey: string): Promise<any> {\n        return lastValueFrom(await this.httpService.postPapiApiCall('/user_defined_flows/search', { KeyList: [flowKey], Fields: ['Key', 'Name']}));\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "PepHttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "PepHttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FlowPickerService",
            "id": "injectable-FlowPickerService-63782ab07f6369d57bc5ab491c466b5e6a199f7baabdd28da4552eadd52a37ca47f8e7e80249c8b08c40732b6a1b71f2057ec3be024f92350779878c8cc8761e-1",
            "file": "projects/ngx-composite-lib/icon-picker/icon-picker.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { PepHttpService } from '@pepperi-addons/ngx-lib';\n\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FlowPickerService {\n    \n    constructor(\n        private httpService: PepHttpService\n        ) {\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "PepHttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "PepHttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "FlowPickerService-1"
        },
        {
            "name": "ManageParametersService",
            "id": "injectable-ManageParametersService-5937137c0e1582cdddf5ded48dd727713c6d872ca064074a151ac8a9e7ab08ac8c87959cf9e5150475879204a39491da0fba2ddc6c6691d9cdcb548cc387b6eb",
            "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "convertParamsTypeToDVType",
                    "args": [
                        {
                            "name": "paramType",
                            "type": "SchemeFieldType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DataViewFieldType",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "paramType",
                            "type": "SchemeFieldType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAvailableTypes",
                    "args": [],
                    "optional": false,
                    "returnType": "KeyValuePair[]",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getDataViewField",
                    "args": [
                        {
                            "name": "fieldId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "DataViewFieldType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mandatory",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "readOnly",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "optionalValues",
                            "type": "any[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        },
                        {
                            "name": "additionalProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        },
                        {
                            "name": "layout",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "fieldId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "DataViewFieldType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mandatory",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "readOnly",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "optionalValues",
                            "type": "any[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "additionalProps",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "layout",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getParameterFormDataView",
                    "args": [
                        {
                            "name": "formMode",
                            "type": "ParameterFormType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "paramType",
                            "type": "SchemeFieldType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "showType",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "showAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IPepGenericFormDataView",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formMode",
                            "type": "ParameterFormType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "paramType",
                            "type": "SchemeFieldType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showType",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getParametersListDataView",
                    "args": [
                        {
                            "name": "parametersColumns",
                            "type": "IParametersColumn[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "showType",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "showAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "GridDataView",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "parametersColumns",
                            "type": "IParametersColumn[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showType",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showAccessibility",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { IPepGenericFormDataView } from \"@pepperi-addons/ngx-composite-lib/generic-form\";\nimport { KeyValuePair } from \"@pepperi-addons/ngx-lib\";\nimport { DataViewFieldType, GridDataView, SchemeFieldType, SchemeFieldTypes } from \"@pepperi-addons/papi-sdk\";\nimport { IParametersColumn, ParameterFormType } from \"./manage-parameters.model\";\n\n@Injectable({\n    providedIn:'root'\n})\nexport class ManageParametersService {\n    \n    constructor (private translate: TranslateService) {\n\n    }\n\n    private getAvailableTypes(): KeyValuePair<string>[] {\n        const types = SchemeFieldTypes.filter(type => ['Array', 'DateTime', 'Resource', 'ContainedResource', 'DynamicResource', 'ContainedDynamicResource', 'MultipleStringValues'].includes(type) === false);\n        return types.map(type => {\n            return {\n                Key: type,\n                Value: type\n            }\n        })\n    }\n\n    private convertParamsTypeToDVType(paramType: SchemeFieldType): DataViewFieldType {\n        let res: DataViewFieldType = 'TextBox';\n        switch (paramType) {\n            case 'Bool': {\n                res = 'Boolean';\n                break;\n            }\n            case 'Integer': {\n                res = 'NumberInteger';\n                break;\n            }\n            case 'Double': {\n                res = 'NumberReal';\n                break;\n            }\n        }\n        return res;\n    }\n\n    private getDataViewField(fieldId: string, type: DataViewFieldType, title: string, mandatory: boolean, readOnly: boolean, \n        optionalValues: any[] | undefined = undefined, additionalProps: any = undefined, layout: any = undefined): any {\n\n        const res: any = {\n            FieldID: fieldId,\n            Type: type,\n            Title: title,\n            Mandatory: mandatory,\n            ReadOnly: readOnly\n        }\n\n        if (optionalValues) {\n            res['OptionalValues'] = optionalValues;\n        }\n\n        if (additionalProps) {\n            res['AdditionalProps'] = additionalProps;\n        }\n\n        if (layout) {\n            res['Layout'] = layout;\n        }\n\n        return res;\n    }\n\n    getParametersListDataView(parametersColumns: IParametersColumn[], showType: boolean, showAccessibility: boolean): GridDataView {\n        let fields;\n        let columns;\n\n        // If columns are defined, use them. Otherwise, use the default columns.\n        if (parametersColumns.length > 0) {\n            fields = parametersColumns.map(column => {\n                return this.getDataViewField(column.Key, column.Type, column.Title, false, true, [], {});\n            });\n\n            columns = parametersColumns.map(column => {\n                return { Width: column.Width }\n            });\n        } else {\n            // Add Key and Description fields.\n            fields = [\n                this.getDataViewField('Key', 'Link', this.translate.instant('MANAGE_PARAMETERS.KEY_TITLE'), false, true),\n                this.getDataViewField('Description', 'TextBox', this.translate.instant('MANAGE_PARAMETERS.DESCRIPTION_TITLE'), false, true),\n            ];\n\n            // Add Type field only if showType is true.\n            if (showType) {\n                fields.push(this.getDataViewField('Type', 'TextBox', this.translate.instant('MANAGE_PARAMETERS.TYPE_TITLE'), false, true));\n            }\n\n            // Add DefaultValue field.\n            fields.push(this.getDataViewField('DefaultValue', 'TextBox', this.translate.instant('MANAGE_PARAMETERS.DEFAULT_VALUE_TITLE'), false, true));\n\n            // Add Internal field.\n            if (showAccessibility) {\n                fields.push(this.getDataViewField('Internal', 'Boolean', this.translate.instant('MANAGE_PARAMETERS.INTERNAL_TITLE'), false, true));\n            }\n\n            columns = fields.map(field => {\n                return { Width: 100 / fields.length }\n            });\n        }\n\n        return {\n            Context: {\n                Name: '',\n                Profile: { InternalID: 0 },\n                ScreenSize: 'Landscape'\n            },\n            Type: 'Grid',\n            Title: '',\n            Fields: fields,\n            Columns: columns,\n            FrozenColumnsCount: 0,\n            MinimumColumnWidth: 0\n        }\n    }\n\n    getParameterFormDataView(formMode: ParameterFormType, paramType: SchemeFieldType, showType: boolean, showAccessibility: boolean): IPepGenericFormDataView {\n        const fieldTypes = this.getAvailableTypes();\n        const noEmptyOption = { emptyOption: false };\n\n        // Add Key and Description fields.\n        const fields = [\n            this.getDataViewField('Key', 'TextBox', this.translate.instant('MANAGE_PARAMETERS.KEY_TITLE'), formMode === 'add', formMode != 'add', [], \n                { regex: '^([a-zA-Z0-9-_])*$', regexError: this.translate.instant('MANAGE_PARAMETERS.KEY_REGEX_ERROR')}\n            ),\n            this.getDataViewField('Description', 'TextArea', this.translate.instant('MANAGE_PARAMETERS.DESCRIPTION_TITLE'), false, false, [], {}, \n                { Size: { Width:1, Height:2 } }\n            )\n        ];\n\n        // Add Type field only if showType is true.\n        if (showType) {\n            this.getDataViewField('Type', 'ComboBox', this.translate.instant('MANAGE_PARAMETERS.TYPE_TITLE'), false, formMode != 'add', fieldTypes, noEmptyOption);\n        }\n        \n        // Add DefaultValue field.\n        fields.push(this.getDataViewField('DefaultValue', this.convertParamsTypeToDVType(paramType), this.translate.instant('MANAGE_PARAMETERS.DEFAULT_VALUE_TITLE'), \n            false, false, [], {}))\n            \n        // Add Internal and Accessibility_Description fields.\n        if (showAccessibility) {\n            const accessibilityDescAdditionalProps = { renderTitle: false, renderEnlargeButton: false };\n            const accessibilityDescLayout = { Size: { Height: 0, Width: 1 } };\n\n            fields.push(this.getDataViewField('Accessibility_Description', 'RichTextHTML', this.translate.instant('MANAGE_PARAMETERS.INTERNAL_DESCRIPTION'), \n            false, true, [], accessibilityDescAdditionalProps, accessibilityDescLayout)\n            );\n                \n            const accessibilityOptionalValues = [{ Key: 'Internal', Value: 'Internal' }, { Key: 'External', Value: 'External' }];\n            fields.push(this.getDataViewField('Accessibility', 'ComboBox', this.translate.instant('MANAGE_PARAMETERS.ACCESSIBILITY_TITLE'), \n                false, false, accessibilityOptionalValues, noEmptyOption)\n            );\n        }\n\n        return {\n            Type: 'Form',\n            Fields: fields,\n            Context: {\n                Name: '',\n                Profile: { },\n                ScreenSize: 'Tablet'\n            }\n        };\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PepCompositeLibUtilitiesService",
            "id": "injectable-PepCompositeLibUtilitiesService-d394ea8f6abb5accfecb818463afdff7981a63774224cd2d7b41deffda659490b6b2044b1c1d43cc9c03631d1ac56688aacda5523fee59c3fa7d051e95ee3811",
            "file": "projects/ngx-composite-lib/src/core/common/services/utilities.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n/*\r\n    This service is for utillity usege.\r\n*/\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class PepCompositeLibUtilitiesService {\r\n    constructor(\r\n        // private sessionService: PepSessionService,\r\n        // private httpService: PepHttpService,\r\n        // private loaderService: PepLoaderService\r\n    ) {\r\n        //\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PepDIMXHelperService",
            "id": "injectable-PepDIMXHelperService-e366b4038f7b1d782e30f684ceb98b986524ebd5fc9855acf616b4aaec74f5ea887b51fec31d67460a3eb0487a141f37866229e7219ea6d5e3ca3d9122ef846c",
            "file": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
            "properties": [
                {
                    "name": "dimxFunctions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "options",
                            "type": "DIMXExportOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "DIMXExportOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "import",
                    "args": [
                        {
                            "name": "options",
                            "type": "DIMXImportOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "DIMXImportOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recursive_export",
                    "args": [
                        {
                            "name": "options",
                            "type": "DIMXRecursiveExportOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "DIMXRecursiveExportOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recursive_import",
                    "args": [
                        {
                            "name": "options",
                            "type": "DIMXRecursiveImportOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "DIMXRecursiveImportOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "viewContainerRef",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dimxHostObject",
                            "type": "DIMXHostObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "onDIMXProcessDoneCallback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "dimxEvent",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "viewContainerRef",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dimxHostObject",
                            "type": "DIMXHostObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onDIMXProcessDoneCallback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "dimxEvent",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, ViewContainerRef } from \"@angular/core\";\r\nimport { PepAddonBlockLoaderService } from \"@pepperi-addons/ngx-lib/remote-loader\";\r\n\r\nexport interface DIMXHostObject {\r\n    DIMXAddonUUID: string;\r\n    DIMXResource: string;\r\n}\r\n\r\nexport interface DIMXImportOptions {\r\n    OverwriteObject?: boolean;\r\n    Delimiter?: string;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveImportOptions {\r\n    OverwriteObject?: boolean;\r\n    OwnerID?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXExportOptions {\r\n    DIMXExportFormat?: string;\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    DIMXExportDelimiter?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\nexport interface DIMXRecursiveExportOptions {\r\n    DIMXExportIncludeDeleted?: boolean;\r\n    DIMXExportFileName?: string;\r\n    DIMXExportWhere?: string;\r\n    DIMXExportFields?: string;\r\n    ActionID?: string;\r\n    AdditionalData?: any;\r\n}\r\n\r\n@Injectable()\r\nexport class PepDIMXHelperService {\r\n    private dimxFunctions!: {\r\n        DIMXImport: (options?: DIMXImportOptions) => void,\r\n        DIMXRecursiveImport: (options?: DIMXRecursiveImportOptions) => void,\r\n        DIMXExport: (options?: DIMXExportOptions) => void,\r\n        DIMXRecursiveExport: (options?: DIMXRecursiveExportOptions) => void\r\n    };\r\n\r\n    constructor(\r\n        private addonBlockLoaderService: PepAddonBlockLoaderService\r\n    ) {\r\n    }\r\n\r\n    register(viewContainerRef: ViewContainerRef, dimxHostObject: DIMXHostObject, onDIMXProcessDoneCallback: (dimxEvent: any) => void) {\r\n        return this.addonBlockLoaderService.loadAddonBlockInContainer({\r\n            container: viewContainerRef,\r\n            name: 'DIMX',\r\n            hostObject: dimxHostObject,\r\n            hostEventsCallback: (event: any) => {\r\n                if (event.action === 'DIMXFunctionsRegister') {\r\n                    this.dimxFunctions = event.value;\r\n                } else if (event.action === 'DIMXProcessDone') {\r\n                    onDIMXProcessDoneCallback(event.value);\r\n                } else {\r\n                    console.error('Unknown event action: ' + event.action);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    import(options?: DIMXImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXImport) === 'function') {\r\n            this.dimxFunctions.DIMXImport(options);\r\n        } else {\r\n            console.error('DIMXImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_import(options?: DIMXRecursiveImportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveImport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveImport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveImport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    export(options?: DIMXExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXExport) === 'function') {\r\n            this.dimxFunctions.DIMXExport(options);\r\n        } else {\r\n            console.error('DIMXExport function not found, are you registered?');\r\n        }\r\n    }\r\n\r\n    recursive_export(options?: DIMXRecursiveExportOptions) {\r\n        if (typeof (this.dimxFunctions?.DIMXRecursiveExport) === 'function') {\r\n            this.dimxFunctions.DIMXRecursiveExport(options);\r\n        } else {\r\n            console.error('DIMXRecursiveExport function not found, are you registered?');\r\n        }\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "addonBlockLoaderService",
                        "type": "PepAddonBlockLoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "addonBlockLoaderService",
                        "type": "PepAddonBlockLoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PepGenericFormService",
            "id": "injectable-PepGenericFormService-e6ef4cfeecad8be2a9074173bdc7064108c7e6a301a097d695ab5cfea878bddc27250a1faf198d2e454deae6ccc54ac455dc122445d2085f1fc414b43ccff8cb",
            "file": "projects/ngx-composite-lib/generic-form/generic-form.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "convertToUiControlField",
                    "args": [
                        {
                            "name": "field",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createFormField",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasProperty",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks if the object contains property\n",
                    "description": "<p>checks if the object contains property</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 208,
                                "end": 211,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "obj"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 202,
                                "end": 207,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>object</p>\n"
                        },
                        {
                            "name": {
                                "pos": 233,
                                "end": 237,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "prop"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 227,
                                "end": 232,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>property name</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 260,
                                "end": 267,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if contains, false otherwise</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n\n@Injectable()\nexport class PepGenericFormService { \n\n    constructor() {\n        // \n    }\n  \n    /**\n     * checks if the object contains property\n     * @param obj object\n     * @param prop property name\n     * @returns true if contains, false otherwise\n    */\n    hasProperty(obj: any, prop: string) {\n        return Object.prototype.hasOwnProperty.call(obj, prop);\n    }\n\n    createFormField(data: any) {\n        const field: any = {};\n       \n        field.ApiName = data.ApiName;\n        field.Value = data.controlFieldValue;\n        field.FormattedValue =  data.controlFieldValue;\n        field.FieldType = data.FieldType;\n        field.Enabled = !data.ReadOnly;\n        field.Visible = !data.Hidden;\n        field.GroupFields = [];\n        field.Highlighted = false;\n        field.OptionalValues = data.OptionalValues;\n        field.AdditionalProps = data.AdditionalProps;    \n\n        return field;\n    }\n\n    convertToUiControlField(field: any): any {\n        return {\n            ApiName: field.ApiName,\n            FieldType: field.FieldType,\n            Title: field.Title,\n            ReadOnly: field.ReadOnlyField,\n            Mandatory: field.MandatoryField,\n            Hidden: field.Hidden,\n            ColumnWidth: field.ColumnWidth,\n            ColumnWidthType: 1,\n            MaxFieldCharacters: field.MaxCharacters,\n            MinValue: field.MinValue,\n            MaxValue: field.MaxValue,\n            Layout: {\n                X: field.Layout.X,\n                Y: field.Layout.Y,\n                Width: field.Layout.Width,\n                Height: field.Layout.Field_Height,\n                XAlignment: field.Layout.xAlignment,\n                YAlignment: field.Layout.yAlignment,\n            }\n        }\n    }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 5
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PepGenericListService",
            "id": "injectable-PepGenericListService-05a2d93ebb9a446b0f3c031c5c03c65b12fb1acb4df1e2422531abfe78e47187e3c69f985565484cc7f2b60a40b4d64b568e88f9adf93c6e794bcaf8827fee35",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "convertToPepRowData",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dataView",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "uuidMapping",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataView",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "uuidMapping",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToSmartFilter",
                    "args": [
                        {
                            "name": "input",
                            "type": "IPepGenericListSmartFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IPepSmartFilters",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "IPepGenericListSmartFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToUiControlField",
                    "args": [
                        {
                            "name": "field",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ ApiName: any; FieldType: any; Title: any; ReadOnly: any; ColumnWidth: any; ColumnWidthType: number; Layout: { X: any; Y: any; Width: any; Height: any; XAlignment: any; YAlignment: any; }; }",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSmartFilterFields",
                    "args": [
                        {
                            "name": "dataView",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataView",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getListViewType",
                    "args": [
                        {
                            "name": "dataViewType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"table\" | \"cards\" | \"lines\"",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataViewType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedItems",
                    "args": [
                        {
                            "name": "items",
                            "type": "ObjectsDataRow[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "ObjectsDataRow[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUniqItemId",
                    "args": [
                        {
                            "name": "itemId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasProperty",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks if the object contains property\n",
                    "description": "<p>checks if the object contains property</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 893,
                                "end": 896,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "obj"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 887,
                                "end": 892,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>object</p>\n"
                        },
                        {
                            "name": {
                                "pos": 916,
                                "end": 920,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "prop"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 910,
                                "end": 915,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>property name</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 941,
                                "end": 948,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if contains, false otherwise</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n    IPepGenericListSmartFilter,\n    IPepGenericListDataViewField,\n    IPepSmartFilters\n} from './generic-list.model';\nimport {\n    PepSmartFilterBaseField,\n    IPepSmartFilterData,\n} from '@pepperi-addons/ngx-lib/smart-filters';\nimport { PepQueryBuilderService, IPepQueryBuilderField } from '@pepperi-addons/ngx-lib/query-builder';\nimport {\n    PepRowData,\n    ObjectsDataRow\n} from '@pepperi-addons/ngx-lib';\nimport { GridDataViewField, DataViewFieldTypes } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\n\n@Injectable() \nexport class PepGenericListService {\n\n    constructor(\n        private _translate: TranslateService,\n        private _queryBuilderService: PepQueryBuilderService\n    ) {\n        //\n    }\n\n    /**\n   * checks if the object contains property\n   * @param obj object\n   * @param prop property name\n   * @returns true if contains, false otherwise\n   */\n    hasProperty(obj: any, prop: string) {\n        return Object.prototype.hasOwnProperty.call(obj, prop);\n    }\n\n    getListViewType(dataViewType: string) {\n        switch (dataViewType) {\n            case 'Grid':\n                return 'table';\n            case 'Card':\n                return 'cards';\n            case 'Line':\n                return 'lines';\n            default:\n                return 'table';\n        }\n    }\n\n    convertToPepRowData(item: any, dataView: any, uuidMapping: string) {\n        const row = new PepRowData();\n        let itemFields: any;\n\n        if (this.hasProperty(item, 'fields') && typeof item.fields === 'object') {\n            itemFields = item.fields;\n            if (item.isEditable === false) {\n                row.IsEditable = false;\n            }\n            if (item.isSelectableForActions === false) {\n                row.IsSelectableForActions = false;\n            }\n            if (item.isEditable && item.isSelectableForActions && item.isSelected) {\n                row.IsSelected = true;\n            }\n        } else {\n            itemFields = item;\n        }\n\n        row.UUID = itemFields[uuidMapping] || undefined;\n        row.Fields = [];\n\n        if (dataView?.Fields && dataView.Columns) {\n            for (let index = 0; index < dataView.Fields.length; index++) {\n                const field = dataView.Fields[index] as IPepGenericListDataViewField;\n                row.Fields.push({\n                    ApiName: field.FieldID,\n                    Title: field.Title ? this._translate.instant(field.Title) : '',\n                    XAlignment: 1,\n                    FormattedValue: (itemFields[field.FieldID] || '').toString(),\n                    Value: (itemFields[field.FieldID] || '').toString(),\n                    ColumnWidth: dataView.Columns[index]?.Width || undefined,\n                    AdditionalValue: '',\n                    OptionalValues: field.OptionalValues || [],\n                    FieldType: DataViewFieldTypes[field.Type],\n                    ReadOnly: field.ReadOnly,\n                    Enabled: !field.ReadOnly\n                })\n            }\n        }\n        return row;\n    }\n\n    convertToUiControlField(field: any) {\n        return {\n            ApiName: field.ApiName,\n            FieldType: field.FieldType,\n            Title: field.Title,\n            ReadOnly: field.ReadOnlyField,\n            ColumnWidth: field.ColumnWidth,\n            ColumnWidthType: 1,\n            Layout: {\n                X: field.Layout.X,\n                Y: field.Layout.Y,\n                Width: field.Layout.Width,\n                Height: field.Layout.Field_Height,\n                XAlignment: field.Layout.xAlignment,\n                YAlignment: field.Layout.yAlignment,\n            }\n        }\n    }\n\n    convertToSmartFilter(input: IPepGenericListSmartFilter) {        \n        const smartFilters: IPepSmartFilters = {\n            fields: [],\n            data: [],\n            title: 'Filters'\n        }\n\n        if (input) {\n            if (input.dataView) {\n                smartFilters.fields = this.createSmartFilterFields(input.dataView);\n                if (input.data?.length) {\n                    smartFilters.data = input.data;\n                }\n            }\n            if (input.title) {\n                smartFilters.title = input.title;\n            }\n        }\n\n        return smartFilters;        \n    }\n\n    createSmartFilterFields(dataView: any) {\n        let smartFields: PepSmartFilterBaseField[] = [];\n\n        const fields = dataView.Fields.map((field: any) => {\n            return {\n                FieldID: field.FieldID,\n                FieldType: field.Type,\n                Title: field.Title,\n                OptionalValues: field.OptionalValues\n            } as IPepQueryBuilderField\n        });\n        const smartFilterfields = this._queryBuilderService.convertToSmartFilterFields(fields);\n        if (smartFilterfields?.length) {\n            smartFields = smartFilterfields.map((field => field.smart));\n        }\n\n        return smartFields;\n    }\n\n    // TODO: This func is copy from ngx-lib write it in one place.\n    private getUniqItemId(itemId: string, itemType = ''): string {\n        return itemId + ',' + itemType;\n    }\n\n    getSelectedItems(items: ObjectsDataRow[]) {\n        const selectedItems = [];\n\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].IsSelected) {\n                selectedItems.push(this.getUniqItemId(items[i].UID, items[i].Type?.toString()));\n            }\n        }\n\n        return selectedItems;\n    }\n\n\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_queryBuilderService",
                        "type": "PepQueryBuilderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "_translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_queryBuilderService",
                        "type": "PepQueryBuilderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RichTextService",
            "id": "injectable-RichTextService-3bb29c1725fcb948b80d7fef15ef779ccf373f977337f5359ba7894b9a6d1eea3f79d943623b41a6cca1af7b68bc17b284eaf5603aaf6cb670adca6916206c21",
            "file": "projects/ngx-composite-lib/rich-text/rich-text.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "searchFlows",
                    "args": [
                        {
                            "name": "flowKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "flowKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { PepHttpService, PepSessionService } from '@pepperi-addons/ngx-lib';\nimport { lastValueFrom } from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RichTextService {\n    \n    constructor(\n        private httpService: PepHttpService\n        ) {\n    }\n    \n    async searchFlows(flowKey: string): Promise<any> {\n        return lastValueFrom(await this.httpService.postPapiApiCall('/user_defined_flows/search', { KeyList: [flowKey], Fields: ['Key', 'Name']}));\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "PepHttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "PepHttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "FileStatus",
            "id": "class-FileStatus-4b035ef0afe14a3e8ee2925ca9d4ea8bbe41d32bb4cef6ea10d808cf3a06336d2b9c4ccf0ffbac1b8fb5014d8de3d9774d3a2490d0611c1687d0c750a59ec20b",
            "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export type FileStatusType = 'uploading' | 'downloading' | 'done' | 'failed' | 'hidden' | 'deleting';\r\n\r\nexport class FileStatus {\r\n    key = 0;\r\n    name = '';\r\n    status: FileStatusType = 'uploading';\r\n    statusMessage? = '';\r\n}",
            "properties": [
                {
                    "name": "key",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "status",
                    "defaultValue": "'uploading'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FileStatusType",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "statusMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepColorSettings",
            "id": "class-PepColorSettings-a52806197fbf1cd2eae55c72e9bfcd31f5149a83b5ed75e92d3aadb1cf823670b90d5b697da16ed91cab397f3d8a93d605e2c4a46a4bc9ec1b3c313dee63a413",
            "file": "projects/ngx-composite-lib/color-settings/color-settings.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PepColorSettings {\r\n    use: boolean;\r\n    value: string;\r\n    opacity = 50;\r\n  \r\n    constructor(use = false, value = 'hsl(0, 0%, 57%)', opacity = 50) {\r\n        this.use =  use;\r\n        this.value = value;\r\n        this.opacity = opacity;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "use",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'hsl(0, 0%, 57%)'"
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "50"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "use",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'hsl(0, 0%, 57%)'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "50",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "opacity",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "use",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepShadowSettings",
            "id": "class-PepShadowSettings-e450250cd5384a6f58afdfea42a93d2112de0c90b90dcff6ddea005c36ab223e3125ef1d95f8bc0ffa653691a944cbba74aa56cd3674543fb51884519157d302",
            "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PepSizeType } from \"@pepperi-addons/ngx-lib\";\r\n\r\nexport type PepShadowIntensityType = 'soft' | 'regular' | 'hard';\r\nexport class PepShadowSettings {\r\n    use: boolean;\r\n    size: PepSizeType;\r\n    intensity: PepShadowIntensityType;\r\n\r\n    constructor(use = false, size: PepSizeType = 'md', intensity: PepShadowIntensityType = 'soft') {\r\n        this.use =  use;\r\n        this.size = size;\r\n        this.intensity = intensity;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "use",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    },
                    {
                        "name": "size",
                        "type": "PepSizeType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'md'"
                    },
                    {
                        "name": "intensity",
                        "type": "PepShadowIntensityType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'soft'"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "use",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "size",
                        "type": "PepSizeType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'md'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "intensity",
                        "type": "PepShadowIntensityType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'soft'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "intensity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepShadowIntensityType",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepSizeType",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "use",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "PepResetConfigurationFieldDirective",
            "id": "directive-PepResetConfigurationFieldDirective-f7c52ba6eb9bc6e07c8fe80d6c25b89f5cb3663dc906db24bca79a17ae1d305f5a35caac36fdda902ad89dffdd12ee153ef6e35be2cd9ce9e08bcb3e16e7244e",
            "file": "projects/ngx-composite-lib/src/core/common/directives/reset-configuration-field.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener, ElementRef, AfterViewInit, TemplateRef, ViewContainerRef, Renderer2, Output, EventEmitter, Input, OnDestroy } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { PepSizeType, PepStyleStateType, PepStyleType } from '@pepperi-addons/ngx-lib';\r\nimport { PepIconService, pepIconDeviceResponsive } from '@pepperi-addons/ngx-lib/icon';\r\n\r\n\r\n@Directive({\r\n    selector: '[pepResetConfigurationField]',\r\n})\r\nexport class PepResetConfigurationFieldDirective implements AfterViewInit, OnDestroy {\r\n    @Input('pepResetConfigurationField') resetFieldKey = '';\r\n    @Input() resetHostEvents: EventEmitter<any> = new EventEmitter();\r\n    \r\n    private _disabled = false;\r\n    @Input() \r\n    set disabled(value: boolean) {\r\n        this._disabled = value;\r\n        // this.renderer.setStyle(this.buttonContainer, 'visibility', this.getVisibility());\r\n        this.setButtonStyle(this.resetButton);\r\n    }\r\n    get disabled(): boolean {\r\n        return this._disabled;\r\n    }\r\n\r\n    private _hideReset = false;\r\n    @Input() \r\n    set hideReset(value: boolean) {\r\n        this._hideReset = value;\r\n        // this.renderer.setStyle(this.buttonContainer, 'visibility', this.getVisibility());\r\n        this.setButtonStyle(this.resetButton);\r\n    }\r\n    get hideReset(): boolean {\r\n        return this._hideReset;\r\n    }\r\n\r\n    private _dir: 'rtl' | 'ltr' = 'ltr';\r\n    @Input() \r\n    set dir(value: 'rtl' | 'ltr') {\r\n        this._dir = value;\r\n        this.renderer.setStyle(this.buttonContainer, 'float', this.getFloat());\r\n    }\r\n    get dir(): 'rtl' | 'ltr' {\r\n        return this._dir;\r\n    }\r\n\r\n    // styleType: PepStyleType = 'weak';\r\n    // styleStateType: PepStyleStateType = 'system';\r\n    sizeType: PepSizeType = 'sm';\r\n    resetPosition = 'bottom-end';\r\n    \r\n    private unlistener: (() => void) | undefined;\r\n    private buttonContainer!: HTMLDivElement;\r\n    private resetButton!: HTMLButtonElement;\r\n\r\n    constructor(\r\n        private renderer:Renderer2,\r\n        private element: ElementRef,\r\n        private pepIconService: PepIconService,\r\n        private translate: TranslateService) {\r\n        // Create the buton container.\r\n        this.buttonContainer = this.renderer.createElement('div');\r\n\r\n        this.translate.get('GENERAL.RESET_HINT').toPromise().then(hint => {\r\n            this.renderer.setAttribute(this.buttonContainer, 'title', hint);\r\n        });\r\n    }\r\n\r\n    private getVisibility() {\r\n        return this.disabled || this.hideReset ? 'hidden' : 'visible';\r\n    }\r\n\r\n    private getFloat() {\r\n        return this.dir === 'rtl' ? 'left' : 'right';\r\n    }\r\n\r\n    private setButtonContainerStyle() {\r\n        const css = `\r\n            display: flex;\r\n            justify-content: flex-end;\r\n            float: ${this.getFloat()};\r\n            margin-bottom: 1rem;\r\n        `;\r\n\r\n        this.buttonContainer.setAttribute(\"style\", css);\r\n    }\r\n\r\n    private setButtonStyle(button: HTMLButtonElement) {\r\n        if (button) {\r\n            const css = `\r\n                display: flex !important;\r\n                align-items: center !important;\r\n                height: 1rem !important;\r\n                line-height: unset !important;\r\n                padding: unset !important;\r\n                background: unset !important;\r\n                font-size: var(--pep-button-2xs-font-size) !important;\r\n                visibility: ${this.getVisibility()};\r\n            `;\r\n    \r\n            button.setAttribute(\"style\", css);\r\n        }\r\n    }\r\n\r\n    private setSvgStyle(svg: SVGElement) {\r\n        const css = `\r\n            transform: rotate(270deg);\r\n            width: 0.75rem;\r\n        `;\r\n        svg.setAttribute('style', css);\r\n    }\r\n\r\n    private async getResetElement(): Promise<HTMLElement> {\r\n        this.setButtonContainerStyle();\r\n        this.renderer.addClass(this.buttonContainer, 'pep-reset-configuration-field-container');\r\n\r\n        // Append button\r\n        this.resetButton = this.renderer.createElement('button');\r\n        await this.translate.get('ACTIONS.RESET').toPromise().then(resetText => {\r\n            const buttonText = this.renderer.createText(resetText);\r\n            this.renderer.appendChild(this.resetButton, buttonText);\r\n        });\r\n        \r\n        this.renderer.addClass(this.resetButton, 'pep-button');\r\n        // this.renderer.addClass(button, this.styleType);\r\n        // this.renderer.addClass(button, this.styleStateType);\r\n        this.renderer.addClass(this.resetButton, 'color-link');\r\n        this.renderer.addClass(this.resetButton, this.sizeType);\r\n        this.setButtonStyle(this.resetButton);\r\n        // this.renderer.addClass(button, 'reset-configuration-field-button');\r\n        \r\n        this.unlistener = this.renderer.listen(this.resetButton, 'click', () => this.onResetClicked());\r\n        \r\n        this.renderer.appendChild(this.buttonContainer, this.resetButton);\r\n\r\n        // Append svg\r\n        const svgIcon = this.pepIconService.getSvgIcon(pepIconDeviceResponsive.name);\r\n        this.setSvgStyle(svgIcon);\r\n        this.renderer.appendChild(this.buttonContainer, svgIcon);\r\n\r\n        return this.buttonContainer;\r\n    }\r\n    \r\n    ngAfterViewInit(): void {\r\n        this.getResetElement().then(element => {\r\n            if (this.resetPosition === 'top-end' && this.element.nativeElement.children?.length > 0) {\r\n                this.renderer.insertBefore(this.element.nativeElement, element, this.element.nativeElement.children[0]);\r\n            } else {\r\n                this.renderer.appendChild(this.element.nativeElement, element);\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.unlistener) {\r\n            this.unlistener();\r\n        }\r\n    }\r\n\r\n    onResetClicked() {\r\n        this.resetHostEvents.emit({\r\n            action: 'set-configuration-field',\r\n            key: this.resetFieldKey,\r\n            value: undefined\r\n        });\r\n    }\r\n}\r\n",
            "selector": "[pepResetConfigurationField]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [
                {
                    "name": "dir",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "\"rtl\" | \"ltr\"",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideReset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "pepResetConfigurationField",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "resetHostEvents",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_dir",
                    "defaultValue": "'ltr'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"rtl\" | \"ltr\"",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_hideReset",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "buttonContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLDivElement",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resetButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLButtonElement",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resetPosition",
                    "defaultValue": "'bottom-end'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "sizeType",
                    "defaultValue": "'sm'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepSizeType",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "unlistener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | undefined",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getFloat",
                    "args": [],
                    "optional": false,
                    "returnType": "\"right\" | \"left\"",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getResetElement",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<HTMLElement>",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "getVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "\"hidden\" | \"visible\"",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResetClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setButtonContainerStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setButtonStyle",
                    "args": [
                        {
                            "name": "button",
                            "type": "HTMLButtonElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "button",
                            "type": "HTMLButtonElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSvgStyle",
                    "args": [
                        {
                            "name": "svg",
                            "type": "SVGElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "svg",
                            "type": "SVGElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pepIconService",
                        "type": "PepIconService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pepIconService",
                        "type": "PepIconService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 21
                    }
                },
                "hideReset": {
                    "name": "hideReset",
                    "setSignature": {
                        "name": "hideReset",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "hideReset",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 32
                    }
                },
                "dir": {
                    "name": "dir",
                    "setSignature": {
                        "name": "dir",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "\"rtl\" | \"ltr\"",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "\"rtl\" | \"ltr\"",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "dir",
                        "type": "",
                        "returnType": "\"rtl\" | \"ltr\"",
                        "line": 42
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-47a6989dfedee3ffb89543427b0318a5db4564867d295d6401bb1ee2966d5eca8abc085881e09e0d3cdd31c9070e91599331442effc1d25c1bb2f1ebaa0fad8a",
            "file": "projects/ngx-composite-lib-tester/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss",
                "./app.component.theme.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addPadding",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "customizationService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepCustomizationService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "footerHeight",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "layoutService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepLayoutService",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "loaderService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepLoaderService",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "showHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showLoader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "showSidebar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getTopBarStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "PepStyleType",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onHostEvents",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n    PepCustomizationService,\n    PepLoaderService,\n    PepLayoutService,\n    PepStyleType,\n} from '@pepperi-addons/ngx-lib';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss', './app.component.theme.scss'],\n})\nexport class AppComponent implements OnInit {\n    footerHeight = 0;\n    showLoader = false;\n    showHeader = true;\n    showSidebar = false;\n    addPadding = true;\n\n    constructor(\n        public customizationService: PepCustomizationService,\n        public loaderService: PepLoaderService,\n        public layoutService: PepLayoutService,\n    ) {\n        // this.loaderService.show();\n        this.loaderService.onChanged$.subscribe((show) => {\n            this.showLoader = show;\n        });\n    }\n\n    ngOnInit() {\n        this.customizationService.setThemeVariables();\n        this.customizationService.hideSettings();\n\n        this.customizationService.footerHeight.subscribe((footerHeight) => {\n            this.footerHeight = footerHeight;\n        });\n    }\n\n    getTopBarStyle() {\n        return document.documentElement.style.getPropertyValue(\n            PepCustomizationService.STYLE_TOP_HEADER_KEY\n        ) as PepStyleType;\n    }\n\n    navigateHome() {\n        alert('Home');\n    }\n\n    onHostEvents(event: any) {\n        //\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '@pepperi-addons/ngx-lib/src/core/style/abstracts/mixins';\r\n@import '@pepperi-addons/ngx-lib/src/core/style/abstracts/variables';\r\n@import 'ngx-composite-lib/src/core/style/abstracts/variables';\r\n\r\n#header {\r\n    height: $header-height;\r\n\r\n    .navbar {\r\n        // border: none !important;\r\n        border-radius: 0;\r\n        // @include box-sizing(border-box);\r\n        box-sizing: border-box;\r\n        height: inherit;\r\n        width: 100%;\r\n        padding: $spacing-lg $double-content-padding;\r\n        margin: 0;\r\n        max-width: $max-scr-width;\r\n\r\n        @media (max-width: $screen-max-size-xs) {\r\n            padding-left: $content-padding;\r\n            padding-right: $content-padding;\r\n        }\r\n\r\n        .navbar-default {\r\n            background-color: transparent;\r\n            border-bottom-color: transparent;\r\n        }\r\n    }\r\n}\r\n\r\n#mainCont {\r\n    flex-grow: 1;\r\n    min-height: 100%;\r\n}\r\n\r\n#loadingSpinnerModal {\r\n    z-index: $z-index-high + 101;\r\n    height: 1rem;\r\n    width: 100%;\r\n    background-color: transparent;\r\n    opacity: 1;\r\n    position: absolute;\r\n    top: $header-height !important;\r\n    overflow: hidden;\r\n}\r\n\r\n#loadingSpinner {\r\n    z-index: $z-index-high;\r\n    width: 100%;\r\n    margin-top: 5px;\r\n\r\n    div {\r\n        width: 7px;\r\n        height: 7px;\r\n        position: absolute;\r\n        left: -20px;\r\n        border-radius: 50%;\r\n        animation: move 4s infinite cubic-bezier(0.2, 0.64, 0.81, 0.23);\r\n    }\r\n\r\n    div:nth-child(2) {\r\n        animation-delay: 150ms;\r\n    }\r\n\r\n    div:nth-child(3) {\r\n        animation-delay: 300ms;\r\n    }\r\n\r\n    div:nth-child(4) {\r\n        animation-delay: 450ms;\r\n    }\r\n\r\n    div:nth-child(5) {\r\n        animation-delay: 600ms;\r\n    }\r\n}\r\n\r\n@keyframes move {\r\n    0% {\r\n        left: 0%;\r\n    }\r\n    50% {\r\n        left: 100%;\r\n    }\r\n    75% {\r\n        left: 100%;\r\n    }\r\n    100% {\r\n        left: 100%;\r\n    }\r\n}\r\n\r\n[dir='rtl'] {\r\n    #loadingSpinner {\r\n        div {\r\n            animation: moveOpp 4s infinite cubic-bezier(0.2, 0.64, 0.81, 0.23);\r\n        }\r\n\r\n        div:nth-child(2) {\r\n            animation-delay: 150ms;\r\n        }\r\n        div:nth-child(3) {\r\n            animation-delay: 300ms;\r\n        }\r\n        div:nth-child(4) {\r\n            animation-delay: 450ms;\r\n        }\r\n        div:nth-child(5) {\r\n            animation-delay: 600ms;\r\n        }\r\n    }\r\n\r\n    @keyframes moveOpp {\r\n        0% {\r\n            left: 100%;\r\n        }\r\n        50% {\r\n            left: -2%;\r\n        }\r\n        75% {\r\n            left: -2%;\r\n        }\r\n        100% {\r\n            left: -2%;\r\n        }\r\n    }\r\n}\r\n\r\n.pep-layout {\r\n    display: grid;\r\n    grid-template-rows: $header-height 1fr;\r\n    grid-template-areas: \"header\"\r\n                         \"main\";\r\n    height: 100vh;\r\n    width: 100%;\r\n    padding: 0;\r\n    overflow: hidden;\r\n\r\n    .pep-header-layout {\r\n        grid-area: header;\r\n        z-index: $z-index-high + 1;\r\n    }\r\n\r\n    .pep-main-layout {\r\n        $main-layout-height: calc(100vh - #{$header-height});\r\n        height: 100%; \r\n        grid-area: main;\r\n        display: flex;\r\n        overflow: hidden;\r\n        \r\n        &.add-padding {\r\n            padding-inline: $content-padding;\r\n\r\n            @media (max-width: $screen-max-size-xs) {\r\n                padding-inline: 0;\r\n            }\r\n        }\r\n\r\n        .pep-side-layout {\r\n            grid-area: side;\r\n            width: auto;\r\n        }\r\n\r\n        .pep-center-layout {\r\n            grid-area: center;\r\n            height: 100%;\r\n            width: 100%;\r\n            overflow: auto;\r\n\r\n            ::ng-deep > * {\r\n                height: inherit;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // .pep-footer-layout {\r\n    //     grid-area: footer;\r\n    //     display: block;\r\n    // }\r\n}",
                    "styleUrl": "./app.component.scss"
                },
                {
                    "data": "@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/mixins';\n@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/functions';\n\n#header {\n    background-color: functions.get-pep-color(color-system-primary-invert, color-base);\n\n    .navbar {\n        box-shadow: functions.get-pep-shadow(shadow-sm, regular);\n        \n        &.weak {\n            @include mixins.state-weak-default(color-top-header);\n        }\n        \n        &.regular {\n            @include mixins.state-regular-default(true, color-top-header);\n        }\n        \n        &.strong {\n            @include mixins.state-strong-default(color-top-header);\n        }\n        \n        border-right: none !important;\n        border-left: none !important;\n    }\n}",
                    "styleUrl": "./app.component.theme.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "PepLoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "PepLoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"loadingSpinnerModal\" *ngIf=\"showHeader\" [hidden]=\"!showLoader\" pepRtlClass>\n    <div id=\"loadingSpinner\">\n        <div class=\"pep-loading-spinner\" *ngFor=\"let number of [0, 1, 2, 3, 4]\"\n            [ngStyle]=\"{ 'background-color': customizationService.getLoadingSpinnerColor() }\"></div>\n    </div>\n</div>\n<div class=\"pep-layout\" dir=\"{{ layoutService.isRtl() ? 'rtl' : 'ltr' }}\">\n    <header class=\"pep-header-layout\">\n        <div id=\"header\" pepRtlClass>\n            <nav class=\"navbar {{ getTopBarStyle() }} navbar-light bg-faded menuCont\"\n                [ngStyle]=\"{'background-color': customizationService.getBrandingMainColor() }\">\n                <div class=\"pep-spacing-element-negative\">\n                    <pep-button sizeType=\"sm\" styleType=\"weak\" classNames=\"keep-background-on-focus\"\n                        class=\"pep-spacing-element pull-left flip\" iconName=\"system_home\" (click)=\"navigateHome()\">\n                    </pep-button>\n                </div>\n                <div class=\"pep-spacing-element-negative\">\n                    <pep-button [value]=\"'ExampleComponentsTitle' | translate\" sizeType=\"sm\" styleType=\"weak\"\n                        class=\"pep-spacing-element pull-right flip\" classNames=\"keep-background-on-focus\"\n                        [routerLink]=\"['components-example']\">\n                    </pep-button>\n                    <pep-button [value]=\"'GenericListExampleComponentTitle' | translate\" sizeType=\"sm\" styleType=\"weak\"\n                        class=\"pep-spacing-element pull-right flip\" classNames=\"keep-background-on-focus\"\n                        [routerLink]=\"['generic-list-example']\">\n                    </pep-button>\n                    <pep-button [value]=\"'FormGeneratorExampleComponent' | translate\" sizeType=\"sm\" styleType=\"weak\"\n                        class=\"pep-spacing-element pull-right flip\" classNames=\"keep-background-on-focus\"\n                        [routerLink]=\"['generic-form-example']\">\n                    </pep-button>\n                    <pep-button [value]=\"'DataViewBuilderExampleComponent' | translate\" sizeType=\"sm\" styleType=\"weak\"\n                        class=\"pep-spacing-element pull-right flip\" classNames=\"keep-background-on-focus\"\n                        [routerLink]=\"['data-view-builder-example']\">\n                    </pep-button>\n                </div>\n            </nav>\n        </div>\n    </header>\n    <main class=\"pep-main-layout\" [ngClass]=\"{ 'add-padding': addPadding }\">\n        <aside *ngIf=\"showSidebar\" class=\"pep-side-layout\">\n        </aside>\n        <div class=\"pep-center-layout\">\n            <router-outlet></router-outlet>\n            <!-- Check this for demostrate the block editor that raise hostEvents  -->\n            <!-- <app-components-example (hostEvents)=\"onHostEvents($event)\"></app-components-example> -->\n        </div>\n    </main>\n</div>\n<pep-size-detector></pep-size-detector>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ColorSettingsComponent",
            "id": "component-ColorSettingsComponent-4665852c116f01dbf6577344e177341ac87fc52535f727ddfbfc86f64b058fae188a44e2af11bb7726f5feb995d5744e07c66b6015967e52880ae6d0fb0bdeeb",
            "file": "projects/ngx-composite-lib/color-settings/color-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-color-settings",
            "styleUrls": [
                "./color-settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-settings.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checkAAComplient",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "PepColorSettings",
                    "decorators": []
                },
                {
                    "name": "showAAComplient",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "colorChange",
                    "defaultValue": "new EventEmitter<PepColorSettings>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<PepColorSettings>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_color",
                    "defaultValue": "new PepColorSettings()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepColorSettings",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getRGBAcolor",
                    "args": [
                        {
                            "name": "colorObj",
                            "type": "PepColorSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "opac",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "colorObj",
                            "type": "PepColorSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "opac",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSliderBackground",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onColorChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSliderInputChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSliderValueChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUseChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "raiseColorChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { PepColorService } from '@pepperi-addons/ngx-lib';\nimport { PepColorSettings } from './color-settings.model';\n\n@Component({\n    selector: 'pep-color-settings',\n    templateUrl: './color-settings.component.html',\n    styleUrls: ['./color-settings.component.scss']\n})\nexport class ColorSettingsComponent implements OnInit {\n    @Input() title = '';\n    @Input() checkAAComplient = true;\n    @Input() showAAComplient = true;\n\n    private _color: PepColorSettings = new PepColorSettings();\n    @Input()\n    set color(value: PepColorSettings) {\n        if (!value) {\n            this._color = new PepColorSettings();\n        } else {\n            this._color = value;\n        }\n    }\n    get color(): PepColorSettings {\n        return this._color;\n    }\n\n    @Output()\n    colorChange: EventEmitter<PepColorSettings> = new EventEmitter<PepColorSettings>();\n    \n    constructor(private pepColorService: PepColorService) { }\n\n    ngOnInit() {\n        //\n    }\n\n    private getRGBAcolor(colorObj: PepColorSettings, opac: number | null = null) {\n        let rgba = 'rgba(255,255,255,0)';\n\n        if (colorObj) {\n            const color = colorObj.value;\n            let opacity = opac != null ? opac : colorObj.opacity;\n\n            opacity = opacity > 0 ? opacity / 100 : 0;\n\n            const hsl = this.pepColorService.hslString2hsl(color);\n            const rgb = this.pepColorService.hsl2rgb(hsl);\n            rgba = 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + opacity + ')';\n        }\n\n        return rgba;\n    }\n\n    private raiseColorChange() {\n        this.colorChange.emit(this.color);\n    }\n\n    getSliderBackground() {\n        const alignTo = 'right';\n    \n        const colorObj = new PepColorSettings();\n    \n        colorObj.value = this.color.value;\n        colorObj.opacity = 100;\n    \n        const gradStr = this.getRGBAcolor(colorObj, 0) + ' , ' + this.getRGBAcolor(colorObj);\n    \n        return 'linear-gradient(to ' + alignTo + ', ' + gradStr + ')';\n    }\n\n    onUseChanged(value: boolean) {\n        this.color.use = value;\n        this.raiseColorChange();\n    }\n\n    onColorChanged(value: string) {\n        this.color.value = value;\n        this.raiseColorChange();\n    }\n    \n    onSliderInputChanged(value: number) {\n        this.color.opacity = value;\n    }\n\n    onSliderValueChanged(value: number) {\n        this.color.opacity = value;\n        this.raiseColorChange();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    width: 100%;\r\n    // max-width: 200px;\r\n}",
                    "styleUrl": "./color-settings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pepColorService",
                        "type": "PepColorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "pepColorService",
                        "type": "PepColorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "color": {
                    "name": "color",
                    "setSignature": {
                        "name": "color",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "PepColorSettings",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "PepColorSettings",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "color",
                        "type": "",
                        "returnType": "PepColorSettings",
                        "line": 24
                    }
                }
            },
            "templateData": "<pep-checkbox class=\"checkbox-as-title\" [label]=\"title\" [renderTitle]=\"false\" [value]=\"color.use\"\n    (valueChange)=\"onUseChanged($event)\"></pep-checkbox>\n<pep-color [value]=\"color.value\" [label]=\"title + ' ' + ('COLOR_SETTINGS.COLOR' | translate)\" [disabled]=\"!color.use\"\n    [checkAAComplient]=\"checkAAComplient\" [showAAComplient]=\"showAAComplient\" (valueChange)=\"onColorChanged($event)\">\n</pep-color>\n<pep-slider [label]=\"title + ' ' + ('COLOR_SETTINGS.OPACITY' | translate)\" [hint]=\"color.opacity.toString() || ''\"\n    [minValue]=\"0\" [maxValue]=\"100\" [disabled]=\"!color.use\" [value]=\"color.opacity\" [background]=\"getSliderBackground()\"\n    (inputChange)=\"onSliderInputChanged($event)\" (valueChange)=\"onSliderValueChanged($event)\">\n</pep-slider>"
        },
        {
            "name": "ComponentsExampleComponent",
            "id": "component-ComponentsExampleComponent-597c51eab8eb6edaf92b2da5a1257d608fd8a80607ae76ef9aac288c924dd0667e6c281b9a1ac27cf00066811fd10164fcc5ec0137280aad0360a45e54263d41",
            "file": "projects/ngx-composite-lib-tester/src/app/components-example/components-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-components-example",
            "styleUrls": [
                "./components-example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./components-example.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "hostEvents",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "badgeColor",
                    "defaultValue": "new PepColorSettings(true, 'hsl(50, 0%, 90%)', 75)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "files",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<FileStatus>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "menuItems",
                    "defaultValue": "[{\"key\":'dimxexport', \"text\":\"Export\"}, {\"key\":'dimximport', \"text\":\"Import\"}]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "selectedMenuItem",
                    "defaultValue": "{\"key\":'dimxexport'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "addFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "menuClick",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "menuItemClick",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "testOpenDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output, ViewChild, ViewContainerRef } from '@angular/core';\nimport { PepColorSettings } from '@pepperi-addons/ngx-composite-lib/color-settings';\nimport { FileStatus } from '@pepperi-addons/ngx-composite-lib/file-status-panel';\nimport { PepDialogService, PepDialogData, PepDialogSizeType, PepDialogActionButton } from '@pepperi-addons/ngx-lib/dialog';\n\n@Component({\n    selector: 'app-components-example',\n    templateUrl: './components-example.component.html',\n    styleUrls: ['./components-example.component.scss'],\n})\nexport class ComponentsExampleComponent implements OnInit {\n    public files: Array<FileStatus> = [];\n\n    @Output() hostEvents: EventEmitter<any> = new EventEmitter();\n    \n    constructor(private dialog: PepDialogService) { \n        //\n    }\n\n    ngOnInit(): void {\n        \n        this.addFiles();\n        \n    }\n    badgeColor = new PepColorSettings(true, 'hsl(50, 0%, 90%)', 75);\n    menuItems = [{\"key\":'dimxexport', \"text\":\"Export\"}, {\"key\":'dimximport', \"text\":\"Import\"}];\n    selectedMenuItem = {\"key\":'dimxexport'};\n    menuItemClick(value: any){\n        console.log(`menu item was clicked with value ${JSON.stringify(value)}`);\n       \n        // TODO: add dimx addon loader example code here\n        switch(value[\"source\"][\"key\"]) {\n            // case \"dimxexport\":\n            //     this.dimx?.DIMXExportRun({\"DIMXExportFormat\":\"csv\"});\n            //     break;\n            // case \"dimximport\":\n            //     this.dimx?.uploadFile({});\n                \n            //     break;\n            default:\n                console.log(\"default reached in menuItemClick switch-case\");\n        }\n        \n    }\n\n    menuClick(value: any){\n        console.log(`menu click with value: ${JSON.stringify(value)}`);\n    }\n\n    addFiles(){\n        const file: FileStatus = new FileStatus();\n        file.name = 'Test';\n        file.status = 'downloading';\n        \n        window.setInterval(() => { \n            this.files.push(file);\n            if(this.files.length === 4){\n                this.files[2].status = 'done';\n                this.files[0].status = 'failed';\n            }\n            else if(this.files.length === 6){\n                this.files = [];\n            }\n        }, 2000);\n    }\n\n    testOpenDialog() {\n        const data = new PepDialogData({\n            title: 'dialog title',\n            content: 'dialog content text',\n            actionsType: 'close'\n          });\n          const config = this.dialog.getDialogConfig({ minWidth: '30rem' }, 'regular');\n      \n          this.dialog.openDefaultDialog(data, config).afterClosed().subscribe(action => {\n            if (action) {\n              console.log('action', action);\n            }\n          });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".components-container {\r\n    display: flex;\r\n    flex-flow: column;\r\n    padding: 1rem;\r\n    width: 300px;\r\n    gap: 1rem;\r\n}",
                    "styleUrl": "./components-example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "PepDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "PepDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"components-container\">\n    <pep-menu [text]=\"'text'\" iconName=\"system_menu\" type=\"action\" styleType=\"weak\" sizeType=\"md\" classNames=\"hahah\"\n        [items]=\"menuItems\" [selectedItem]=\"selectedMenuItem\" [disabled]=\"false\" (menuItemClick)=\"menuItemClick($event)\"\n        (menuClick)=\"menuClick($event)\"></pep-menu>\n    <pep-color-settings title=\"Color\"></pep-color-settings>\n    <pep-shadow-settings></pep-shadow-settings>\n    <!-- <pep-button value=\"click here\"></pep-button> -->\n    <pep-group-buttons-settings [groupType]=\"'left-right-arrows'\" [title]=\"'Group buttons'\" [subHeader]=\"'Eisenberg'\"\n        pepResetConfigurationField=\"'group-buttons-test'\" [dir]=\"'ltr'\" [resetHostEvents]=\"hostEvents\">\n    </pep-group-buttons-settings>\n    <pep-button [value]=\"'open dialog'\" [sizeType]=\"'sm'\" [styleType]=\"'regular'\" (click)=\"testOpenDialog()\">\n    </pep-button>\n    <pep-icon-picker [disabled]=\"false\" [useCheckBoxHeader]=\"false\"></pep-icon-picker>\n    <pep-rich-text [value]=\"'This is test text'\" \n        [label]=\"'Rich text test'\" [inlineMode]=\"false\" >\n\n    </pep-rich-text>\n    <div style=\"height:2rem; width: 20rem; background-color:antiquewhite;\">\n        <pep-show-if-badge [showIf]=\"true\" [iconName]=\"'system_menu'\" [backgroundColor]=\"'hsl(39, 100%, 50%)'\"></pep-show-if-badge>\n    </div>\n</div>"
        },
        {
            "name": "DataViewBuilderComponent",
            "id": "component-DataViewBuilderComponent-e4d9067e89ac3698fc3abd96f0a803187dbdd2735a15f150f677123128162e201b9be7693a36aeaeb8933ccc35beb47cebeb2ae72fc6047b994acb24ef32aba4",
            "file": "projects/ngx-composite-lib/data-view-builder/data-view-builder.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-data-view-builder",
            "styleUrls": [
                "./data-view-builder.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./data-view-builder.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "availableFields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "Array<IPepDraggableItem>",
                    "decorators": []
                },
                {
                    "name": "builderTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "builderTitleHint",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dataView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "BaseDataView",
                    "decorators": []
                },
                {
                    "name": "itemKeyLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "itemTitleLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showAddSeparator",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "dataViewChange",
                    "defaultValue": "new EventEmitter<BaseDataView>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter<BaseDataView>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_availableFields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IPepDraggableItem>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_dataView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseDataView",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "availableFieldsTitles",
                    "defaultValue": "new Map<string, string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | string>",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "emptyDropAreaId",
                    "defaultValue": "'emptyDropArea'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "mappedFieldsId",
                    "defaultValue": "'mappedFields'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "type",
                    "defaultValue": "'not-supported'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepDataViewBuilderType",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "notifyDataViewChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onDragEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragEnd",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragEnd",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragStart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragStart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFieldsChanged",
                    "args": [
                        {
                            "name": "fields",
                            "type": "Array<DataViewField>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "Array<DataViewField>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshAvailableFields",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setAvailableFieldPermission",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disable",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disable",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTitlesMap",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setType",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CdkDragEnd, CdkDragStart } from '@angular/cdk/drag-drop';\nimport { Component, EventEmitter, Input, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\nimport { IPepDraggableItem } from '@pepperi-addons/ngx-lib/draggable-items';\nimport { BaseDataView, DataViewField } from '@pepperi-addons/papi-sdk';\nimport { PepDataViewBuilderType } from './data-view-builder.model';\nimport { DataViewBuilderService } from './data-view-builder.service';\n\n@Component({\n    selector: 'pep-data-view-builder',\n    templateUrl: './data-view-builder.component.html',\n    styleUrls: ['./data-view-builder.component.scss']\n})\nexport class DataViewBuilderComponent implements OnInit {\n    // @Input() title: string = '';\n    @Input() builderTitle = '';\n    @Input() builderTitleHint = '';\n    @Input() showAddSeparator = true;\n    @Input() itemKeyLabel = '';\n    @Input() itemTitleLabel = '';\n    \n    private _availableFields: Array<IPepDraggableItem> = [];\n    @Input()\n    set availableFields(value: Array<IPepDraggableItem>) {\n        this._availableFields = value;\n        this.setTitlesMap();\n    }\n    get availableFields(): Array<IPepDraggableItem> {\n        return this._availableFields;\n    }\n    \n    private _dataView!: BaseDataView;\n    @Input()\n    set dataView(value: BaseDataView) {\n        this._dataView = value;\n        this.setType();\n        this.refreshAvailableFields();\n    }\n    get dataView() : BaseDataView {\n        return this._dataView;\n    }\n\n    @Output()\n    dataViewChange: EventEmitter<BaseDataView> = new EventEmitter<BaseDataView>();\n    \n    type: PepDataViewBuilderType = 'not-supported';\n    \n    emptyDropAreaId = 'emptyDropArea';\n    mappedFieldsId = 'mappedFields';\n\n    availableFieldsTitles: Map<string, string> = new Map<string, string>();\n\n    constructor(\n        private dataViewBuilderService: DataViewBuilderService\n    ) {\n        //\n    }\n\n    private setType() {\n        if (this._dataView.Type === 'Menu') {\n            this.type = 'menu';\n        } else if (this._dataView.Type === 'Grid') {\n            this.type = 'list';\n        } else if ((this._dataView.Type === 'Card') || \n                   (this._dataView.Type === 'Form') || \n                   (this._dataView.Type === 'Large') || \n                   (this._dataView.Type === 'Line')) {\n            this.type = 'card';\n        } else {\n            this.type = 'not-supported';\n        }\n    }\n\n    private setAvailableFieldPermission(field: string, disable: boolean) {\n        // Find the item in the available fields\n        const item = this.availableFields.find(as => as.data.key === field);\n        \n        // If exist disable or enable it.\n        if (item) {\n            item.disabled = disable;\n        }\n    }\n\n    private refreshAvailableFields() {\n        this.availableFields.forEach(af => af.disabled = false);\n        \n        if (this.dataView && this.dataView.Fields) {\n            for (let index = 0; index < this.dataView.Fields.length; index++) {\n                this.setAvailableFieldPermission(this.dataView.Fields[index].FieldID, true);\n            }\n        }\n    }\n\n    private setTitlesMap() {\n        this.availableFieldsTitles.clear();\n\n        if (this.availableFields?.length > 0) {\n            for (let index = 0; index < this.availableFields.length; index++) {\n                const availableField = this.availableFields[index];\n\n                if (availableField?.data?.key.length > 0) {\n                    this.availableFieldsTitles.set(availableField.data.key, availableField.title);\n                }\n            }\n        }\n    }\n\n    private notifyDataViewChange() {\n        this.dataViewChange.emit(this.dataView);\n        // console.log(this.dataView);\n    }\n\n    ngOnInit() {\n        //\n    }\n\n    onDragStart(event: CdkDragStart) {\n        this.dataViewBuilderService.onDragStart(event);\n    }\n\n    onDragEnd(event: CdkDragEnd) {\n        this.dataViewBuilderService.onDragEnd(event);\n    }\n    \n    onFieldsChanged(fields: Array<DataViewField>) {\n        this.dataView.Fields = fields;\n        this.refreshAvailableFields();\n        this.notifyDataViewChange();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/variables' as ngx-variables;\r\n\r\n.mapped-fields-container {\r\n    display: grid;\r\n    height: 100%;\r\n    grid-template-columns: auto 1fr;\r\n    grid-template-areas: \r\n        \"side-area    main-area\";\r\n\r\n    .available-fields-side-area {\r\n        grid-area: side-area;\r\n        width: 240px;\r\n        max-width: 240px;\r\n        overflow: auto;\r\n        height: inherit;\r\n        padding-top: ngx-variables.$spacing-2xl;\r\n        margin-inline-end: ngx-variables.$double-content-margin;\r\n    }\r\n    \r\n    .mapped-fields-main-area {\r\n        display: grid;\r\n        grid-template-rows: auto 1fr;\r\n        grid-area: main-area;\r\n        padding-top: ngx-variables.$spacing-2xl;\r\n        overflow: auto;\r\n        height: inherit;\r\n\r\n        .mapped-fields-top-area {\r\n            height: ngx-variables.$top-bar-field-height;\r\n            display: flex;\r\n            align-items: center;\r\n\r\n            // &.pep-border-bottom {\r\n            //     margin-bottom: ngx-variables.$content-margin;\r\n            // }\r\n        }\r\n\r\n        .data-view-by-type-area {\r\n            overflow: auto;\r\n            height: inherit;\r\n            padding-top: ngx-variables.$content-margin;\r\n            padding-bottom: ngx-variables.$content-margin;\r\n            padding-inline: ngx-variables.$spacing-xs;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./data-view-builder.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataViewBuilderService",
                        "type": "DataViewBuilderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "dataViewBuilderService",
                        "type": "DataViewBuilderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "availableFields": {
                    "name": "availableFields",
                    "setSignature": {
                        "name": "availableFields",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "Array<IPepDraggableItem>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "Array<IPepDraggableItem>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "availableFields",
                        "type": "",
                        "returnType": "Array<IPepDraggableItem>",
                        "line": 27
                    }
                },
                "dataView": {
                    "name": "dataView",
                    "setSignature": {
                        "name": "dataView",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "BaseDataView",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "BaseDataView",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "dataView",
                        "type": "",
                        "returnType": "BaseDataView",
                        "line": 38
                    }
                }
            },
            "templateData": "<pep-page-layout >\n    <!-- <ng-container pep-top-area>\n        <pep-top-bar [title]=\"title\">\n            <div header-end-content>\n            </div>\n        </pep-top-bar>\n    </ng-container> -->\n    <ng-container pep-main-area>\n        <ng-container *ngIf=\"type === 'not-supported' ; then notSupportedTemplate; else supportedTemplate\"></ng-container>\n        <ng-template #notSupportedTemplate>\n            <span class=\"body-sm ellipsis\">\n                {{ 'DATA_VIEW_BUILDER.TYPE_NOT_SUPPORTED' | translate }}\n            </span> \n        </ng-template>\n        <ng-template #supportedTemplate>\n            <div *ngIf=\"dataView && availableFields\" class=\"mapped-fields-container\">\n                <div class=\"available-fields-side-area\">\n                    <pep-draggable-items [items]=\"availableFields\" [title]=\"'DATA_VIEW_BUILDER.AVAILABLE_FIELDS' | translate\" titleType=\"with-bottom-border\" titleSizeType=\"md\"\n                        itemPlaceholderType=\"weak\" [showSearch]=\"true\" [dropAreaIds]=\"['emptyDropArea', 'mappedFields']\" (itemDragStarted)=\"onDragStart($event)\" (itemDragEnded)=\"onDragEnd($event)\">\n                    </pep-draggable-items>\n                </div>\n                <div pep-main-area class=\"mapped-fields-main-area\">\n                    <div class=\"mapped-fields-top-area pep-border-bottom\"\n                        [title]=\"builderTitle + ' ' + (builderTitleHint ? ('(' + builderTitleHint + ')') : '')\">\n                        <span class=\"title-md\">{{ builderTitle }}&nbsp;</span>\n                        <span *ngIf=\"builderTitleHint\" class=\"color-dimmed\">({{ builderTitleHint }})</span>\n                    </div>\n                    \n                    <div class=\"data-view-by-type-area\" [ngSwitch]=\"type\">\n                        <ng-container *ngSwitchCase=\"'menu'\">\n                            <menu-data-view [fields]=\"dataView?.Fields || []\" [availableFieldsTitles]=\"availableFieldsTitles\" [emptyDropAreaId]=\"emptyDropAreaId\"\n                                [mappedFieldsId]=\"mappedFieldsId\" (fieldsChange)=\"onFieldsChanged($event)\" [showAddSeparator]=\"showAddSeparator\" [itemKeyLabel]=\"itemKeyLabel\" [itemTitleLabel]=\"itemTitleLabel\">\n                            </menu-data-view>\n                        </ng-container>\n                        <!-- <ng-container *ngSwitchDefault>\n                        </ng-container> -->\n                    </div>\n                </div>\n            </div>\n        </ng-template>\n    </ng-container>\n</pep-page-layout>\n\n"
        },
        {
            "name": "DataViewBuilderExampleComponent",
            "id": "component-DataViewBuilderExampleComponent-e13c1020f0848b0193386898f9a8eec756120a426e8630d18427903a8dfef2820d2fa2663ba103201374857f84f9db852a85b7a65264c610a0c40c0603ff0c08",
            "file": "projects/ngx-composite-lib-tester/src/app/data-view-builder-example/data-view-builder-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-data-view-builder-example",
            "styleUrls": [
                "./data-view-builder-example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./data-view-builder-example.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableFields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IPepDraggableItem>",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "dataView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuDataView",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "onDataViewChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output, ViewChild, ViewContainerRef } from '@angular/core';\nimport { IPepDraggableItem } from '@pepperi-addons/ngx-lib/draggable-items';\nimport { MenuDataView } from '@pepperi-addons/papi-sdk';\n\n@Component({\n    selector: 'app-data-view-builder-example',\n    templateUrl: './data-view-builder-example.component.html',\n    styleUrls: ['./data-view-builder-example.component.scss'],\n})\nexport class DataViewBuilderExampleComponent implements OnInit {\n\n    availableFields: Array<IPepDraggableItem> = [];\n    dataView!: MenuDataView;\n\n    constructor(\n    ) { \n        //\n    }\n\n    async ngOnInit() {\n        \n        // Get menu (slugs) dataview\n        this.dataView = {\n            \"InternalID\": 5731318,\n            \"Type\": \"Menu\",\n            \"Title\": \"\",\n            \"Hidden\": false,\n            \"CreationDateTime\": \"2022-04-10T14:19:03Z\",\n            \"ModificationDateTime\": \"2022-04-28T09:29:01Z\",\n            \"Context\": {\n                \"Name\": \"Slugs\",\n                \"ScreenSize\": \"Tablet\",\n                \"Profile\": {\n                    \"InternalID\": 72197,\n                    \"Name\": \"Admin\"\n                }\n            },\n            \"Fields\": [\n                {\n                    \"FieldID\": \"tomer_test\",\n                    \"Title\": \"tomer test\"\n                },\n                {\n                    \"FieldID\": \"tomer_admin\",\n                    \"Title\": \"tomer admin\"\n                }\n            ]\n        }\n\n        this.availableFields = [\n            { title: 'field 1', data: { key: 'field1' } },\n            { title: 'field 2', data: { key: 'field2' } },\n            { title: 'field 3', data: { key: 'field3' } },\n            { title: 'tomer test', data: { key: 'tomer_test' } },\n            { title: 'tomer admin', data: { key: 'tomer_admin' } },\n            { title: '1field 1', data: { key: '1field1' } },\n            { title: '1field 2', data: { key: '1field2' } },\n            { title: '1field 3', data: { key: '1field3' } },\n            { title: '1tomer test', data: { key: '1tomer_test' } },\n            { title: '1tomer admin', data: { key: '1tomer_admin' } },\n            { title: '2field 1', data: { key: '2field1' } },\n            { title: '2field 2', data: { key: '2field2' } },\n            { title: '2field 3', data: { key: '2field3' } },\n            { title: '2tomer test', data: { key: '2tomer_test' } },\n            { title: '2tomer admin', data: { key: '2tomer_admin' } },\n            { title: '3field 1', data: { key: '3field1' } },\n            { title: '3field 2', data: { key: '3field2' } },\n            { title: '3field 3', data: { key: '3field3' } },\n            { title: '3tomer test', data: { key: '3tomer_test' } },\n            { title: '3tomer admin', data: { key: '3tomer_admin' } }\n        ]\n    }\n\n    onDataViewChange(event: any) {\n        console.log('onDataViewChange', event);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./data-view-builder-example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<pep-data-view-builder builderTitle=\"sub test\" builderTitleHint=\"hint\"\n    [availableFields]=\"availableFields\" [dataView]=\"dataView\" (dataViewChange)=\"onDataViewChange($event)\"></pep-data-view-builder>\n"
        },
        {
            "name": "FileStatusPanelComponent",
            "id": "component-FileStatusPanelComponent-fe309f4e0c8fed0270a1cb44fed7285daf65beefc7d015adff036201a60ebf4e0aa7fa86fddbe1e8d7ba608cd3a225f1d176d6a1ad3296973c480b74a72799a6",
            "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-file-status-panel",
            "styleUrls": [
                "./file-status-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-status-panel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closeClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepSnackBarData",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_SNACK_BAR_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "snackBarRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSnackBarRef<FileStatusPanelComponent>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCloseClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Injectable, Input, Output, EventEmitter, Optional, Inject } from '@angular/core';\nimport { MatSnackBarRef, MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\nimport { TranslateService } from '@ngx-translate/core';\nimport { PepSnackBarData } from '@pepperi-addons/ngx-lib/snack-bar';\nimport { FileStatus } from './file-status-panel.model';\n\n@Component({\n    selector: 'pep-file-status-panel',\n    templateUrl: './file-status-panel.component.html',\n    styleUrls: ['./file-status-panel.component.scss']\n})\nexport class FileStatusPanelComponent implements OnInit {\n    // @Input() title = '';\n    // @Input() filesList: Array<FileStatus> = [];\n    \n    @Output()\n    closeClick: EventEmitter<void> = new EventEmitter<void>();\n    \n    constructor(\n        @Inject(MAT_SNACK_BAR_DATA) public data: PepSnackBarData,\n        public snackBarRef: MatSnackBarRef<FileStatusPanelComponent>\n    ) {\n       //\n    }\n\n    ngOnInit() {\n        //\n    }\n\n    onCloseClicked(event: any): void {\n        this.closeClick.emit();\n    }\n\n\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @use '@pepperi-addons/ngx-lib/src/core/style/abstracts/variables' as ngx-variables;\n\n.upload-panel-contnainer {\n    .panel-content {\n        max-height: 50vh;\n        overflow: auto;\n    \n        ul {\n            list-style-type: none;\n            padding: 0;  \n    \n            li {\n                height: 1.25rem;\n                margin-top: .5rem;\n                display: flex;\n                flex-direction: row;\n                align-items: center;\n    \n                pep-icon {\n                    height: 1rem;\n                }\n            }\n        }\n    }\n}\n",
                    "styleUrl": "./file-status-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "PepSnackBarData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBarRef",
                        "type": "MatSnackBarRef<FileStatusPanelComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "PepSnackBarData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarRef",
                        "type": "MatSnackBarRef<FileStatusPanelComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<pep-snack-bar class=\"upload-panel-contnainer\" [snackBarRef]=\"snackBarRef\" [title]=\"data.title\" (closeClick)=\"onCloseClicked($event)\" >\n    <div pep-snack-bar-content class=\"panel-content\">\n        <ul *ngIf=\"data.content.length\">\n            <li *ngFor=\"let file of data.content\">\n                <ng-container *ngIf=\"file?.status !== 'hidden'\">\n                    <span class=\"color-dimmed body-sm ellipsis\">{{file.name}}</span>\n                    <pep-icon class=\"pep-spacing-element\" name=\"arrow_right_alt\"></pep-icon>\n                    <span class=\"body-sm\" title=\"{{file.statusMessage}}\">{{file.status}}</span>\n                </ng-container>\n            </li>\n        </ul>\n    </div>\n</pep-snack-bar>"
        },
        {
            "name": "FlowPickerButtonComponent",
            "id": "component-FlowPickerButtonComponent-1888da87d3fd4646ee074b9082dce69cf8103aecf4e4fd44cda36e54bddc6f8ada36ce39864bed183c05ad82bdae309166b9d5ee97250a8565599b5de3fcfce6",
            "file": "projects/ngx-composite-lib/flow-picker-button/flow-picker-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-flow-picker-button",
            "styleUrls": [
                "./flow-picker-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./flow-picker-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "flowHostObject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "flowChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_flowHostObject",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "choosenFlowKey",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "choosenFlowName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "initChoosenFlow",
                    "args": [
                        {
                            "name": "flowKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "flowKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openFlowPickerDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setChoosenFlow",
                    "args": [
                        {
                            "name": "flowKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "flowKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, ViewContainerRef } from '@angular/core';\nimport { PepAddonBlockLoaderService } from '@pepperi-addons/ngx-lib/remote-loader';\nimport { FlowPickerService } from './flow-picker-button.service';\n\n@Component({\n    selector: 'pep-flow-picker-button',\n    templateUrl: './flow-picker-button.component.html',\n    styleUrls: ['./flow-picker-button.component.scss']\n})\nexport class FlowPickerButtonComponent implements OnInit {\n\n    private _flowHostObject: any = undefined;\n    @Input()\n    set flowHostObject(value: any) {\n        this._flowHostObject = value;\n        \n        // If there is a flow key - search for the flow name.\n        if (value?.runFlowData?.FlowKey) {\n            this.setChoosenFlow(value.runFlowData.FlowKey);\n        } else {\n            this.initChoosenFlow('');\n        }\n    }\n    get flowHostObject(): any {\n        return this._flowHostObject;\n    }\n\n    @Input() disabled = false;\n\n    @Output()\n    flowChange: EventEmitter<any> = new EventEmitter<any>();\n    \n    protected choosenFlowName = '';\n    protected choosenFlowKey = '';\n\n    constructor(\n        private viewContainerRef: ViewContainerRef,\n        private addonBlockLoaderService: PepAddonBlockLoaderService, \n        private flowPickerService: FlowPickerService) { }\n\n    private initChoosenFlow(flowKey: string) {\n        this.choosenFlowKey = flowKey;\n        this.choosenFlowName = '';\n    }\n\n    private setChoosenFlow(flowKey: string) {\n        // If this is not the same flow key\n        if (this.choosenFlowKey !== flowKey) {\n            this.initChoosenFlow(flowKey);\n    \n            // Search for the flow name.\n            this.flowPickerService.searchFlows(flowKey).then(flows => {\n                if (flows?.Objects?.length > 0) {\n                    this.choosenFlowName = flows.Objects[0].Name || undefined;\n                }\n            });\n        }\n    }\n\n    ngOnInit() {\n        // Do nothing.\n    }\n\n    openFlowPickerDialog() {\n        const dialogRef = this.addonBlockLoaderService.loadAddonBlockInDialog({\n            container: this.viewContainerRef,\n            name: 'FlowPicker',\n            size: 'large',\n            hostObject: this.flowHostObject,\n            hostEventsCallback: async (event) => {\n                if (event.action === 'on-done') {\n                    // If flow key exist - search for the flow name.\n                    if (event.data?.FlowKey) {\n                        this.setChoosenFlow(event.data.FlowKey);\n                        this.flowChange.emit(event.data);\n                    } else {\n                        this.initChoosenFlow('');\n                        this.flowChange.emit(null);\n                    }\n\n                    dialogRef?.close();\n                } else if (event.action === 'on-cancel') {\n                    dialogRef?.close();\n                }\n            }\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    width: 100%;\r\n    // max-width: 200px;\r\n}",
                    "styleUrl": "./flow-picker-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "addonBlockLoaderService",
                        "type": "PepAddonBlockLoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "flowPickerService",
                        "type": "FlowPickerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "addonBlockLoaderService",
                        "type": "PepAddonBlockLoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "flowPickerService",
                        "type": "FlowPickerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "flowHostObject": {
                    "name": "flowHostObject",
                    "setSignature": {
                        "name": "flowHostObject",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 14,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "flowHostObject",
                        "type": "any",
                        "returnType": "any",
                        "line": 24
                    }
                }
            },
            "templateData": "<pep-button class=\"flow-button\" \n    [value]=\"choosenFlowKey ? (choosenFlowName || choosenFlowKey) : ('FLOW_PICKER_BUTTON.CHOOSE_FLOW' | translate)\" \n    [disabled]=\"disabled\" (buttonClick)=\"openFlowPickerDialog()\">\n</pep-button>"
        },
        {
            "name": "GenericFormComponent",
            "id": "component-GenericFormComponent-f1a92b6e52d12d864b7d0bf6a29ca01edfb66f8cfb8c43b0c0d244c276b1d34d0c8292f0f9449320e9bf8c5da255aae6b2ef9b55ce2fe5376ecf192e47793500",
            "file": "projects/ngx-composite-lib/generic-form/generic-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "PepGenericFormService",
                    "type": "injectable"
                }
            ],
            "selector": "pep-generic-form",
            "styleUrls": [
                "./generic-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./generic-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "addPadding",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "dataView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "IPepGenericFormDataView",
                    "decorators": []
                },
                {
                    "name": "inline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isLocked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showTopBar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fieldClick",
                    "defaultValue": "new EventEmitter<IPepGenericFormValueChange>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter<IPepGenericFormValueChange>"
                },
                {
                    "name": "formValidationChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepGenericFormValueChange>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter<IPepGenericFormValueChange>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_formData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ObjectsDataRow",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_genericFormService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepGenericFormService",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "_pepForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_pepFormContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef | undefined",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_uiControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UIControl",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepGenericFormData",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initForm",
                    "args": [
                        {
                            "name": "dataView",
                            "type": "IPepGenericFormDataView",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataView",
                            "type": "IPepGenericFormDataView",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onfieldClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFormValidationChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onValueChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateFields",
                    "args": [
                        {
                            "name": "fields",
                            "type": "IPepGenericFormFieldUpdate[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupdates form field(s) params\n",
                    "description": "<p>updates form field(s) params</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6256,
                                "end": 6262,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "fields"
                            },
                            "type": "IPepGenericFormFieldUpdate[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6250,
                                "end": 6255,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateFieldValue",
                    "args": [
                        {
                            "name": "fieldChanged",
                            "type": "IPepGenericFormValueChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupdates form field's value\n",
                    "description": "<p>updates form field&#39;s value</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "fieldChanged",
                            "type": "IPepGenericFormValueChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ViewChild,\n    ViewContainerRef,\n    EventEmitter,   \n    Type,\n} from '@angular/core';\n//import { PepFormComponent } from '@pepperi-addons/ngx-lib/form';\nimport {\n    IPepGenericFormDataView,\n    IPepGenericFormValueChange,\n    IPepGenericFormFieldUpdate,\n    IPepGenericFormData\n} from './generic-form.model';\nimport {\n    UIControl,\n    ObjectsDataRow,\n    ObjectsDataRowCell,\n    PepGuid,\n    PepLayoutService\n} from '@pepperi-addons/ngx-lib';\nimport { DataViewConverter } from '@pepperi-addons/data-views';\nimport { PepGenericFormService } from './generic-form.service';\n\n\n@Component({\n    selector: 'pep-generic-form',\n    templateUrl: './generic-form.component.html',\n    styleUrls: ['./generic-form.component.scss'],\n    providers: [PepGenericFormService]\n})\nexport class GenericFormComponent implements OnInit {\n    private _pepFormContainer: ViewContainerRef | undefined;\n    @ViewChild('pepFormContainer', { read: ViewContainerRef })\n    set pepListContainer(val: ViewContainerRef) {\n        this._pepFormContainer = val;\n    }\n\n    private _data: any;\n    @Input()\n    set dataSource(val: any) {\n        this._data = val;\n    }\n\n    private _formData: ObjectsDataRow;\n    private _uiControl: UIControl;\n    @Input()\n    set dataView(val: IPepGenericFormDataView) {\n        this.initForm(val);\n    }\n\n    @Input()\n    isLocked = false;\n\n    @Input()\n    inline = false;\n\n    @Input()\n    showTopBar = false;\n\n    @Input()\n    addPadding = false;\n\n    @Output()\n    valueChange: EventEmitter<IPepGenericFormValueChange> = new EventEmitter<IPepGenericFormValueChange>();\n\n    @Output()\n    fieldClick: EventEmitter<IPepGenericFormValueChange> = new EventEmitter<IPepGenericFormValueChange>();\n\n    @Output()\n    formValidationChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    private _pepForm: any;\n\n    constructor(        \n        private layoutService: PepLayoutService,\n        public _genericFormService: PepGenericFormService\n    ) {\n        this.layoutService.onResize$.pipe().subscribe((size) => {\n            //            \n        });\n        this._formData = new ObjectsDataRow();\n        this._uiControl = new UIControl();\n    }\n\n    ngOnInit() {\n        //        \n    }\n\n    private initForm(dataView: IPepGenericFormDataView) {\n        setTimeout(async () => {\n            if (this._pepFormContainer) {\n                if (this._pepFormContainer.length) {\n                    this._pepFormContainer.remove();\n                    this._formData = new ObjectsDataRow();\n                    this._uiControl = new UIControl();\n                }               \n                const { PepFormComponent } = await import('@pepperi-addons/ngx-lib/form');                  \n                const componentRef = this._pepFormContainer.createComponent(PepFormComponent);    \n\n                this._pepForm = componentRef.instance;\n\n                this._formData.IsEditable = !this.isLocked;\n                this._formData.UID = dataView.UID || PepGuid.newGuid();\n                const uiControlData = DataViewConverter.toUIControlData(dataView);\n                if (uiControlData) {\n                    if (uiControlData?.ControlFields) {\n                        this._uiControl.ControlFields = uiControlData.ControlFields.map((field: any) => this._genericFormService.convertToUiControlField(field));\n                    }\n                    this._uiControl.Columns = uiControlData.Columns;\n\n                    if (this._uiControl.ControlFields?.length) {\n                        this._formData.Fields = [];\n                        this._uiControl.ControlFields.forEach((item) => {\n                            let value = '';\n                            if (this._genericFormService.hasProperty(this._data, item.ApiName)) {\n                                value = this._data[item.ApiName];\n                            }\n                            let dataViewField: any;\n                            if (dataView.Fields) {\n                                dataViewField = dataView.Fields.find(field => field.FieldID === item.ApiName);\n                            }\n                            const controlFieldData = {\n                                ...item,\n                                ...{\n                                    controlFieldValue: value\n                                },\n                                ...{\n                                    OptionalValues: dataViewField?.OptionalValues?.length ? dataViewField.OptionalValues : [],\n                                    AdditionalProps: dataViewField?.AdditionalProps || null\n                                }\n                            }\n                            this._formData.Fields.push(this._genericFormService.createFormField(controlFieldData));\n                        });\n\n                        componentRef.instance.layoutType = 'form';\n                        componentRef.instance.layout = this._uiControl;\n                        componentRef.instance.data = this._formData;\n                        componentRef.instance.isInternal = false;\n                        componentRef.instance.lockFields = this.isLocked;\n                        componentRef.instance.valueChange.subscribe(($event) => {\n                            this.onValueChanged($event);\n                        });\n                        componentRef.instance.fieldClick.subscribe(($event) => {\n                            this.onfieldClicked($event);\n                        });\n                        componentRef.instance.formValidationChange.subscribe(($event) => {\n                            this.onFormValidationChanged($event);\n                        });\n                    }\n                }\n\n            }\n\n        }, 0);\n    }\n\n    /**\n     * updates form field's value\n     * @param field object containing the data of the required update\n     */\n    private updateFieldValue(fieldChanged: IPepGenericFormValueChange) {\n        this._data[fieldChanged.ApiName] = fieldChanged.Value;\n    }\n\n    getData(): IPepGenericFormData {\n        return {\n            UID: this._formData.UID,\n            Values: this._data\n        };\n    }\n\n    /**\n    * updates form field(s) params\n    * @param fields\n    */\n    updateFields(fields: IPepGenericFormFieldUpdate[]) {\n        // update data view with current data\n        for (const [key, value] of Object.entries(this._data)) {\n            const index = this._formData.Fields.findIndex((item) => item.ApiName === key);\n            if (index >= 0) {\n                const item = this._formData.Fields[index] as { [k: string]: any };\n                item.Value = value;\n            }\n        }\n\n        fields.forEach((field) => {\n            const index = this._formData.Fields.findIndex((item) => item.ApiName === field.FieldId);\n            if (index >= 0) {\n                for (const [key, value] of Object.entries(field.Params)) {\n                    if (this._genericFormService.hasProperty(this._formData.Fields[index], key)) {\n                        const item = this._formData.Fields[index] as { [k: string]: any };\n                        item[key] = value;\n                        if (key === 'Value') {\n                            //manually updating formattedValue because FormattedValue is legacy used by webapp\n                            item.FormattedValue = value;\n                        }\n                    }\n                }\n            }\n        });\n        this._pepForm.ReloadForm()\n        this._pepForm.data = this._formData;\n    }\n\n    onValueChanged(event: any) {\n        const field: IPepGenericFormValueChange = {\n            UID: event.id,\n            ApiName: event.key,\n            Value: event.value\n        };\n        this.updateFieldValue(field);\n        this.valueChange.emit(field);\n    }\n\n    onfieldClicked(event: any) {\n        const field: IPepGenericFormValueChange = {\n            UID: event.id,\n            ApiName: event.key,\n            Value: event.value\n        };\n        this.updateFieldValue(field);\n        this.fieldClick.emit(field);\n    }\n\n    onFormValidationChanged(event: any) {\n        this.formValidationChange.emit(event);\n    }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/variables' as ngx-variables;\n\n:host {\n    height: inherit;\n    display: block;\n}\n\n.main-area-container {\n    display: grid;\n    height: inherit;\n}\n\n.inline-container {\n    height: inherit;\n    display: grid;\n    grid-template-rows: auto 1fr;\n\n    &.add-padding {\n        padding-inline: ngx-variables.$content-padding;\n    }\n}\n\n.padding-bottom {\n    padding-bottom: ngx-variables.$content-padding;\n}\n\n.form-container {\n    \n}\n",
                    "styleUrl": "./generic-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_genericFormService",
                        "type": "PepGenericFormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_genericFormService",
                        "type": "PepGenericFormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "pepListContainer": {
                    "name": "pepListContainer",
                    "setSignature": {
                        "name": "pepListContainer",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "ViewContainerRef",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "ViewContainerRef",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "dataSource": {
                    "name": "dataSource",
                    "setSignature": {
                        "name": "dataSource",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 44,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "dataView": {
                    "name": "dataView",
                    "setSignature": {
                        "name": "dataView",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "IPepGenericFormDataView",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 51,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "IPepGenericFormDataView",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div *ngIf=\"inline\" class=\"inline-container\" [ngClass]=\"{ 'add-padding': addPadding }\">\n    <div *ngIf=\"showTopBar\" class=\"inline-top-bar-container\">\n        <ng-container *ngTemplateOutlet=\"topBarTemplate\"></ng-container>\n    </div>\n    <ng-container *ngTemplateOutlet=\"formTemplate\"></ng-container>\n</div>\n\n<pep-page-layout *ngIf=\"!inline\" [addPadding]=\"addPadding\">\n    <ng-container *ngIf=\"showTopBar\" pep-top-area>\n        <ng-container *ngTemplateOutlet=\"topBarTemplate\"></ng-container>\n    </ng-container>\n    <div pep-main-area class=\"main-area-container\">\n        <ng-container *ngTemplateOutlet=\"formTemplate\"></ng-container>\n    </div>\n</pep-page-layout>\n\n<ng-template #topBarTemplate>\n    <pep-top-bar [inline]=\"inline\"> \n        <div header-start-content>\n            <ng-content select=\"[left-buttons]\"></ng-content>\n        </div>\n        <div header-end-content>\n            <ng-content select=\"[right-buttons]\"></ng-content>\n        </div>\n\n        <!-- <div footer-start-content>\n            <ng-content select=\"[bottom-left-buttons]\"></ng-content>\n        </div>\n        <div footer-end-content>\n            <ng-content select=\"[bottom-right-buttons]\"></ng-content>\n        </div> -->\n    </pep-top-bar>\n</ng-template>\n\n<ng-template #formTemplate>\n    <!-- class=\"form-view\"  -->\n    <div [ngClass]=\"{'form-view': showTopBar, 'padding-bottom': !showTopBar}\">\n        <ng-container #pepFormContainer></ng-container>\n    </div>\n</ng-template>\n"
        },
        {
            "name": "GenericFormExampleComponent",
            "id": "component-GenericFormExampleComponent-b62ce009e9a1eb6a66aae0ddbb0dca3bcaa007d275b6cd2fc0abccde94da520ed5cac589462d6fc83f018c187e246ca70c6e1b617b09ffbc660f7bcf5f3d95aa",
            "file": "projects/ngx-composite-lib-tester/src/app/generic-form-example/generic-form-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-generic-form-example",
            "styleUrls": [
                "./generic-form-example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./generic-form-example.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataSource",
                    "defaultValue": "FakeData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "dataView",
                    "defaultValue": "{\n        UID: 'ABCD-DCBA-FGHD-POLK',\n        Type: 'Form',\n        Hidden: false,\n        Columns: [{}],\n        Context: {\n            Object: {\n                Resource: 'transactions',\n                InternalID: 290714,\n                Name: '1OlegImpExpרg'\n            },\n            Name: 'OrderCartItemForm',\n            ScreenSize: 'Tablet',\n            Profile: {\n                InternalID: 46273,\n                Name: 'Rep'\n            }\n        },\n        Fields: FakeDataViewFields,\n        Rows: []\n\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericFormDataView",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n        key: 'key1field',\n        value: 'abc',\n        mandatory: false,\n        readonly: false,\n        disabled: false,\n        maxFieldCharacters: 0,\n        type: 'text',\n        minValue: 0,\n        maxValue: 999999,\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "formContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GenericFormComponent | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formContainer'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "inline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "isFormValid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "isLocked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "getInitialDataView",
                    "args": [],
                    "optional": false,
                    "returnType": "{ UID: string; Type: string; Hidden: boolean; Columns: {}; Context: { Object: { Resource: string; InternalID: number; Name: string; }; Name: string; ScreenSize: string; Profile: { InternalID: number; Name: string; }; }; Fields: any; Rows: {}; }",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFormValidationChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onGetDataClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSaveDataClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onValueChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, AfterViewInit, ViewChild } from '@angular/core';\nimport { FormDataView, BaseFormDataViewField } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\nimport { FakeDataViewFields, FakeData, uiControlData } from './fake-data';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { DataViewConverter } from '@pepperi-addons/data-views';\n\nimport {\n    IPepGenericFormDataView,\n    PepGenericFormService\n} from '@pepperi-addons/ngx-composite-lib/generic-form';\nimport { GenericFormComponent } from '@pepperi-addons/ngx-composite-lib/generic-form';\n\n\n@Component({\n    selector: 'app-generic-form-example',\n    templateUrl: './generic-form-example.component.html',\n    styleUrls: ['./generic-form-example.component.scss']\n})\nexport class GenericFormExampleComponent implements OnInit {\n    @ViewChild('formContainer') formContainer: GenericFormComponent | undefined;\n\n    /*dataSource: IPepGenericFormDataSource = {\n        UID: 'ABCD-DCBA',\n        IsEnabled: true,\n        Values: FakeData,\n    };*/\n    dataSource: any = FakeData;\n    isLocked = false;\n    isFormValid = false;\n\n    dataView: IPepGenericFormDataView = {\n        UID: 'ABCD-DCBA-FGHD-POLK',\n        Type: 'Form',\n        Hidden: false,\n        Columns: [{}],\n        Context: {\n            Object: {\n                Resource: 'transactions',\n                InternalID: 290714,\n                Name: '1OlegImpExpרg'\n            },\n            Name: 'OrderCartItemForm',\n            ScreenSize: 'Tablet',\n            Profile: {\n                InternalID: 46273,\n                Name: 'Rep'\n            }\n        },\n        Fields: FakeDataViewFields,\n        Rows: []\n\n    };\n\n    inline = false;\n    form: FormGroup = this.fb.group({\n        key: 'key1field',\n        value: 'abc',\n        mandatory: false,\n        readonly: false,\n        disabled: false,\n        maxFieldCharacters: 0,\n        type: 'text',\n        minValue: 0,\n        maxValue: 999999,\n    });\n\n    constructor(private genericFormService: PepGenericFormService, private fb: FormBuilder) {\n        //\n    }\n\n    ngOnInit(): void {\n        //\n        //  console.log('data view', DataViewConverter.toDataView(uiControlData));\n        //  console.log('data view 2', this.dataView);\n\n    }\n    /*\n\n    onFormValidationChange(event: any) {\n        this.isFormValid = event;\n    }*/\n\n    onValueChanged(event: any) {\n        console.log('on form value changed', event)\n        //  this.isLocked = true;\n    }\n\n    getInitialDataView() {\n        return {\n            UID: 'ABCD-DCBA-FGHD-POLK',\n            Type: 'Form',\n            Hidden: false,\n            Columns: [{}],\n            Context: {\n                Object: {\n                    Resource: 'transactions',\n                    InternalID: 290714,\n                    Name: '1OlegImpExpרg'\n                },\n                Name: 'OrderCartItemForm',\n                ScreenSize: 'Tablet',\n                Profile: {\n                    InternalID: 46273,\n                    Name: 'Rep'\n                }\n            },\n            Fields: FakeDataViewFields,\n            Rows: []\n        }\n    }\n\n    onGetDataClicked() {\n        console.log('get data', this.formContainer?.getData());\n       /* this.dataView = {\n            UID: 'AAAA-DCBA-FGHD-DDDD',\n            Type: 'Form',\n            Hidden: false,\n            Columns: [{}],\n            Context: {\n                Object: {\n                    Resource: 'transactions',\n                    InternalID: 290714,\n                    Name: 'Form2'\n                },\n                Name: 'OrderCartItemForm',\n                ScreenSize: 'Tablet',\n                Profile: {\n                    InternalID: 46273,\n                    Name: 'Rep'\n                }\n            },\n            Fields: [FakeDataViewFields[0], FakeDataViewFields[1], FakeDataViewFields[2], FakeDataViewFields[3]],\n            Rows: []\n        }\n        this.dataSource = {\n            ActionDateTime: '2021-10-11T09:26:02Z',\n        }*/\n    }\n\n    onSaveDataClicked() {\n        /*this.dataView = {\n            UID: 'ABCD-DCBA-FGHD-POLK',\n            Type: 'Form',\n            Hidden: false,\n            Columns: [{}],\n            Context: {\n                Object: {\n                    Resource: 'transactions',\n                    InternalID: 290714,\n                    Name: '1OlegImpExpרg'\n                },\n                Name: 'OrderCartItemForm',\n                ScreenSize: 'Tablet',\n                Profile: {\n                    InternalID: 46273,\n                    Name: 'Rep'\n                }\n            },\n            Fields: FakeDataViewFields,\n            Rows: []\n        }\n        this.dataSource = FakeData;*/\n        this.formContainer?.updateFields([\n            {\n                FieldId: 'ButtunTest',\n                Params: {\n                    Value: 'New val' + Math.floor(Math.random() * 10)\n                }\n            }\n        ]);\n    }\n\n    onFormValidationChange(value: any) {\n        console.log('onFormValidationChange', value);\n        this.isFormValid = value;\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./generic-form-example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "genericFormService",
                        "type": "PepGenericFormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "genericFormService",
                        "type": "PepGenericFormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "{{ isFormValid }}\n<pep-generic-form #formContainer [dataSource]=\"dataSource\" [dataView]=\"dataView\" [inline]=\"inline\" [showTopBar]=\"true\"\n    [isLocked]=\"isLocked\" (valueChange)=\"onValueChanged($event)\" (formValidationChange)=\"onFormValidationChange($event)\">\n    <ng-container right-buttons>\n        <pep-button class=\"pep-spacing-element\" [value]=\"'Save'\" [disabled]=\"!isFormValid\" [sizeType]=\"inline ? 'sm' : 'md'\"\n            [styleType]=\"'strong'\" (click)=\"onSaveDataClicked()\">\n        </pep-button>\n    </ng-container>\n\n    <ng-container left-buttons>\n    </ng-container>\n\n    <!-- <ng-container bottom-right-buttons>   \n        <pep-button class=\"pep-spacing-element\" [value]=\"'Save 2'\" [sizeType]=\"inline ? 'sm' : 'md'\" [styleType]=\"'strong'\">\n        </pep-button>      \n    </ng-container> -->\n\n</pep-generic-form>\n\n<pep-button class=\"pep-spacing-element\" [value]=\"'Get Data'\" [sizeType]=\"inline ? 'sm' : 'md'\" [styleType]=\"'strong'\"\n    (click)=\"onGetDataClicked()\">\n</pep-button>"
        },
        {
            "name": "GenericListComponent",
            "id": "component-GenericListComponent-36eadc1fc4c8915e49ed743c19ce41e193d1b285db7c408413b0cc4c72cb36a46399f0c6fa0a2e96f34aaa11c7491d46692a15b75ada8bc3b6ae02add191714b",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "PepGenericListService",
                    "type": "injectable"
                }
            ],
            "selector": "pep-generic-list",
            "styleUrls": [
                "./generic-list.component.scss",
                "./generic-list.component.theme.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./generic-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "actions",
                    "defaultValue": "{\n        get: async (data: any) => {\n            return []\n        }\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "IPepGenericListActions",
                    "decorators": []
                },
                {
                    "name": "addPadding",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 118,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "breadCrumbsItems",
                    "defaultValue": "new Array<PepBreadCrumbItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 175,
                    "type": "PepBreadCrumbItem[]",
                    "decorators": []
                },
                {
                    "name": "cacheSize",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 148,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "IPepGenericListDataSource",
                    "decorators": []
                },
                {
                    "name": "description",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 124,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 115,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "emptyState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 136,
                    "type": "IPepGenericListEmptyState | undefined",
                    "decorators": []
                },
                {
                    "name": "hideSelectAll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 151,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "inline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 127,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "noDataFoundMsg",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 133,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "pager",
                    "defaultValue": "{\n        type: 'scroll'\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 154,
                    "type": "IPepGenericListPager",
                    "decorators": []
                },
                {
                    "name": "scrollPosition",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 181,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "selectAll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 178,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selectionType",
                    "defaultValue": "'multi'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 139,
                    "type": "PepListSelectionType",
                    "decorators": []
                },
                {
                    "name": "showSearch",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 130,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showTopBar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 172,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "smartFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 165,
                    "type": "IPepGenericListSmartFilter",
                    "decorators": []
                },
                {
                    "name": "sorting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 145,
                    "type": "IPepListSortingData | undefined",
                    "decorators": []
                },
                {
                    "name": "supportSorting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 142,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tableViewType",
                    "defaultValue": "'regular'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 159,
                    "type": "PepListTableViewType",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 121,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "uuidMapping",
                    "defaultValue": "'key'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 112,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "zebraStripes",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 162,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "breadCrumbItemClick",
                    "defaultValue": "new EventEmitter<IPepBreadCrumbItemClickEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 190,
                    "type": "EventEmitter"
                },
                {
                    "name": "fieldClick",
                    "defaultValue": "new EventEmitter<IPepFormFieldClickEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 184,
                    "type": "EventEmitter"
                },
                {
                    "name": "listLoad",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 196,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "startIndexChange",
                    "defaultValue": "new EventEmitter<IPepListStartIndexChangeEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 193,
                    "type": "EventEmitter"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFormFieldValueChangeEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 187,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_appliedFilters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepSmartFilterData[]",
                    "optional": false,
                    "description": "",
                    "line": 224,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_dataSource",
                    "defaultValue": "{\n        init: async (params: any) => {\n            return {\n                dataView: {\n                    Type: 'Grid'\n                },\n                totalCount: -1,\n                items: []\n            }\n        }\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListDataSource",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_dataView",
                    "defaultValue": "{\n        Type: 'Grid'\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataView",
                    "optional": false,
                    "description": "",
                    "line": 209,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_loader$",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 207,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_pepList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 212,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_pepListContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef | undefined",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_resize$",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 206,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_sorting",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepListSortingChangeEvent | undefined",
                    "optional": false,
                    "description": "",
                    "line": 225,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "listInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 214
                },
                {
                    "name": "menuActions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<PepMenuItem>",
                    "optional": false,
                    "description": "",
                    "line": 228
                },
                {
                    "name": "menuHandlers",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 227
                },
                {
                    "name": "onLoad",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 213
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepSearchComponent | undefined",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'search'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "searchString",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 216
                },
                {
                    "name": "showEmptyState",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 218
                },
                {
                    "name": "showSmartFilter",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 217
                },
                {
                    "name": "smartFilters",
                    "defaultValue": "{\n        fields: [],\n        data: [],\n        title: 'Filters'\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepSmartFilters",
                    "optional": false,
                    "description": "",
                    "line": 219
                },
                {
                    "name": "smartFiltersComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepSmartFiltersComponent | undefined",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'smartFiltersComponent'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "totalRowCount",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 215
                }
            ],
            "methodsClass": [
                {
                    "name": "getItemById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ObjectsDataRow | null",
                    "typeParameters": [],
                    "line": 543,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMenuActions",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<PepMenuItem[]>",
                    "typeParameters": [],
                    "line": 421,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "getMenuObjects",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 440,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getPageIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 559,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelectedItems",
                    "args": [],
                    "optional": false,
                    "returnType": "PepSelectionData | null",
                    "typeParameters": [],
                    "line": 551,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUiControl",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UIControl",
                    "typeParameters": [],
                    "line": 402,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initList",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "initSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 454,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initSmartSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 459,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loadData",
                    "args": [
                        {
                            "name": "fromIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "toIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<PepRowData[]>",
                    "typeParameters": [],
                    "line": 464,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "fromIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadMenuItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 413,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loadTableInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 370,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nloads inputs in case they are provided and merge with selector inputs\n",
                    "description": "<p>loads inputs in case they are provided and merge with selector inputs</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 12905,
                                "end": 12912,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>merged pep-list inputs</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 608,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onActionItemClicked",
                    "args": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 563,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBreadCrumbItemClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepBreadCrumbItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 586,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepBreadCrumbItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCustomizeFieldClick",
                    "args": [
                        {
                            "name": "fieldClickEvent",
                            "type": "IPepFormFieldClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 582,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldClickEvent",
                            "type": "IPepFormFieldClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFiltersChange",
                    "args": [
                        {
                            "name": "filters",
                            "type": "IPepSmartFilterData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 599,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "IPepSmartFilterData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onListLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 604,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLoadItems",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepListLoadItemsEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 518,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nloads virtual scroll items from api\n",
                    "description": "<p>loads virtual scroll items from api</p>\n",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepListLoadItemsEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLoadPage",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepListLoadPageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 531,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nloads paging bulk from api\n",
                    "description": "<p>loads paging bulk from api</p>\n",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepListLoadPageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepSearchClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 570,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepSearchClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectedItemsChanged",
                    "args": [
                        {
                            "name": "selectedRowsCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 575,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedRowsCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSortingChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepListSortingChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 594,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepListSortingChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onValueChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepFormFieldValueChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 590,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepFormFieldValueChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setEmptyState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 396,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndetemines whether empty state is to be displayed\n",
                    "description": "<p>detemines whether empty state is to be displayed</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateDataList",
                    "args": [
                        {
                            "name": "fromIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "toIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageIndex",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<PepRowData[]>",
                    "typeParameters": [],
                    "line": 492,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "fromIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageIndex",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    ViewChild,\n    Input,\n    Output,\n    EventEmitter,\n    ViewContainerRef\n} from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n    PepDataConvertorService,\n    PepLayoutService,\n    ObjectsDataRow,\n    PepGuid,\n    UIControl,\n    PepLoaderService,\n    PepRowData,\n    PepSessionService\n} from '@pepperi-addons/ngx-lib';\nimport { Subscription } from 'rxjs';\nimport { IPepFormFieldClickEvent } from '@pepperi-addons/ngx-lib/form';\nimport {\n    PepListComponent,\n    PepSelectionData,\n    IPepListLoadPageEvent,\n    PepListSelectionType,\n    IPepListSortingChangeEvent,\n    DEFAULT_PAGE_SIZE,\n    IPepListLoadItemsEvent,\n    PepListTableViewType,\n    IPepListSortingData,\n    IPepListStartIndexChangeEvent\n} from '@pepperi-addons/ngx-lib/list';\nimport {\n    PepMenuItem,\n    IPepMenuItemClickEvent,\n} from '@pepperi-addons/ngx-lib/menu';\nimport { IPepFormFieldValueChangeEvent } from '@pepperi-addons/ngx-lib/form';\nimport {\n    PepBreadCrumbItem,\n    IPepBreadCrumbItemClickEvent\n} from '@pepperi-addons/ngx-lib/bread-crumbs';\nimport { IPepSearchClickEvent, PepSearchComponent } from '@pepperi-addons/ngx-lib/search';\n\nimport {\n    DataView,\n    GridDataView\n} from '@pepperi-addons/papi-sdk/dist/entities/data-view';\nimport {\n    IPepGenericListInitData,\n    IPepGenericListDataSource,\n    IPepGenericListPager,\n    IPepGenericListActions,\n    IPepGenericListSmartFilter,\n    IPepSmartFilters,\n    IPepGenericListEmptyState\n} from './generic-list.model';\nimport { PepGenericListService } from './generic-list.service';\nimport { DataViewConverter } from '@pepperi-addons/data-views';\nimport {\n    IPepSmartFilterData,\n    PepSmartFilterBaseField,\n    PepSmartFiltersComponent\n} from '@pepperi-addons/ngx-lib/smart-filters';\n\n\n@Component({\n    selector: 'pep-generic-list',\n    templateUrl: './generic-list.component.html',\n    styleUrls: ['./generic-list.component.scss', './generic-list.component.theme.scss'],\n    providers: [PepGenericListService]\n})\nexport class GenericListComponent implements OnInit {\n    @ViewChild('search') search: PepSearchComponent | undefined;\n    @ViewChild('smartFiltersComponent') smartFiltersComponent: PepSmartFiltersComponent | undefined;\n\n    private _pepListContainer: ViewContainerRef | undefined;\n    @ViewChild('pepListContainer', { read: ViewContainerRef })\n    set pepListContainer(val: ViewContainerRef) {\n        this._pepListContainer = val;\n    }\n\n    private _dataSource: IPepGenericListDataSource = {\n        init: async (params: any) => {\n            return {\n                dataView: {\n                    Type: 'Grid'\n                },\n                totalCount: -1,\n                items: []\n            }\n        }\n    }\n    @Input()\n    set dataSource(val: IPepGenericListDataSource) {\n        this._dataSource = val;\n        this._sorting = undefined;\n        this.initSearch();\n        this.initSmartSearch();\n        this.initList();\n    }\n\n    @Input()\n    actions: IPepGenericListActions = {\n        get: async (data: any) => {\n            return []\n        }\n    };\n\n    @Input()\n    uuidMapping = 'key';\n\n    @Input()\n    disabled = false;\n\n    @Input()\n    addPadding = false;\n\n    @Input()\n    title = '';\n\n    @Input()\n    description = '';\n\n    @Input()\n    inline = false;\n\n    @Input()\n    showSearch = false;\n\n    @Input()\n    noDataFoundMsg = '';\n\n    @Input()\n    emptyState: IPepGenericListEmptyState | undefined;\n\n    @Input()\n    selectionType: PepListSelectionType = 'multi';\n\n    @Input()\n    supportSorting = false;\n\n    @Input()\n    sorting: IPepListSortingData | undefined;\n\n    @Input()\n    cacheSize = -1;\n\n    @Input()\n    hideSelectAll = false;\n    \n    @Input()\n    pager: IPepGenericListPager = {\n        type: 'scroll'\n    }\n\n    @Input()\n    tableViewType: PepListTableViewType = 'regular';\n\n    @Input()\n    zebraStripes = false;\n\n    @Input()\n    set smartFilter(val: IPepGenericListSmartFilter) {\n        this.smartFilters = this._genericListService.convertToSmartFilter(val);\n        this._appliedFilters = this.smartFilters.data || [];\n        this.showSmartFilter = this.smartFilters.fields.length > 0; \n    }\n\n    @Input()\n    showTopBar = false;\n\n    @Input()\n    breadCrumbsItems: PepBreadCrumbItem[] = new Array<PepBreadCrumbItem>();\n\n    @Input()\n    selectAll = false\n\n    @Input()\n    scrollPosition = 0\n\n    @Output()\n    fieldClick = new EventEmitter<IPepFormFieldClickEvent>();\n\n    @Output()\n    valueChange = new EventEmitter<IPepFormFieldValueChangeEvent>();\n\n    @Output()\n    breadCrumbItemClick = new EventEmitter<IPepBreadCrumbItemClickEvent>();\n\n    @Output()\n    startIndexChange = new EventEmitter<IPepListStartIndexChangeEvent>()\n\n    @Output()\n    listLoad: EventEmitter<void> = new EventEmitter<void>();\n\n    set pepList(val: PepListComponent) {\n        this._pepList = val;\n    }\n\n    get pepList() {\n        return this._pepList;\n    }\n\n    private _resize$: Subscription = new Subscription();\n    private _loader$: Subscription = new Subscription();\n\n    private _dataView: DataView = {\n        Type: 'Grid'\n    };\n    private _pepList: any;\n    onLoad = true;\n    listInputs: any;\n    totalRowCount = -1;\n    searchString = '';\n    showSmartFilter = false;\n    showEmptyState = false;\n    smartFilters: IPepSmartFilters = {\n        fields: [],\n        data: [],\n        title: 'Filters'\n    };\n    private _appliedFilters: IPepSmartFilterData[] = [];\n    private _sorting: IPepListSortingChangeEvent | undefined = undefined;\n\n    menuHandlers: { [key: string]: (obj: any) => Promise<void> } = {};\n    menuActions: Array<PepMenuItem> = [];\n\n    constructor(\n        private _dataConvertorService: PepDataConvertorService,\n        private _layoutService: PepLayoutService,\n        private _loaderService: PepLoaderService,\n        private _translate: TranslateService,\n        private _genericListService: PepGenericListService,\n        private _sessionService: PepSessionService\n    ) {\n        this._resize$ = this._layoutService.onResize$.pipe().subscribe((size) => {            \n            //            \n        });\n        this._loader$ = this._loaderService.onChanged$.subscribe((status: boolean) => {\n            //\n        });\n    }\n\n    ngOnInit() {\n        //\n    }\n\n    private async initList() {\n        this.onLoad = true;\n        setTimeout(async () => { //making sure all input data is available\n            if (this._dataSource) {\n                //merge selector inputs with callback inputs\n                this.loadTableInputs();\n\n                let fromIndex = 0;\n                let toIndex = 0;\n\n                if (this.listInputs.pager.type === 'pages') {\n                    fromIndex = this.listInputs.pager.size * this.listInputs.pager.index;\n                    toIndex = fromIndex + (this.listInputs.pager.size || DEFAULT_PAGE_SIZE) - 1;\n                } else {\n                    toIndex = 100;//TO DO - get value from - this.customList.getTopItems()\n                }\n\n                const data = await this.loadData(fromIndex, toIndex);\n                \n                if (this.listInputs?.emptyState?.show === true) {\n                    this.setEmptyState();\n                }\n                this.onLoad = false;\n                //show empty state\n                if (this.showEmptyState) {\n                    if (!this.listInputs.emptyState.title) {                        \n                        this._translate.get('GENERIC_LIST.EMPTY_STATE.TITLE').subscribe(text => {                            \n                            this.listInputs.emptyState.title = text;\n                        });\n                    }\n                    if (!this.listInputs.emptyState.description) {                        \n                        this._translate.get('GENERIC_LIST.EMPTY_STATE.DESCRIPTION').subscribe(text => {                            \n                            this.listInputs.emptyState.description = text;\n                        });\n                    }\n                    return;\n                }\n                setTimeout(async () => {\n                    if (this._pepListContainer) {\n                        if (this._pepListContainer.length > 0) {\n                            this._pepListContainer.remove();\n                        }\n                        const { PepListComponent } = await import('@pepperi-addons/ngx-lib/list');\n                        const componentRef = this._pepListContainer.createComponent(PepListComponent);\n\n                        this.pepList = componentRef.instance;\n                        \n                        componentRef.instance.viewType = this._genericListService.getListViewType(this._dataView.Type);\n                        componentRef.instance.tableViewType = this.listInputs.tableViewType;\n                        componentRef.instance.zebraStripes = this.listInputs.zebraStripes;\n                        if (this.disabled) {\n                            componentRef.instance.disabled = true;\n                            componentRef.instance.lockItemInnerEvents = true;\n                        }\n                        componentRef.instance.supportSorting = this.listInputs.supportSorting;\n                        componentRef.instance.sorting = this.listInputs.sorting;\n                        componentRef.instance.cacheSize = this.listInputs.cacheSize;\n\n                        componentRef.instance.selectionTypeForActions = this.listInputs.selectionType;\n                        componentRef.instance.hideAllSelectionInMulti = this.listInputs.hideSelectAll;\n\n                        componentRef.instance.showCardSelection = this.listInputs.selectionType !== 'none';\n                        componentRef.instance.pagerType = this.listInputs.pager.type;\n                        if (this.listInputs.pager.type === 'pages') {\n                            componentRef.instance.pageSize = this.listInputs.pager?.size || DEFAULT_PAGE_SIZE;\n                            componentRef.instance.pageIndex = this.listInputs.pager?.index || 0;\n                        }\n                        if(this.selectionType == \"multi\" && this.selectAll){\n                            this._sessionService.setObject('AllSelected', true)\n                        }\n                        componentRef.instance.noDataFoundMsg = this.listInputs.noDataFoundMsg;\n                        componentRef.instance.startIndexChange.subscribe($event => {\n                            this.startIndexChange.emit($event)\n                        })\n                        componentRef.instance.fieldClick.subscribe(($event) => {\n                            this.onCustomizeFieldClick($event);\n                        });\n                        componentRef.instance.selectedItemsChange.subscribe(($event) => {\n                            this.onSelectedItemsChanged($event);\n                        });\n                        componentRef.instance.loadItems.subscribe(($event) => {\n                            this.onLoadItems($event);\n                        });\n                        componentRef.instance.loadPage.subscribe(($event) => {\n                            this.onLoadPage($event);\n                        });\n                        componentRef.instance.valueChange.subscribe(($event) => {\n                            this.onValueChanged($event);\n                        });\n                        componentRef.instance.sortingChange.subscribe(($event) => {\n                            this.onSortingChange($event);\n                        });\n                        componentRef.instance.listLoad.subscribe(($event) => {\n                            this.onSelectedItemsChanged(this._pepList.selectedItems.length);\n                            this.onListLoad();\n                        });\n                        let convertedList: ObjectsDataRow[] = [];\n                        if (data) {\n                            if (data?.length) {\n                                convertedList = this._dataConvertorService.convertListData(data);\n                            }\n                            const uiControl = this.getUiControl(DataViewConverter.toUIControlData(this._dataView));\n                            const selectedItems = this._genericListService.getSelectedItems(convertedList);\n                            if (selectedItems?.length) {\n                                componentRef.instance.setSelectedIds(selectedItems);\n                            }                           \n                            \n                            componentRef.instance.initListData(uiControl, this.totalRowCount, convertedList);\n                        }\n                        componentRef.instance.scrollToIndex(this.scrollPosition)\n                    }\n                }, 0);\n            }\n        }, 0);\n    }\n\n    /**\n     * loads inputs in case they are provided and merge with selector inputs\n     * @returns merged pep-list inputs\n     */\n    private loadTableInputs() {\n        this.listInputs = {\n            supportSorting: this.supportSorting,\n            sorting: this.sorting,\n            cacheSize: this.cacheSize,\n            hideSelectAll: this.hideSelectAll,\n            selectionType: this.selectionType,\n            pager: this.pager,\n            noDataFoundMsg: this.noDataFoundMsg,\n            tableViewType: this.tableViewType,\n            zebraStripes: this.zebraStripes,\n            emptyState: this.emptyState,\n            selectAll: this.selectAll\n        };\n        if (this._dataSource.inputs) {\n            Object.entries(this._dataSource.inputs).forEach((item: any) => {\n                if (this._genericListService.hasProperty(this.listInputs, item[0])) {\n                    this.listInputs[item[0]] = item[1];\n                }\n            });\n        }\n    }\n\n    /**\n     * detemines whether empty state is to be displayed\n     */\n    private setEmptyState() {\n        this.showEmptyState = this.totalRowCount === 0 &&\n            this.searchString === '' &&\n            this._appliedFilters.length === 0;\n    }\n\n    private getUiControl(data: any): UIControl {\n        const uiControl = new UIControl();\n        uiControl.ControlFields = [];\n\n        if (data?.ControlFields) {\n            uiControl.ControlFields = data.ControlFields.map((field: any) => this._genericListService.convertToUiControlField(field));\n        }\n\n        return uiControl;\n    }\n\n    private loadMenuItems(): void { //TODO\n        if (this.listInputs.selectionType !== 'none') {\n            this.getMenuActions().then(\n                x => this.menuActions = x\n            );\n        }\n    }\n\n    private async getMenuActions(): Promise<PepMenuItem[]> {\n        const res: PepMenuItem[] = [];\n        const result = this.getMenuObjects();\n        if (result.success) {\n            const actions = await this.actions.get(result.data);\n            this.menuHandlers = {};\n            actions?.forEach(item => {\n                const uuid = PepGuid.newGuid();\n                this.menuHandlers[uuid] = item.handler;\n                res.push({\n                    key: uuid,\n                    text: item.title\n                })\n            })\n        }\n\n        return res;\n    }\n\n    private getMenuObjects() {\n        const menuObjects: any = {\n            success: false,\n            data: new PepSelectionData()\n        };\n\n        if (this.pepList) {\n            menuObjects.success = true;\n            menuObjects.data = this.pepList.getSelectedItemsData();\n        }\n\n        return menuObjects;\n    }\n\n    private initSearch() {\n        this.searchString = '';\n        this.search?.initSearch();\n    }\n\n    private initSmartSearch() {\n        this._appliedFilters = [];\n        this.smartFiltersComponent?.clearFilters();\n    }\n\n    private async loadData(fromIndex: number, toIndex: number): Promise<PepRowData[]> {\n        this._loaderService.show();\n        let converedData: PepRowData[] = [];\n        const data: IPepGenericListInitData = await this._dataSource.init({\n            searchString: this.searchString || undefined,\n            filters: this._appliedFilters.length ? this._appliedFilters : undefined,\n            sorting: this._sorting || undefined,\n            fromIndex: fromIndex,\n            toIndex: toIndex\n        });        \n        this._loaderService.hide();\n\n        // Set the total count\n        this.totalRowCount = data?.totalCount || 0;\n        this.setEmptyState();\n\n        if (data) {\n            this._dataView = data.dataView;\n\n            if (data.items?.length > 0 && !data.isPepRowData) {                \n                converedData = data.items.map(item => this._genericListService.convertToPepRowData(item, data.dataView, this.uuidMapping));\n            }\n        }\n\n        return converedData;\n    }\n\n\n    private async updateDataList(fromIndex: number, toIndex: number, pageIndex: number | undefined = undefined): Promise<PepRowData[]> {\n        if (this._dataSource.update) {\n            this._loaderService.show();\n            let converedData: PepRowData[] = [];\n            const dataList = await this._dataSource.update({\n                searchString: this.searchString || undefined,\n                filters: this._appliedFilters.length ? this._appliedFilters : undefined,\n                sorting: this._sorting || undefined,\n                fromIndex: fromIndex,\n                toIndex: toIndex,\n                pageIndex: pageIndex\n            });\n            this._loaderService.hide();\n\n            if (dataList?.length > 0) {\n                converedData = dataList.map(item => this._genericListService.convertToPepRowData(item, this._dataView, this.uuidMapping));\n            } \n            return converedData;\n        } else {\n            return [];\n        }\n    }\n\n    /**\n     * loads virtual scroll items from api\n     */\n    private async onLoadItems(event: IPepListLoadItemsEvent) {\n        const list = await this.updateDataList(event.fromIndex, event.toIndex);\n        const convertedList = this._dataConvertorService.convertListData(list);\n        const selectedItems = this._genericListService.getSelectedItems(convertedList);\n        if (selectedItems?.length) {\n            this.pepList.setSelectedIds(selectedItems);\n        }\n        this.pepList.updateItems(convertedList, event);\n    }\n\n    /**\n     * loads paging bulk from api\n     */\n    private async onLoadPage(event: IPepListLoadPageEvent) {\n        const fromIndex = event.pageIndex * event.pageSize;\n        const toIndex = Math.min(fromIndex + event.pageSize - 1, this.totalRowCount - 1);\n        const list = await this.updateDataList(fromIndex, toIndex, event.pageIndex);\n        const convertedList = this._dataConvertorService.convertListData(list);\n        const selectedItems = this._genericListService.getSelectedItems(convertedList);\n        if (selectedItems?.length) {\n            this.pepList.setSelectedIds(selectedItems);\n        }\n        this.pepList.updatePage(convertedList, event);\n    }\n\n    getItemById(id: string): ObjectsDataRow | null {\n        if (this.pepList) {\n            return this._pepList.getItemDataByID(id);\n        } else {\n            return null;\n        }\n    }\n\n    getSelectedItems(): PepSelectionData | null {\n        if (this.pepList) {\n            return this._pepList.getSelectedItemsData();\n        } else {\n            return null;\n        }\n    }\n\n    getPageIndex() {\n        return this.pepList.pageIndex;\n    }\n\n    onActionItemClicked(action: IPepMenuItemClickEvent): void {\n        const result = this.getMenuObjects();\n        if (result.success) {\n            this.menuHandlers[action.source.key](result.data);\n        }\n    }\n\n    onSearchChanged(event: IPepSearchClickEvent) {\n        this.searchString = event.value;\n        this.initList();\n    }\n\n    onSelectedItemsChanged(selectedRowsCount: number) {\n        //loading menu items after pep-list selected items are updated\n        setTimeout(() => {\n            this.loadMenuItems();\n        }, 0);\n    }\n\n    onCustomizeFieldClick(fieldClickEvent: IPepFormFieldClickEvent) {\n        this.fieldClick.emit(fieldClickEvent);\n    }\n\n    onBreadCrumbItemClick(event: IPepBreadCrumbItemClickEvent) {\n        this.breadCrumbItemClick.emit(event);\n    }\n\n    onValueChanged(event: IPepFormFieldValueChangeEvent) {\n        this.valueChange.emit(event);\n    }\n\n    onSortingChange(event: IPepListSortingChangeEvent) {\n        this._sorting = event;\n        this.initList();\n    }\n\n    onFiltersChange(filters: IPepSmartFilterData[]) {\n        this._appliedFilters = filters;\n        this.initList();\n    }\n\n    onListLoad(): void {\n        this.listLoad.emit();\n    }\n\n    ngOnDestroy() {\n        if (this._resize$) {\n            this._resize$.unsubscribe();\n        }\n        if (this._loader$) {\n            this._loader$.unsubscribe();\n        }\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/variables' as ngx-variables;\r\n@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/mixins' as ngx-mixins;\r\n\r\n:host {\r\n    height: inherit;\r\n    display: block;\r\n}\r\n\r\n.main-area-container {\r\n    display: grid;\r\n    height: inherit;\r\n}\r\n\r\n.list-container {\r\n    height: 100%;\r\n}\r\n\r\n.list-empty-state {\r\n    padding-top: ngx-variables.$spacing-lg;\r\n    height: calc(100% - #{ngx-variables.$spacing-lg});\r\n    background: rgb(247, 247, 247);\r\n    border-radius: ngx-variables.$border-radius-md;    \r\n    position: relative;\r\n    overflow: hidden;\r\n    @include ngx-mixins.align-center;\r\n    flex-direction: column;    \r\n\r\n    .leaf-skiny {\r\n        z-index: ngx-variables.$z-index-lowest;\r\n        height: 52rem;\r\n        position: absolute;\r\n        left: -10rem;\r\n        top: -2rem;\r\n        pointer-events: none;\r\n        transform: scale(1.4);\r\n    }\r\n\r\n    .leaf-round {\r\n        z-index: ngx-variables.$z-index-lowest;  \r\n        height: 45rem;\r\n        position: absolute;\r\n        right: -13rem;\r\n        top: -7rem;\r\n        pointer-events: none;\r\n        transform: rotate(45deg) scale(1);\r\n    }\r\n\r\n    .list-empty-title {\r\n        @include ngx-mixins.font-title(ngx-variables.$fs-2xl, ngx-variables.$lh-2xl);\r\n        z-index: ngx-variables.$z-index-low;    \r\n        padding-inline: ngx-variables.$spacing-lg;         \r\n    }\r\n\r\n    .list-empty-descr {\r\n        @include ngx-mixins.font-body(ngx-variables.$fs-md, ngx-variables.$lh-md);\r\n        z-index: ngx-variables.$z-index-low;\r\n        padding-inline: ngx-variables.$spacing-lg; \r\n    }\r\n\r\n     /* > Large */\r\n     @media (min-width: (ngx-variables.$screen-max-size-md + 1)) {\r\n      \r\n     }\r\n\r\n     /* > Medium */\r\n     @media (max-width: ngx-variables.$screen-max-size-md) {\r\n         .leaf-skiny {\r\n            top: -5rem;\r\n            left: -11rem;\r\n            transform: scale(1.1);\r\n         }\r\n         .leaf-round {\r\n             right: -12rem;\r\n             top: -7rem;\r\n             transform: rotate(45deg) scale(.9);\r\n         }\r\n         \r\n    }\r\n    \r\n    /* > Small */\r\n     @media (max-width: ngx-variables.$screen-max-size-sm) {\r\n        .leaf-round {\r\n            display: none;\r\n        }\r\n        .list-empty-title, .list-empty-descr {\r\n            padding-inline: ngx-variables.$spacing-md; \r\n         }\r\n    }\r\n}\r\n\r\n.inline-container {\r\n    height: inherit;\r\n    display: grid;    \r\n    grid-template-rows: auto 1fr;\r\n    \r\n    &:not(.with-smart-filters) {\r\n        .header-area {\r\n            grid-row: 1 / 2\r\n        }\r\n        .list-container {\r\n            grid-row: 2 / 3\r\n        }\r\n    }\r\n\r\n    &.with-smart-filters {\r\n        grid-template-columns: auto 1fr;\r\n        \r\n        .header-area {\r\n            grid-column: 2 / 3;\r\n            grid-row: 1 / 2\r\n        }\r\n        .smart-filter-area {\r\n            grid-column: 1 / 2;\r\n            grid-row: 1 / 3\r\n        }\r\n        .list-container {\r\n            grid-column: 2 / 3;\r\n            grid-row: 2 / 3\r\n        }\r\n    }\r\n\r\n    &.add-padding {\r\n        padding-inline: ngx-variables.$content-padding;\r\n    }    \r\n\r\n    .list-description {\r\n        font-size: ngx-variables.$fs-xs;\r\n        max-width: 640px;\r\n        padding: ngx-variables.$spacing-sm 0;\r\n    }\r\n\r\n    .bread-crumbs {\r\n        padding: ngx-variables.$spacing-md 0 ngx-variables.$spacing-sm 0;\r\n     }\r\n}\r\n.none-inline {\r\n    .list-description {\r\n        font-size: ngx-variables.$fs-sm;\r\n        max-width: 720px;\r\n        padding: ngx-variables.$spacing-sm ngx-variables.$spacing-xs;\r\n    }\r\n\r\n    .bread-crumbs {\r\n        padding: ngx-variables.$spacing-md ngx-variables.$spacing-xs ngx-variables.$spacing-sm ngx-variables.$spacing-xs;\r\n     }\r\n}\r\n\r\n.noDataFoundMsg{\r\n    margin: 1rem 0;\r\n    height: calc(100% - 2rem);\r\n    width: 100%;\r\n    background: hsla(0, 0%, 10%, 0.12);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n",
                    "styleUrl": "./generic-list.component.scss"
                },
                {
                    "data": "@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/functions' as ngx-functions;\n\n.list-empty-state {\n    ::ng-deep {\n        .svg-icon {\n            fill: ngx-functions.get-pep-color(color-system-primary, color-tran-10);\n        }\n    }\n   \n}",
                    "styleUrl": "./generic-list.component.theme.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_dataConvertorService",
                        "type": "PepDataConvertorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_loaderService",
                        "type": "PepLoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_genericListService",
                        "type": "PepGenericListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_sessionService",
                        "type": "PepSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 228,
                "jsdoctags": [
                    {
                        "name": "_dataConvertorService",
                        "type": "PepDataConvertorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_loaderService",
                        "type": "PepLoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_genericListService",
                        "type": "PepGenericListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_sessionService",
                        "type": "PepSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "pepListContainer": {
                    "name": "pepListContainer",
                    "setSignature": {
                        "name": "pepListContainer",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "ViewContainerRef",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 80,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "ViewContainerRef",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "dataSource": {
                    "name": "dataSource",
                    "setSignature": {
                        "name": "dataSource",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "IPepGenericListDataSource",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 96,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "IPepGenericListDataSource",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "smartFilter": {
                    "name": "smartFilter",
                    "setSignature": {
                        "name": "smartFilter",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "IPepGenericListSmartFilter",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 165,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "IPepGenericListSmartFilter",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "pepList": {
                    "name": "pepList",
                    "setSignature": {
                        "name": "pepList",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "PepListComponent",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 198,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "PepListComponent",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "pepList",
                        "type": "",
                        "returnType": "",
                        "line": 202
                    }
                }
            },
            "templateData": "<div *ngIf=\"inline\" class=\"inline-container\" [ngClass]=\"{ 'add-padding': addPadding, 'with-smart-filters': showSmartFilter }\">\n    <div class=\"header-area\" >\n        <div *ngIf=\"showTopBar\" class=\"inline-top-bar-container\">\n            <ng-container *ngTemplateOutlet=\"topBarTemplate\"></ng-container>\n        </div>\n        <ng-container *ngIf=\"description\">\n            <div class=\"list-description\">{{description}}</div>\n        </ng-container>\n        <ng-container *ngIf=\"breadCrumbsItems.length\">\n            <ng-container *ngTemplateOutlet=\"breadCrumbsTemplate\"></ng-container>\n        </ng-container>\n    </div>\n    <ng-container *ngIf=\"showSmartFilter\">\n        <ng-container *ngTemplateOutlet=\"smartFilterTemplate\"></ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"!onLoad\">\n        <ng-container *ngTemplateOutlet=\"listTemplate\"></ng-container>\n    </ng-container>\n</div>\n<pep-page-layout *ngIf=\"!inline\" class=\"none-inline\" [addPadding]=\"addPadding\" [showShadow]=\"showSmartFilter\">\n    <ng-container *ngIf=\"showSmartFilter\" pep-side-area>\n        <ng-container *ngTemplateOutlet=\"smartFilterTemplate\"></ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"showTopBar\" pep-top-area>\n        <ng-container *ngTemplateOutlet=\"topBarTemplate\"></ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"description\" pep-top-area>\n        <div class=\"list-description\">{{description}}</div>\n    </ng-container>\n    <ng-container *ngIf=\"breadCrumbsItems.length\" pep-top-area>\n        <ng-container *ngTemplateOutlet=\"breadCrumbsTemplate\"></ng-container>\n    </ng-container>\n    <div *ngIf=\"!onLoad\" pep-main-area class=\"main-area-container\">\n        <ng-container *ngTemplateOutlet=\"listTemplate\"></ng-container>\n    </div>\n</pep-page-layout>\n\n<ng-template #topBarTemplate>\n    <pep-top-bar [title]=\"title\" [inline]=\"inline\">\n        <div header-start-content>\n            <ng-content select=\"[left-buttons]\"></ng-content>\n        </div>\n        <div header-end-content>\n            <ng-content select=\"[right-buttons]\"></ng-content>\n        </div>\n        <!-- <div footer-start-content>\n            <ng-content select=\"[left-bottom-area]\"></ng-content>               \n        </div>\n        <div footer-end-content>\n            <ng-content select=\"[right-bottom-area]\"></ng-content>     \n        </div> -->\n        <pep-list-actions *ngIf=\"menuActions.length > 0\" [sizeType]=\"inline ? 'sm' : 'md'\" [actions]=\"menuActions\"\n            (actionClick)=\"onActionItemClicked($event)\"></pep-list-actions>\n        <pep-list-total [sizeType]=\"inline ? 'sm' : 'md'\" [totalRows]=\"totalRowCount\">\n        </pep-list-total>\n        <pep-search #search *ngIf=\"showSearch\" [value]=\"searchString\" [sizeType]=\"inline ? 'sm' : 'md'\"\n            (search)=\"onSearchChanged($event)\">\n        </pep-search>\n    </pep-top-bar>\n</ng-template>\n\n<ng-template #smartFilterTemplate>    \n    <pep-side-bar #sideNav [ngClass]=\"{'smart-filter-area': inline}\"> \n        <pep-smart-filters #smartFiltersComponent [title]=\"smartFilters.title\" [fields]=\"smartFilters.fields\"\n            [filters]=\"smartFilters.data\" (filtersChange)=\"onFiltersChange($event)\">\n        </pep-smart-filters>\n    </pep-side-bar>\n</ng-template>\n\n<ng-template #breadCrumbsTemplate>\n    <pep-bread-crumbs class=\"bread-crumbs\" [items]=\"breadCrumbsItems\" [addSpacing]=\"true\" [displayType]=\"'items'\"\n        (itemClick)=\"onBreadCrumbItemClick($event)\"></pep-bread-crumbs>\n</ng-template>\n\n<ng-template #listTemplate>\n    <div *ngIf=\"showEmptyState\" class=\"list-empty-state\">\n        <div class=\"list-empty-title\">{{ listInputs.emptyState.title }}</div>\n        <div class=\"list-empty-descr\">{{ listInputs.emptyState.description }}</div>\n        <pep-icon name=\"leaf_skiny\" class=\"leaf-skiny\"></pep-icon>\n        <pep-icon name=\"leaf_round\" class=\"leaf-round\"></pep-icon>\n        <!-- <mat-icon class=\"leaf-skiny\">\n            <pep-icon name=\"leaf_skiny\"></pep-icon>\n        </mat-icon> -->\n        <!-- <mat-icon class=\"leaf-round\">\n            <pep-icon name=\"leaf_round\"></pep-icon>\n        </mat-icon> -->\n    </div>\n    <div *ngIf=\"!showEmptyState\" class=\"list-container\">\n        <ng-container #pepListContainer></ng-container>\n    </div>\n</ng-template>"
        },
        {
            "name": "GenericListExampleComponent",
            "id": "component-GenericListExampleComponent-9b6b4216850440fd5cf89dcb6569e39bf62f51d55452c8478e7b06e6a408b895f6246cce2b7426301e7a0e06b65dde54f0a77adb6ae0fc883476a2c4bd114fbe",
            "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/generic-list-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-generic-list-example",
            "styleUrls": [
                "./generic-list-example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./generic-list-example.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "defaultValue": "{\n        get: async (data: PepSelectionData) => {\n            if (data?.rows.length === 1 && data?.selectionType !== 0) {\n                return [\n                    {\n                        title: 'Edit',\n                        handler: async (ddd) => {\n                            alert('edit');\n                        }\n                    },\n                    {\n                        title: 'Delete',\n                        handler: async (ddd) => {\n                            alert('delete');\n                        }\n                    }\n                ]\n            } else if (data?.rows.length > 1 || data?.selectionType === 0) {\n                return [\n                    {\n                        title: 'Delete',\n                        handler: async (ddd) => {\n                            //   alert('delete');\n                        }\n                    }\n                ]\n            } else return [];\n        } \n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListActions",
                    "optional": false,
                    "description": "",
                    "line": 160
                },
                {
                    "name": "actions2",
                    "defaultValue": "{\n        get: async (data: PepSelectionData) => {\n            if (data?.rows.length === 1 && data?.selectionType !== 0) {\n                return [\n                    {\n                        title: 'Edit',\n                        handler: async (ddd) => {\n                            alert('edit');\n                        }\n                    },\n                    {\n                        title: 'Delete',\n                        handler: async (ddd) => {\n                            console.log('ddd', ddd);\n                            alert('delete');\n                        }\n                    }\n                ]\n            } else if (data?.rows.length > 1 || data?.selectionType === 0) {\n                return [\n                    {\n                        title: 'Delete',\n                        handler: async (ddd) => {\n                            console.log('ddd 2', ddd);\n                            alert('delete');\n                        }\n                    }\n                ]\n            } else return [];\n        }\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListActions",
                    "optional": false,
                    "description": "",
                    "line": 190
                },
                {
                    "name": "addPadding",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "breadCrumbsItems",
                    "defaultValue": "new Array<PepBreadCrumbItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "dataSource",
                    "defaultValue": "{\n        init: async (params: any) => {\n            return {\n                dataView: {\n                    Type: 'Grid'\n                },\n                totalCount: -1,\n                items: []\n            }\n        }\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListDataSource",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "dataSource2",
                    "defaultValue": "{\n        init: async (params: any) => {\n            return {\n                dataView: {\n                    Type: 'Grid'\n                },\n                totalCount: -1,\n                items: []\n            }\n        }\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListDataSource",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "dataSourceLine",
                    "defaultValue": "{\n        init: async (params: any) => {\n            return {\n                dataView: {\n                    Type: 'Line'\n                },\n                totalCount: -1,\n                items: []\n            }\n        }\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListDataSource",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "description",
                    "defaultValue": "'Some description'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "disableTable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "firstFieldAsLink",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "glist1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GenericListComponent | undefined",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'glist1'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "glist2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GenericListComponent | undefined",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'glist2'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "inline",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "menuItems",
                    "defaultValue": "new Array<PepMenuItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "pager",
                    "defaultValue": "{\n        type: 'pages',\n        size: 10,\n        index: 1\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListPager",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "selectionType",
                    "defaultValue": "'multi'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "smartFilter",
                    "defaultValue": "{\n        dataView: this.getSmartFilters()\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 295
                },
                {
                    "name": "supportSorting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "tableViewType",
                    "defaultValue": "'compact'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepListTableViewType",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "title",
                    "defaultValue": "'Generic list 2 inline title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methodsClass": [
                {
                    "name": "getColumn",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isEnabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ FieldID: string; Type: string; Title: string; Mandatory: boolean; ReadOnly: boolean; }",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isEnabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getComboBoxColumn",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ FieldID: string; Type: string; Title: string; Mandatory: boolean; ReadOnly: boolean; OptionalValues: {}; }",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataSource",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepGenericListDataSource",
                    "typeParameters": [],
                    "line": 298,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDataSource2",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepGenericListDataSource",
                    "typeParameters": [],
                    "line": 409,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDataSourceEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepGenericListDataSource",
                    "typeParameters": [],
                    "line": 505,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDataSourceLine",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepGenericListDataSource",
                    "typeParameters": [],
                    "line": 586,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getHiddenColumn",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ FieldID: string; Type: string; Title: string; Mandatory: boolean; Visible: boolean; }",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItems",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 399,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLinkColumn",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNumberColumn",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ FieldID: string; Type: string; Title: string; Mandatory: boolean; ReadOnly: boolean; }",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRegularReadOnlyColumn",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSmartFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "{ Context: { Name: string; Profile: { InternalID: number; }; ScreenSize: string; }; Type: string; Title: string; Fields: any; FrozenColumnsCount: number; MinimumColumnWidth: number; }",
                    "typeParameters": [],
                    "line": 633,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSmartFilters2",
                    "args": [],
                    "optional": false,
                    "returnType": "{ Context: { Name: string; Profile: { InternalID: number; }; ScreenSize: string; }; Type: string; Title: string; Fields: {}; FrozenColumnsCount: number; MinimumColumnWidth: number; }",
                    "typeParameters": [],
                    "line": 648,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadBreadCrumbs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBreadCrumbClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepBreadCrumbItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepBreadCrumbItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBtn2Clicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 667,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBtnClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 663,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMenuItemClicked",
                    "args": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, AfterViewInit, ViewChild } from '@angular/core';\nimport { IPepMenuItemClickEvent, PepMenuItem } from '@pepperi-addons/ngx-lib/menu';\nimport {\n    IPepGenericListDataSource,\n    IPepGenericListPager,\n    IPepGenericListActions,\n    IPepGenericListInitData,\n    PepGenericListService\n\n} from 'projects/ngx-composite-lib/generic-list'; //from '@pepperi-addons/ngx-composite-lib/generic-list';\n\nimport { PepSelectionData, DEFAULT_PAGE_SIZE, PepListTableViewType } from '@pepperi-addons/ngx-lib/list';\nimport { TranslateService } from '@ngx-translate/core';\nimport { GenericListComponent } from '@pepperi-addons/ngx-composite-lib/generic-list';\nimport { PepBreadCrumbItem, IPepBreadCrumbItemClickEvent } from '@pepperi-addons/ngx-lib/bread-crumbs';\nimport { FakeData, FakeSmartFilterFields, FakeCardsData, FakeCardsDataView, FakeLineDataView, FakeLineData } from './fake-data';\n\n\n@Component({\n    selector: 'app-generic-list-example',\n    templateUrl: './generic-list-example.component.html',\n    styleUrls: ['./generic-list-example.component.scss']\n})\nexport class GenericListExampleComponent implements OnInit {\n    @ViewChild('glist1') glist1: GenericListComponent | undefined;\n    @ViewChild('glist2') glist2: GenericListComponent | undefined;\n\n    inline = true;\n    dataSource: IPepGenericListDataSource = {\n        init: async (params: any) => {\n            return {\n                dataView: {\n                    Type: 'Grid'\n                },\n                totalCount: -1,\n                items: []\n            }\n        }\n    };\n    dataSource2: IPepGenericListDataSource = {\n        init: async (params: any) => {\n            return {\n                dataView: {\n                    Type: 'Grid'\n                },\n                totalCount: -1,\n                items: []\n            }\n        }\n    };\n    dataSourceLine: IPepGenericListDataSource = {\n        init: async (params: any) => {\n            return {\n                dataView: {\n                    Type: 'Line'\n                },\n                totalCount: -1,\n                items: []\n            }\n        }\n    };\n    addPadding = false;\n    title = 'Generic list 2 inline title';\n    menuItems = new Array<PepMenuItem>();\n    breadCrumbsItems = new Array<PepBreadCrumbItem>();\n    description = 'Some description';\n    disableTable = false;\n    pager: IPepGenericListPager = {\n        type: 'pages',\n        size: 10,\n        index: 1\n    };\n    selectionType: any = 'multi';\n    supportSorting = false;\n    firstFieldAsLink = false;\n    tableViewType: PepListTableViewType = 'compact';\n\n    //private selectedRowID = '';\n\n\n    constructor(private translate: TranslateService/*, private genericListService: PepGenericListService*/) {\n        //\n    }\n\n    ngOnInit(): void {\n        this.menuItems.push({\n            key: 'test',\n            text: 'test'\n        });\n\n        this.loadBreadCrumbs();\n\n        this.dataSource = this.getDataSource();\n        this.dataSource2 = this.getDataSourceEmpty();\n        this.dataSourceLine = this.getDataSourceLine();\n\n    }\n\n    private getRegularReadOnlyColumn(columnId: string): any {\n        return {\n            FieldID: columnId,\n            Type: 'TextBox',\n            Title: columnId,\n            Mandatory: false,\n            ReadOnly: true\n        }\n    }\n\n    private getNumberColumn(columnId: string) {\n        return {\n            FieldID: columnId,\n            Type: 'NumberInteger',\n            Title: columnId,\n            Mandatory: false,\n            ReadOnly: true\n        }\n    }\n\n    private getComboBoxColumn(columnId: string) {\n        return {\n            FieldID: columnId,\n            Type: 'ComboBox',\n            Title: columnId,\n            Mandatory: false,\n            ReadOnly: false,\n            OptionalValues: [{ Key: \"AD\", Value: \"Andorra\" }, { Key: \"IL\", Value: \"Israel\" }]\n        }        \n    }\n\n    getColumn(columnId: string, type: string, isEnabled: boolean) {\n        return {\n            FieldID: columnId,\n            Type: type,//'Currency',\n            Title: columnId,\n            Mandatory: false,\n            ReadOnly: !isEnabled\n        }\n    }\n\n    private getLinkColumn(columnId: string): any {\n        return {\n            FieldID: columnId,\n            Type: 'Link',\n            Title: columnId,\n            Mandatory: false,\n            ReadOnly: true\n        }\n    }\n\n    private getHiddenColumn(columnId: string) {\n        return {\n            FieldID: columnId,\n            Type: 'TextBox',\n            Title: columnId,\n            Mandatory: false,\n            Visible: false\n        }\n    }\n\n    actions: IPepGenericListActions = {\n        get: async (data: PepSelectionData) => {\n            if (data?.rows.length === 1 && data?.selectionType !== 0) {\n                return [\n                    {\n                        title: 'Edit',\n                        handler: async (ddd) => {\n                            alert('edit');\n                        }\n                    },\n                    {\n                        title: 'Delete',\n                        handler: async (ddd) => {\n                            alert('delete');\n                        }\n                    }\n                ]\n            } else if (data?.rows.length > 1 || data?.selectionType === 0) {\n                return [\n                    {\n                        title: 'Delete',\n                        handler: async (ddd) => {\n                            //   alert('delete');\n                        }\n                    }\n                ]\n            } else return [];\n        } \n    }\n\n    actions2: IPepGenericListActions = {\n        get: async (data: PepSelectionData) => {\n            if (data?.rows.length === 1 && data?.selectionType !== 0) {\n                return [\n                    {\n                        title: 'Edit',\n                        handler: async (ddd) => {\n                            alert('edit');\n                        }\n                    },\n                    {\n                        title: 'Delete',\n                        handler: async (ddd) => {\n                            console.log('ddd', ddd);\n                            alert('delete');\n                        }\n                    }\n                ]\n            } else if (data?.rows.length > 1 || data?.selectionType === 0) {\n                return [\n                    {\n                        title: 'Delete',\n                        handler: async (ddd) => {\n                            console.log('ddd 2', ddd);\n                            alert('delete');\n                        }\n                    }\n                ]\n            } else return [];\n        }\n    }\n\n\n    loadBreadCrumbs() {\n        this.breadCrumbsItems.push(new PepBreadCrumbItem({\n            key: '1',\n            text: 'Crumb1',\n            title: 'Title1'\n        }));\n        this.breadCrumbsItems.push(new PepBreadCrumbItem({\n            key: '2',\n            text: 'Crumb2',\n            title: 'Title2'\n        }));\n\n    }\n\n    onMenuItemClicked(action: IPepMenuItemClickEvent): void {\n        alert(action.source.key);\n    }\n\n    onBreadCrumbClick(event: IPepBreadCrumbItemClickEvent) {\n        console.log('onBreadCrumbClick', event);\n        if (event?.source?.text === 'Crumb1') {\n            this.pager = {\n                type: 'pages',\n                size: 10,\n                index: 1\n            };\n            this.selectionType = 'multi';\n            this.firstFieldAsLink = false;\n            this.supportSorting = false;\n            this.tableViewType = 'compact';\n            this.smartFilter = {\n                dataView: this.getSmartFilters()\n            }\n            this.dataSource = this.getDataSource();\n\n\n        } else {\n            \n            //this.selectionType = 'single';\n            //this.firstFieldAsLink = true;\n            \n            this.pager.type = 'scroll';\n            this.tableViewType = 'regular';\n            this.supportSorting = true;\n            this.smartFilter = undefined;/*{\n                dataView: this.getSmartFilters2()\n            } */\n            this.dataSource = this.getDataSource2();\n\n        }\n    }\n\n    onClick() {\n        // console.log('glist1', this.glist1);\n        console.log('items',this.glist1?.getSelectedItems());\n        if (this.glist1) {\n            console.log('item 1', this.glist1.getItemById('2e51566e-7035-42dd-a7c2-fb92bc4ed135'));\n            console.log('selected itens 1', this.glist1.getSelectedItems());\n        }\n        //  console.log('glist2', this.glist2);\n        if (this.glist2) {\n            console.log('item 2', this.glist2.getItemById('7e51566e-7035-42dd-a7c2-fb92bc4ed135'));\n            console.log('selected itens 2', this.glist2.getSelectedItems());\n        }\n        console.log('page index', this.glist1?.getPageIndex());\n        //console.log('page index', this.glist1.);\n\n        //console.log('item', this.glist1.getItemById('2e51566e-7035-42dd-a7c2-fb92bc4ed135'));\n        // console.log('selected itens', this.genericListService.getSelectedItems());\n        //PepGenericListService\n        //this.dataSource = this.getDataSourceEmpty();\n    }\n    smartFilter: any = {\n        dataView: this.getSmartFilters()\n    }\n    getDataSource() {\n        return {\n            init: async (params: any) => {\n                const dataList = FakeData.Addons;                \n                // const filteredData = dataList.slice(params.fromIndex, params.toIndex + 1);\n                const filteredData = [...dataList, ...dataList];\n                //const filteredData = dataList.slice(0, 5);\n                //console.log('init params', params);\n                await this.getItems();\n\n                const res = filteredData.map(addon => ({\n                    UUID: addon.UUID,\n                    Description: addon.Addon.Description,\n                    Version: addon.Version,\n                    Type: addon.Type,\n                    CreationDate: addon.CreationDate,                    \n                    TestNum: 100000\n\n                }));\n                const res2 = filteredData.map((item, index) => {\n                    return {\n                        fields: {\n                            UUID: item.UUID,\n                            Description: item.Addon.Description,\n                            Version: item.Version,\n                            Type: item.Type,\n                            CreationDate: item.CreationDate\n                        },\n                        isEditable: true,\n                        isSelected: index % 2 === 0,\n                        isSelectableForActions: true,\n                    }\n                });\n                return Promise.resolve({\n                    dataView: {\n                        Context: {\n                            Name: '',\n                            Profile: { InternalID: 0 },\n                            ScreenSize: 'Landscape'\n                        },\n                        Type: 'Grid',\n                        Title: '',\n                        Fields: [\n                            this.getRegularReadOnlyColumn('UUID'),\n                            this.getRegularReadOnlyColumn('Description'),\n                            this.getRegularReadOnlyColumn('Version'),\n                            this.getLinkColumn('Type'),\n                            this.getRegularReadOnlyColumn('CreationDate'),\n                           // this.getComboBoxColumn('Country'),\n                            this.getNumberColumn('TestNum'),\n                            //this.getHiddenColumn('FirstName'),\n                        ],\n                        Columns: [\n                            { Width: 15 },\n                            { Width: 30 },\n                            { Width: 15 },\n                            { Width: 20 },\n                            { Width: 15 },\n                            { Width: 5 },\n\n                            // { Width: 0 }\n                        ],\n                        FrozenColumnsCount: 0,\n                        MinimumColumnWidth: 0\n                    },\n                    totalCount: res.length,\n                    items: res\n\n                });\n            },\n            /*inputs: () => {\n                return Promise.resolve(\n                    {\n                        pager: {\n                            type: 'scroll'\n                        },\n                        selectionType: 'multi'\n                    }\n                );\n            },*/\n            update: async (params: any) => {\n                //                console.log('update', params);               \n                const dataList = FakeData.Addons;\n                //const filteredData = dataList.slice(params.fromIndex, params.toIndex + 1);\n                const filteredData = dataList.slice(5, 10);\n                const res = filteredData.map(addon => ({\n                    UUID: addon.UUID,\n                    Description: addon.Addon.Description,\n                    Version: addon.Version,\n                    Type: addon.Type,\n                    CreationDate: addon.CreationDate,\n                }));\n                return Promise.resolve(res);\n            },\n            inputs: {\n               \n                // selectionType: 'multi'\n            }\n        } as IPepGenericListDataSource\n    }\n\n    getItems() {\n        \n        return new Promise(resolve => {\n            setTimeout(() => {\n                const dataList = FakeData.Addons;\n                resolve([...dataList, ...dataList]);\n            }, 4000);\n        });\n    }\n\n    getDataSource2() {\n        return {\n            init: async (params: any) => {\n                const dataList = FakeData.Addons;\n                // const filteredData = dataList.slice(params.fromIndex, params.toIndex + 1);\n                const filteredData = [...dataList, ...dataList];\n                //const filteredData = dataList.slice(0, 5);\n                //console.log('init params', params);\n                const res = filteredData.map(addon => ({\n                    UUID: addon.UUID,\n                    Description: addon.Addon.Description,\n                    Version: addon.Version,\n                    Type: addon.Type,\n                    CreationDate: addon.CreationDate,                    \n                    TestNum: 100000\n\n                }));\n                const rows2 = filteredData.map((item) => {\n                    return {\n                        fields: {\n                            UUID: item.UUID,\n                            Description: item.Addon.Description,\n                            Version: item.Version,\n                            Type: item.Type,\n                            CreationDate: item.CreationDate\n                        },\n                        isEditable: true,\n                        isSelectableForActions: false,\n                    }\n                });\n                return Promise.resolve({\n                    dataView: {\n                        Context: {\n                            Name: '',\n                            Profile: { InternalID: 0 },\n                            ScreenSize: 'Landscape'\n                        },\n                        Type: 'Grid',\n                        Title: '',\n                        Fields: [\n                            this.getRegularReadOnlyColumn('UUID'),\n                            this.getRegularReadOnlyColumn('Description'),\n                            this.getRegularReadOnlyColumn('Version'),\n                            this.getLinkColumn('Type'),\n                            this.getRegularReadOnlyColumn('CreationDate'),\n                            this.getNumberColumn('TestNum'),\n                            //this.getHiddenColumn('FirstName'),\n                        ],\n                        Columns: [\n                            { Width: 15 },\n                            { Width: 30 },\n                            { Width: 15 },\n                            { Width: 20 },\n                            { Width: 15 },\n                            { Width: 5 },\n\n                            // { Width: 0 }\n                        ],\n                        FrozenColumnsCount: 0,\n                        MinimumColumnWidth: 0\n                    },\n                    totalCount: res.length,\n                    items: res\n\n                });\n            },\n            /*inputs: () => {\n                return Promise.resolve(\n                    {\n                        pager: {\n                            type: 'scroll'\n                        },\n                        selectionType: 'multi'\n                    }\n                );\n            },*/\n            update: async (params: any) => {\n                //                console.log('update', params);\n                const dataList = FakeData.Addons;\n                //const filteredData = dataList.slice(params.fromIndex, params.toIndex + 1);\n                const filteredData = dataList.slice(5, 10);\n                const res = filteredData.map(addon => ({\n                    UUID: addon.UUID,\n                    Description: addon.Addon.Description,\n                    Version: addon.Version,\n                    Type: addon.Type,\n                    CreationDate: addon.CreationDate,\n                }));\n                return Promise.resolve(res);\n            },\n            inputs: {\n                selectionType: 'single'\n            }\n        } as IPepGenericListDataSource\n    }\n\n    getDataSourceEmpty() {\n        return {\n            init: (params: any) => {\n\n                return Promise.resolve({\n                    dataView: {\n                        InternalID: 3098435,\n                        Type: \"Card\",\n                        Title: \"Sales Rep Form\",\n                        Hidden: false,\n                        CreationDateTime: \"2018-04-22T07:58:02Z\",\n                        ModificationDateTime: \"2018-04-22T07:58:13Z\",\n                        Context: {\n                            \"Object\": {\n                                \"Resource\": \"transactions\",\n                                \"InternalID\": 138173,\n                                \"Name\": \"sales avner\"\n                            },\n                            \"Name\": \"OrderCenterBarcodeLinesView\",\n                            \"ScreenSize\": \"Tablet\",\n                            \"Profile\": {\n                                \"InternalID\": 46273,\n                                \"Name\": \"Rep\"\n                            }\n                        },\n                        ListData: {},\n                        Fields: FakeCardsDataView,\n                        \"Rows\": [\n                            {\n                                \"Mode\": \"MatchParent\"\n                            },\n                            {\n                                \"Mode\": \"Fixed\"\n                            },\n                            {\n                                \"Mode\": \"Fixed\"\n                            },\n                            {\n                                \"Mode\": \"Fixed\"\n                            }\n                        ],\n                        \"Columns\": [\n                            {},\n                            {},\n                            {},\n                            {},\n                            {},\n                            {},\n                            {},\n                            {},\n                            {},\n                            {}\n                        ]\n                    },\n\n                    totalCount: FakeCardsData.length * 2,\n                    items: FakeCardsData\n\n                });\n            },\n            update: (params: any) => {\n                // console.log('update', params);\n                const dataList = FakeData.Addons;\n                //const filteredData = dataList.slice(params.fromIndex, params.toIndex + 1);\n                const filteredData = dataList.slice(15, 20);\n                const res = filteredData.map(addon => ({\n                    UUID: addon.UUID,\n                    Description: addon.Addon.Description,\n                    Version: addon.Version,\n                    Type: addon.Type,\n                    CreationDate: addon.CreationDate\n                }));\n                return Promise.resolve(res);\n            },\n            inputs: {\n                selectionType: 'single',\n                firstFieldAsLink: true\n            }\n        } as IPepGenericListDataSource\n    }\n\n    getDataSourceLine() {\n        return {\n            init: (params: any) => {\n                return Promise.resolve({\n                    dataView: {\n                        \"InternalID\": 2884561,\n                        \"Type\": \"Line\",\n                        \"Title\": \"Sales Rep Form\",\n                        \"Hidden\": false,\n                        \"CreationDateTime\": \"2017-12-03T09:50:14Z\",\n                        \"ModificationDateTime\": \"2017-12-03T09:50:14Z\",\n                        \"Context\": {\n                            \"Object\": {\n                                \"Resource\": \"transactions\",\n                                \"InternalID\": 138173,\n                                \"Name\": \"sales avner\"\n                            },\n                            \"Name\": \"OrderCenterFlatMatrixLine\",\n                            \"ScreenSize\": \"Tablet\",\n                            \"Profile\": {\n                                \"InternalID\": 46273,\n                                \"Name\": \"Rep\"\n                            }\n                        },\n                        \"ListData\": {},\n                        \"Fields\": FakeLineDataView,\n                        \"Rows\": [],\n                        \"Columns\": [\n                            {},\n                            {},\n                            {},\n                            {},\n                            {},\n                            {},\n                            {},\n                            {},\n                            {},\n                            {}\n                        ]\n                    },\n                    totalCount: FakeLineData.length * 2,\n                    items: FakeLineData\n                });\n            }\n        } as IPepGenericListDataSource\n    }\n\n    getSmartFilters() {\n        return {\n            Context: {\n                Name: '',\n                Profile: { InternalID: 0 },\n                ScreenSize: 'Landscape'\n            },\n            Type: 'Menu',\n            Title: '',\n            Fields: FakeSmartFilterFields,\n            FrozenColumnsCount: 0,\n            MinimumColumnWidth: 0\n        }\n    }\n\n    getSmartFilters2() {\n        return {\n            Context: {\n                Name: '',\n                Profile: { InternalID: 0 },\n                ScreenSize: 'Landscape'\n            },\n            Type: 'Menu',\n            Title: '',\n            Fields: [FakeSmartFilterFields[0], FakeSmartFilterFields[2]],\n            FrozenColumnsCount: 0,\n            MinimumColumnWidth: 0\n        }\n    }\n\n    onBtnClicked() {\n        // console.log('get selected', this.genericListService.getItemById('2e51566e-7035-42dd-a7c2-fb92bc4ed135'));\n    }\n\n    onBtn2Clicked() {\n        //\n        \n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-wrapper {\r\n    height: inherit;\r\n    display: grid ;\r\n    grid-template-rows: 1fr;\r\n    gap: 2rem;\r\n    padding-inline: 1rem;\r\n}",
                    "styleUrl": "./generic-list-example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"example-wrapper\">\n\n    <pep-generic-list #glist1 [dataSource]=\"dataSource\"  [actions]=\"actions\" [smartFilter]=\"smartFilter\" [inline]=\"true\"\n        [showTopBar]=\"true\" [hideSelectAll]=\"false\" [tableViewType]=\"tableViewType\" [zebraStripes]=\"true\" [uuidMapping]=\"'UUID'\" [emptyState]=\"{show: true}\"\n        [breadCrumbsItems]=\"breadCrumbsItems\" [description]=\"description\" [disabled]=\"disableTable\" [pager]=\"pager\" [selectionType]=\"'single'\"\n        title=\"Generic list inline title\" [showSearch]=\"true\" (breadCrumbItemClick)=\"onBreadCrumbClick($event)\">\n        <ng-container right-buttons>\n            <pep-menu class=\"pep-spacing-element\" [items]=\"menuItems\" [sizeType]=\"'sm'\"\n                (menuItemClick)=\"onMenuItemClicked($event)\">\n            </pep-menu>\n            <pep-button class=\"pep-spacing-element\" [value]=\"'New'\" [sizeType]=\"'sm'\" [styleType]=\"'strong'\"\n                (click)=\"onBtnClicked()\">\n            </pep-button>\n        </ng-container>\n      \n    </pep-generic-list>\n\n\n\n    <!-- <pep-generic-list #glist2 [dataSource]=\"dataSourceLine\" [actions]=\"actions2\" [addPadding]=\"addPadding\" [inline]=\"true\" [showTopBar]=\"true\"\n        [uuidMapping]=\"'UUIS'\" [disabled]=\"disableTable\" [selectionType]=\"'multi'\" [pager]=\"pager\" [title]=\"title\"\n        [showSearch]=\"true\" (breadCrumbItemClick)=\"onBreadCrumbClick($event)\">\n        <ng-container right-buttons>\n            <pep-menu class=\"pep-spacing-element\" [items]=\"menuItems\" [sizeType]=\"'sm'\"\n                (menuItemClick)=\"onMenuItemClicked($event)\">\n            </pep-menu>\n            <pep-button class=\"pep-spacing-element\" [value]=\"'New'\" [sizeType]=\"'sm'\" [styleType]=\"'strong'\"\n                (click)=\"onBtn2Clicked()\">\n            </pep-button>\n        </ng-container>\n    </pep-generic-list> -->\n\n</div>\n<pep-button class=\"pep-spacing-element\" [value]=\"'Try me'\" [sizeType]=\"'sm'\" [styleType]=\"'strong'\" (click)=\"onClick()\">\n</pep-button>"
        },
        {
            "name": "GroupButtonsSettingsComponent",
            "id": "component-GroupButtonsSettingsComponent-88b76d7e6288f313ecbcb7135733f81263873a9fbf1fe5bff113631319adc84e72f5ca41cadce28e5226194ac431cca791c9865db58e87484ebfd263184aa678",
            "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-group-buttons-settings",
            "styleUrls": [
                "./group-buttons-settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group-buttons-settings.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "btnKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "btnsArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "Array<PepButton>",
                    "decorators": []
                },
                {
                    "name": "dir",
                    "defaultValue": "'ltr'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "\"rtl\" | \"ltr\"",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "excludeKeys",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "Array<string>",
                    "decorators": []
                },
                {
                    "name": "groupType",
                    "defaultValue": "'sizes'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "PepGroupbuttonsTypes",
                    "decorators": []
                },
                {
                    "name": "header",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "subHeader",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "useNone",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "btnkeyChange",
                    "defaultValue": "new EventEmitter<IPepButtonClickEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "EventEmitter<IPepButtonClickEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_btnKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "defaultCallback",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "none",
                    "defaultValue": "{key: 'none'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepButton",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "sizes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<PepButton>",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "arrayMerge",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getButtonsArray",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onKeyChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepButtonClickEvent | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepButtonClickEvent | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { PepSizeType } from '@pepperi-addons/ngx-lib';\nimport { IPepButtonClickEvent, PepButton } from '@pepperi-addons/ngx-lib/button';\nimport { PepGroupbuttonsTypes } from './group-buttons-settings.model';\n\n@Component({\n    selector: 'pep-group-buttons-settings',\n    templateUrl: './group-buttons-settings.component.html',\n    styleUrls: ['./group-buttons-settings.component.scss']\n})\nexport class GroupButtonsSettingsComponent implements OnInit {\n\n    @Input() header = '';\n    @Input() subHeader = '';\n\n    @Input() groupType: PepGroupbuttonsTypes = 'sizes'; \n    @Input() btnsArray: Array<PepButton> = [];\n    @Input() excludeKeys: Array<string> = []; // for example ['xs','xl']\n\n    @Input() useNone = false;\n    @Input() disabled = false;\n    @Input() dir: 'rtl' | 'ltr' = 'ltr';\n    \n    private _btnKey: any;\n    @Input()\n    set btnKey(value: any) {\n        if (!value) {\n            this._btnKey = '';\n        } else {\n            this._btnKey = value;\n        }\n    }\n    get btnKey(): any {\n        return this._btnKey;\n    }\n\n    @Output()\n    btnkeyChange: EventEmitter<IPepButtonClickEvent> = new EventEmitter<IPepButtonClickEvent>();\n    \n    \n    none: PepButton = {key: 'none'};\n    \n    sizes: Array<PepButton> = [];\n    defaultCallback = (event: IPepButtonClickEvent) => this.onKeyChange(event);\n\n    // pepB: PepSizeType | 'none' = \"xs\";\n\n    constructor(\n        private translate: TranslateService,\n    ) {\n    }\n\n    ngOnInit(): void { \n        // Get the first translation for load all translations.\n        this.translate.get('GENERAL.NONE').subscribe((res) => {\n            this.none = { key: 'none', value: this.translate.instant('GENERAL.NONE'), callback: () => this.onKeyChange(null) };\n            \n            this.arrayMerge();\n        });\n    }\n\n    arrayMerge(){\n\n        this.btnsArray = this.getButtonsArray();\n        \n        // check if need to remove items from the buttons array\n        if(this.excludeKeys){\n            this.btnsArray = this.btnsArray.filter(i => !this.excludeKeys.find(f => f === i.key));\n        }\n        // check if need to add the None button\n        if(this.useNone){\n            this.btnsArray = [this.none].concat(this.btnsArray);\n        }\n    }\n\n    onKeyChange(event: IPepButtonClickEvent | null) {\n        this.btnKey = event?.source?.key || 'none';\n        this.btnkeyChange.emit(this.btnKey);\n    }\n\n    getButtonsArray() {\n        switch(this.groupType){\n            case 'custom':{\n                // Set default callback if not exist.\n                for (let index = 0; index < this.btnsArray.length; index++) {\n                    const btn = this.btnsArray[index];\n                    \n                    if (!btn.callback) {\n                        btn.callback = this.defaultCallback;\n                    }\n                }\n\n                return this.btnsArray;\n            }\n            case 'sizes':{\n                return [\n                    { key: 'xs', value: this.translate.instant('GENERAL.XS'), callback: this.defaultCallback },\n                    { key: 'sm', value: this.translate.instant('GENERAL.SM'), callback: this.defaultCallback },\n                    { key: 'md', value: this.translate.instant('GENERAL.MD'), callback: this.defaultCallback },\n                    { key: 'lg', value: this.translate.instant('GENERAL.LG'), callback: this.defaultCallback },\n                    { key: 'xl', value: this.translate.instant('GENERAL.XL'), callback: this.defaultCallback },\n                    { key: '2xl', value: this.translate.instant('GENERAL.XXL'), callback: this.defaultCallback }\n                ];\n            }\n            case 'vertical-align':{\n                return [\n                    { key: 'start', value: this.translate.instant('GENERAL.VERTICAL_ALIGN.TOP'), callback: this.defaultCallback },\n                    { key: 'middle', value: this.translate.instant('GENERAL.VERTICAL_ALIGN.MIDDLE'), callback: this.defaultCallback },\n                    { key: 'end', value: this.translate.instant('GENERAL.VERTICAL_ALIGN.BOTTOM'), callback: this.defaultCallback }\n                ];\n            }\n            case 'left-right-arrows':{\n                return [\n                    { key: 'left', iconName: 'arrow_left_alt', callback: this.defaultCallback },\n                    { key: 'right', iconName: 'arrow_right_alt', callback: this.defaultCallback }\n                ];\n            }\n            case 'horizontal-align': {\n                return [\n                    { key: 'left', iconName: 'text_align_right', callback: this.defaultCallback },\n                    { key: 'center', iconName: 'text_align_center', callback: this.defaultCallback },\n                    { key: 'right', iconName: 'text_align_left', callback: this.defaultCallback },\n                ];\n            }\n            case 'font-weight':{\n                return [\n                    { key: 'regular', value: this.translate.instant('GENERAL.FONT_WEIGHT.REGULAR'), callback: this.defaultCallback },\n                    { key: 'bold', value: this.translate.instant('GENERAL.FONT_WEIGHT.BOLD'), callback: this.defaultCallback },\n                    { key: 'bolder', value: this.translate.instant('GENERAL.FONT_WEIGHT.BOLDER'), callback: this.defaultCallback }\n                ]\n            }\n            case 'width-sizes':{\n                return [\n                    { key: 'narrow', value: this.translate.instant('GENERAL.WIDTH_SIZE.NARROW'), callback: this.defaultCallback },\n                    { key: 'regular', value: this.translate.instant('GENERAL.WIDTH_SIZE.REGULAR'), callback: this.defaultCallback },\n                    { key: 'wide', value: this.translate.instant('GENERAL.WIDTH_SIZE.WIDE'), callback: this.defaultCallback }\n                ];\n            }\n            case 'boolean':{\n                return [\n                    { key: 'true', value: this.translate.instant('GENERAL.BOOLEAN.TRUE'), callback: this.defaultCallback },\n                    { key: 'false', value: this.translate.instant('GENERAL.BOOLEAN.FALSE'), callback: this.defaultCallback }\n                ];\n            }\n\n            default: {\n                return [];\n            }\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/variables' as ngx-variables;\r\n\r\n:host {\r\n    width: 100%;\r\n    // max-width: 200px;\r\n\r\n    .shadow-size-group,\r\n    .shadow-type-group {\r\n        display: block;\r\n        margin-bottom: ngx-variables.$form-spacing;\r\n    }\r\n}",
                    "styleUrl": "./group-buttons-settings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "btnKey": {
                    "name": "btnKey",
                    "setSignature": {
                        "name": "btnKey",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "btnKey",
                        "type": "any",
                        "returnType": "any",
                        "line": 34
                    }
                }
            },
            "templateData": "<label *ngIf=\"header != ''\" class=\"body-xl bold ellipsis\">{{header}}</label>\n<pep-field-title *ngIf=\"subHeader !=''\" [label]=\"subHeader\" [disabled]=\"disabled\" [xAlignment]=\"dir === 'rtl' ? 'right' : 'left'\"></pep-field-title>\n<pep-group-buttons [buttons]=\"btnsArray\" \n                   [selectedButtonKey]=\"btnKey\" \n                   [stretch]=\"true\" \n                   buttonsClass=\"md regular\" \n                   [buttonsDisabled]=\"disabled\" \n                   viewType=\"toggle\">\n</pep-group-buttons>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-0cd94fbc94a83702e45bf987cb3b3f9074d69cd27e6ca2e4fbac0dc5b5047bd4dc3a9ce8a77f6bd9ab7ae3e6ca8e49b34bed529ca0da0fa428fec544a0324870",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "IconPickerComponent",
            "id": "component-IconPickerComponent-17b8715de27ff8e9d67c292584906554595935423f93801a8b65276455bd01325030aeb3a9c34633caddcc2d239786387f1a322e0396bcd6090538c46d639cd2",
            "file": "projects/ngx-composite-lib/icon-picker/icon-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-icon-picker",
            "styleUrls": [
                "./icon-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon-picker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "dir",
                    "defaultValue": "'ltr'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"rtl\" | \"ltr\"",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "header",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconURL",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "preview_header",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "select_btn_header",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "useCheckBoxHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "iconChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "iconDisableChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUseIconChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openIconPickerDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, ViewContainerRef } from '@angular/core';\nimport { PepAddonBlockLoaderService } from '@pepperi-addons/ngx-lib/remote-loader';\n\n\n@Component({\n    selector: 'pep-icon-picker',\n    templateUrl: './icon-picker.component.html',\n    styleUrls: ['./icon-picker.component.scss']\n})\nexport class IconPickerComponent implements OnInit {\n\n    @Input() disabled = false;\n    @Input() header = '';\n    @Input() preview_header = '';\n    @Input() select_btn_header = '';\n    @Input() dir: 'rtl' | 'ltr' = 'ltr';\n    @Input() iconURL = '';\n    @Input() useCheckBoxHeader = true;\n\n    @Output()\n    iconChange: EventEmitter<any> = new EventEmitter<any>();\n    \n    @Output()\n    iconDisableChange: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(\n        private viewContainerRef: ViewContainerRef,\n        private addonBlockLoaderService: PepAddonBlockLoaderService) { }\n\n    ngOnInit() {\n        // Do nothing.\n    }\n\n   \n\n    openIconPickerDialog() {\n        const dialogRef = this.addonBlockLoaderService.loadAddonBlockInDialog({\n            container: this.viewContainerRef,\n            name: 'AssetPicker',\n            hostObject: {\n                selectionType: 'single',\n                allowedAssetsTypes: 'images',\n                inDialog: true\n            },\n            size: 'full-screen',\n            hostEventsCallback: async (event) => {\n                if (event?.action === 'on-save') {\n                    this.iconChange.emit(event);\n                    dialogRef?.close();\n                } else if (event.action === 'on-cancel') {\n                    dialogRef?.close();\n                }\n            }\n        });\n    }\n\n    onUseIconChange(event: boolean){\n       this.disabled = !this.disabled;\n       this.iconDisableChange.emit(event);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    width: 100%;\r\n}\r\n\r\n.main-cont{\r\n    display: flex;\r\n    gap: 0.5rem; \r\n    width: 100%;\r\n\r\n    .selected-cont{\r\n        width: 3.5rem;\r\n        align-self: end;\r\n        display: flex;\r\n        flex-direction: column;\r\n\r\n        .pep-button{\r\n            display: flex;\r\n            align-items: center;\r\n\r\n            img{\r\n                max-height: 1.5rem;\r\n                max-width: 1.5rem;\r\n            }\r\n        }\r\n    }\r\n    .choose-btn-cont{\r\n        width: -webkit-fill-available;\r\n        align-self: end;\r\n        display: flex;\r\n        flex-direction: column;  \r\n    }\r\n}",
                    "styleUrl": "./icon-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "addonBlockLoaderService",
                        "type": "PepAddonBlockLoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "addonBlockLoaderService",
                        "type": "PepAddonBlockLoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<label *ngIf=\"!useCheckBoxHeader\" class=\"title-xl ellipsis\">{{header !== '' ? header : ('ICON_PICKER_BUTTON.MAIN_HEADER' | translate)}}</label>\n<pep-checkbox *ngIf=\"useCheckBoxHeader\" \n        class=\"checkbox-as-title\" \n        [value]=\"!disabled\" \n        [label]=\"header !== '' ? header : ('ICON_PICKER_BUTTON.MAIN_HEADER' | translate)\" \n        [renderTitle]=\"false\" \n        (valueChange)=\"onUseIconChange($event)\">\n</pep-checkbox>\n<div class=\"main-cont\">\n    <div class=\"selected-cont\">\n        <pep-field-title [label]=\"preview_header !== '' ? preview_header : ('ICON_PICKER_BUTTON.SELECTED' | translate)\" \n                         [disabled]=\"disabled\" \n                         [xAlignment]=\"dir === 'rtl' ? 'right' : 'left'\">\n        </pep-field-title>\n        <!-- <pep-button\n            iconName=\"system_bolt\"\n            [disabled]=\"disabled\">\n           \n        </pep-button> -->\n        <div class=\"pep-button md weak\">\n            <img *ngIf=\"iconURL !== ''\" [src]=\"iconURL\"/>\n        </div>\n    </div>\n    <div class=\"choose-btn-cont\">\n        <pep-field-title [label]=\"select_btn_header !== '' ? select_btn_header : ('ICON_PICKER_BUTTON.CHOOSE_ICON_HEADER' | translate)\" \n                         [disabled]=\"disabled\" \n                         [xAlignment]=\"dir === 'rtl' ? 'right' : 'left'\">\n        </pep-field-title>\n        <pep-button\n            [value]=\"'ICON_PICKER_BUTTON.CHOOSE_ICON' | translate\" \n            styleType=\"regular\"\n            [disabled]=\"disabled\" (buttonClick)=\"openIconPickerDialog()\">\n        </pep-button>\n    </div>\n</div>"
        },
        {
            "name": "ManageParameterComponent",
            "id": "component-ManageParameterComponent-65773c8104e6bdf75051984e79af8e18fd197bdb1fd0fd84481407a509480e99e1336c6929bd198aa9b93616b492d3d0c9f0eb1c441b9a409a610101f8f21724",
            "file": "projects/ngx-composite-lib/manage-parameters/manage-parameter/manage-parameter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "manage-parameter",
            "styleUrls": [
                "./manage-parameter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./manage-parameter.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericFormDataView",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GenericFormComponent",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "incoming",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IParameterFormData",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "isValid",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "parameter",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IParamemeter | undefined",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "showAccessibility",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "showType",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "parameter",
                            "type": "IParamemeter | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "parameter",
                            "type": "IParamemeter | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getParameter",
                    "args": [
                        {
                            "name": "parameter",
                            "type": "IParamemeter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IParamemeter",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "parameter",
                            "type": "IParamemeter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadDataView",
                    "args": [
                        {
                            "name": "paramType",
                            "type": "SchemeFieldType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "paramType",
                            "type": "SchemeFieldType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onValueChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepGenericFormValueChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepGenericFormValueChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveParameter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, ViewChild } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { GenericFormComponent, IPepGenericFormDataView, IPepGenericFormValueChange } from '@pepperi-addons/ngx-composite-lib/generic-form';\nimport { IParamemeter, IParameterFormData } from '../manage-parameters.model';\n\nimport { TranslateService } from '@ngx-translate/core';\nimport { ManageParametersService } from '../manage-parameters.service';\nimport { SchemeFieldType } from '@pepperi-addons/papi-sdk';\n\n@Component({\n    selector: 'manage-parameter',\n    templateUrl: './manage-parameter.component.html',\n    styleUrls: ['./manage-parameter.component.scss']\n})\nexport class ManageParameterComponent implements OnInit {\n\n    // @ViewChild('flowsList', {read: GenericFormComponent}) set genericFormSetter(inForm: GenericFormComponent) {\n    //     if (inForm) {\n    //         this.form = inForm;\n    //     }\n    // };\n    \n    form!: GenericFormComponent;\n    parameter: IParamemeter | undefined = undefined;\n    showType = false;\n    showAccessibility = false;\n    dataView!: IPepGenericFormDataView;\n    isValid = true;\n\n    constructor ( private dialogRef: MatDialogRef<ManageParameterComponent>,\n        private manageParametersService: ManageParametersService,\n        private translate: TranslateService,\n        @Inject(MAT_DIALOG_DATA) public incoming: IParameterFormData) {\n\n    }\n\n    private loadDataView(paramType: SchemeFieldType) {\n        this.dataView = this.manageParametersService.getParameterFormDataView(this.incoming.Mode, paramType || 'String', this.showType, this.showAccessibility);\n    }\n\n    ngOnInit(): void {\n        this.parameter = this.getParameter(this.incoming.Parameter);\n        this.showType = this.incoming.ShowType ?? false;\n        this.showAccessibility = this.incoming.ShowAccessibility ?? false;\n        this.loadDataView(this.parameter?.Type);\n    }\n\n    saveParameter() {\n        // before updating the parameter, remove redundant properties\n        if (this.parameter && this.showAccessibility) {\n            delete this.parameter['Accessibility'];\n            delete this.parameter['Accessibility_Description'];\n        }\n\n        this.close(this.parameter);\n    }\n\n    close(parameter: IParamemeter | undefined = undefined) {\n        this.dialogRef.close(parameter || null);\n    }\n\n    getParameter(parameter: IParamemeter): IParamemeter {\n        const ret: IParamemeter = JSON.parse(JSON.stringify(parameter));\n        Object.keys(parameter || {}).forEach(prop => {\n            if (typeof(parameter[prop]) != 'boolean') {\n                // if the value is null/undefined, don't copy it\n                if (parameter[prop]) {\n                    ret[prop] = parameter[prop].toString();\n                }\n            } else if (prop === 'Internal' && this.showAccessibility) {\n                ret['Accessibility'] = parameter[prop] ? 'Internal' : 'External'\n            } else {\n                ret[prop] = parameter[prop];\n            }\n        });\n        \n        if (this.showAccessibility) {\n            ret['Accessibility_Description'] = this.translate.instant('MANAGE_PARAMETERS.INTERNAL_DESCRIPTION');\n        }\n\n        return ret;\n    }\n\n    onValueChanged(event: IPepGenericFormValueChange) {\n        if (event.ApiName === 'Type' && this.showType) {\n            this.loadDataView(event.Value);\n        } else if (event.ApiName === 'Accessibility' && this.showAccessibility) {\n            if (this.parameter) {\n                this.parameter['Internal'] = event.Value === 'Internal';\n            }\n        }\n    }\n\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// :host {\r\n    \r\n// }",
                    "styleUrl": "./manage-parameter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ManageParameterComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "manageParametersService",
                        "type": "ManageParametersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "incoming",
                        "type": "IParameterFormData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ManageParameterComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "manageParametersService",
                        "type": "ManageParametersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "incoming",
                        "type": "IParameterFormData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<pep-dialog [title]=\"(incoming.Mode === 'edit' ? 'MANAGE_PARAMETERS.EDIT_FORM_TITLE' : 'MANAGE_PARAMETERS.ADD_FORM_TITLE') | translate\">\n    <ng-container pep-dialog-content>\n        <pep-generic-form #addForm [dataSource]=\"parameter\" [dataView]=\"dataView\" (formValidationChange)=\"isValid = $event\" (valueChange)=\"onValueChanged($event)\">\n\n        </pep-generic-form>\n    </ng-container>\n    <ng-container pep-dialog-actions>\n        <div class=\"pep-spacing-element-negative\" style=\"display: flex;\">         \n            <pep-button \n                class=\"pep-spacing-element\"\n                [sizeType]=\"'md'\" \n                [value]=\"'Cancel' | translate\" \n                [styleType]=\"'weak'\" \n                (buttonClick)=\"close()\"\n        ></pep-button>\n            <pep-button \n                class=\"pep-spacing-element\"\n                [sizeType]=\"'md'\" \n                [value]=\"(incoming.Mode === 'edit' ? 'Update' : 'Save') | translate\"\n                [styleType]=\"'strong'\" \n                (buttonClick)=\"saveParameter()\"\n                [disabled]=\"!isValid\"\n            ></pep-button>\n        </div>\n    </ng-container>\n</pep-dialog>"
        },
        {
            "name": "ManageParametersComponent",
            "id": "component-ManageParametersComponent-d960eda1503f7603fce25ff2ef9e03d0d535dd5d83ef958cf015b8be32c7e5d9b370c542368d2622d1e6382e69309d01c96bb9291166bebd8ddf6b382042eec2",
            "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-manage-parameters",
            "styleUrls": [
                "./manage-parameters.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./manage-parameters.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "parameters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "IParamemeter[]",
                    "decorators": []
                },
                {
                    "name": "parametersColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IParametersColumn[]",
                    "decorators": []
                },
                {
                    "name": "parametersTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showAccessibility",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showType",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "parametersChange",
                    "defaultValue": "new EventEmitter<IParamemeter[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "actions",
                    "defaultValue": "{\n        get: async (data: PepSelectionData) => {\n            const actions = [];\n            if (data && data.rows.length == 1) {\n                actions.push({\n                    title: this.translate.instant('Edit'),\n                    handler: async (objs: any) => {\n                        this.openCreateParamForm('edit', objs.rows[0]);\n                    }\n                });\n                actions.push({\n                    title: this.translate.instant('Delete'),\n                    handler: async (objs: any) => {\n                        this.showDeleteDialog(objs.rows[0]);\n                    }\n                })\n            }\n            return actions;\n        }\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListActions",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListDataSource",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "listMessages",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "getDataSource",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepGenericListDataSource",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "notifyParametersChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onFieldClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepFieldClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepFieldClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCreateParamForm",
                    "args": [
                        {
                            "name": "formMode",
                            "type": "ParameterFormType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "paramName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formMode",
                            "type": "ParameterFormType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "paramName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showDeleteDialog",
                    "args": [
                        {
                            "name": "paramName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "paramName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IPepGenericListActions, IPepGenericListDataSource, IPepGenericListParams } from '@pepperi-addons/ngx-composite-lib/generic-list';\nimport { PepDialogData, PepDialogService } from '@pepperi-addons/ngx-lib/dialog';\nimport { PepSelectionData } from '@pepperi-addons/ngx-lib/list';\nimport { ParameterFormType, IParameterFormData, IParamemeter, IParametersColumn } from './manage-parameters.model';\nimport { ManageParameterComponent } from './manage-parameter/manage-parameter.component';\nimport { IPepFieldClickEvent } from '@pepperi-addons/ngx-lib';\nimport { ManageParametersService } from './manage-parameters.service';\n\n@Component({\n    selector: 'pep-manage-parameters',\n    templateUrl: './manage-parameters.component.html',\n    styleUrls: ['./manage-parameters.component.scss']\n})\nexport class ManageParametersComponent implements OnInit {\n\n    @Input()\n    showType = false;\n\n    @Input()\n    showAccessibility = false;\n\n    // If columns are not defined, the default columns will be used (default is with no Internal - Accessibility).\n    @Input()\n    parametersColumns: IParametersColumn[] = [];\n\n    @Input()\n    parameters: IParamemeter[] = [];\n\n    @Input()\n    parametersTitle = '';\n\n    @Output()\n    parametersChange = new EventEmitter<IParamemeter[]>();\n    \n    dataSource!: IPepGenericListDataSource;\n    listMessages: { [key: string]: string } = {};\n\n    actions: IPepGenericListActions = {\n        get: async (data: PepSelectionData) => {\n            const actions = [];\n            if (data && data.rows.length == 1) {\n                actions.push({\n                    title: this.translate.instant('Edit'),\n                    handler: async (objs: any) => {\n                        this.openCreateParamForm('edit', objs.rows[0]);\n                    }\n                });\n                actions.push({\n                    title: this.translate.instant('Delete'),\n                    handler: async (objs: any) => {\n                        this.showDeleteDialog(objs.rows[0]);\n                    }\n                })\n            }\n            return actions;\n        }\n    }\n\n    constructor (private translate: TranslateService,\n        private dataViewService: ManageParametersService,\n        private dialogService: PepDialogService\n    ) { }\n\n    private notifyParametersChange() {\n        this.parametersChange.emit(this.parameters);\n        this.dataSource = this.getDataSource();\n    }\n\n    private getDataSource(): IPepGenericListDataSource {\n        return {\n            init: async (params: IPepGenericListParams) => {\n                const listDataView = this.dataViewService.getParametersListDataView(this.parametersColumns, this.showType, this.showAccessibility);\n                console.log('data view:', listDataView);\n                return {\n                    dataView: listDataView,\n                    totalCount: this.parameters.length,\n                    items: this.parameters\n                };\n            },\n            inputs: {\n                pager: {\n                    type: 'scroll'\n                },\n                selectionType: 'single',\n                emptyState: {\n                    show: true,\n                    title: this.listMessages['MANAGE_PARAMETERS.EMPTY_STATE_TITLE'],\n                    description: this.listMessages['MANAGE_PARAMETERS.EMPTY_STATE_DESCRIPTION'],\n                }\n            },\n        } as IPepGenericListDataSource\n    }\n\n    ngOnInit(): void {\n        this.translate.get(['MANAGE_PARAMETERS.EMPTY_STATE_TITLE', 'MANAGE_PARAMETERS.EMPTY_STATE_DESCRIPTION']).subscribe(translations => {\n            this.listMessages = translations;\n            this.dataSource = this.getDataSource();\n        })\n    }\n\n    onFieldClick(event: IPepFieldClickEvent) {\n        this.openCreateParamForm('edit', event.value);\n    }\n\n    openCreateParamForm(formMode: ParameterFormType, paramName = '') {\n        const paramItem = this.parameters.find(x => x.Key === paramName);\n        const defaultParam: IParamemeter = {\n            DefaultValue: '',\n            Key: '',\n            Type: 'String',\n            Description: ''\n        };\n\n        // Add Accessibility field only if showAccessibility is true.\n        if (this.showAccessibility) {\n            defaultParam['Internal'] = false;\n        }\n\n        const parameter = { ...defaultParam, ...paramItem };\n    \n        const formData: IParameterFormData = {\n            Parameter: parameter,\n            Mode: formMode,\n            ShowType: this.showType,\n            ShowAccessibility: this.showAccessibility\n        };\n\n        const config = this.dialogService.getDialogConfig({}, 'large');\n        config.data = new PepDialogData({\n            content: ManageParameterComponent\n        })\n        \n        this.dialogService.openDialog(ManageParameterComponent, formData, config).afterClosed().subscribe((value: IParamemeter) => {\n            if (value) {\n                const index = this.parameters.findIndex(param => param.Key === value.Key);\n                // if the param doesn't exist, push to the end of the array, otherwise edit existing\n                if (index < 0) {\n                    this.parameters.push(value);\n                }\n                else {\n                    this.parameters.splice(index, 1, value);\n                }\n\n                this.notifyParametersChange();\n            }\n        });\n    }\n\n    showDeleteDialog(paramName: string) {\n        const dataMsg = new PepDialogData({\n            title: this.translate.instant('MANAGE_PARAMETERS.DELETE_DIALOG_TITLE', { param_name: paramName }),\n            actionsType: 'cancel-delete',\n            content: this.translate.instant('MANAGE_PARAMETERS.DELETE_DIALOG_CONTENT')\n        });\n\n        this.dialogService.openDefaultDialog(dataMsg).afterClosed().subscribe(async (isDeletePressed) => {\n            if (isDeletePressed) {\n                const index = this.parameters.findIndex(x => x.Key === paramName);\n                if (index > -1) {\n                    this.parameters.splice(index, 1);\n                    this.notifyParametersChange();\n                }\n            }\n        });\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    .generic-list {\r\n        height: 100%;\r\n    }   \r\n}",
                    "styleUrl": "./manage-parameters.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataViewService",
                        "type": "ManageParametersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "PepDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataViewService",
                        "type": "ManageParametersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "PepDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<pep-generic-list class=\"generic-list\"\n    [title]=\"parametersTitle || ('MANAGE_PARAMETERS.TITLE' | translate)\"\n    [showTopBar]=\"true\" \n    [dataSource]=\"dataSource\" \n    [inline]=\"true\"\n    [actions]=\"actions\"\n    [addPadding]=\"false\"\n    [uuidMapping]=\"'Key'\"\n    (fieldClick)=\"onFieldClick($event)\"\n    >\n    <ng-container right-buttons>\n        <pep-button \n            class=\"pep-spacing-element\"\n            [sizeType]=\"'sm'\" \n            [value]=\"'MANAGE_PARAMETERS.ADD_BUTTON_TITLE' | translate\"\n            [styleType]=\"'strong'\" \n            (buttonClick)=\"openCreateParamForm('add', '')\"\n        ></pep-button>\n    </ng-container>\n</pep-generic-list>"
        },
        {
            "name": "MenuDataViewComponent",
            "id": "component-MenuDataViewComponent-57184d056be8b7f2919083edf4da2a0751ac080700ac0f9fa8ccd88d185947b5ab5ec3431015ce28afcd961b0d2041b174c5724e726a813b4c5716cd2c36671b",
            "file": "projects/ngx-composite-lib/data-view-builder/menu-data-view/menu-data-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "menu-data-view",
            "styleUrls": [
                "./menu-data-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu-data-view.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "availableFieldsTitles",
                    "defaultValue": "new Map<string, string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "Map<string | string>",
                    "decorators": []
                },
                {
                    "name": "emptyDropAreaId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "fields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "Array<DataViewField>",
                    "decorators": []
                },
                {
                    "name": "itemKeyLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "itemTitleLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mappedFieldsId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showAddSeparator",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fieldsChange",
                    "defaultValue": "new EventEmitter<DataViewField[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "EventEmitter<DataViewField[]>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isGrabbing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "separatorTitleModalTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'separatorTitleModalTemplate', {read: TemplateRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewField",
                    "args": [
                        {
                            "name": "draggableItem",
                            "type": "IPepDraggableItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "draggableItem",
                            "type": "IPepDraggableItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addSeparator",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeTitle",
                    "args": [
                        {
                            "name": "menuField",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "menuField",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeDialog",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "notifyFieldsChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onDeleteMappedField",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepButtonClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "menuField",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepButtonClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "menuField",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragEnd",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragEnd",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDragStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragStart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragStart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDropField",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<any[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<any[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEditSeparatorField",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepButtonClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "menuField",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepButtonClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "menuField",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTitleChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "menuField",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "menuField",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDialogValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "spliceMappedFields",
                    "args": [
                        {
                            "name": "start",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "deleteCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "start",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "deleteCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "MenuDataViewField",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CdkDragDrop, CdkDragEnd, CdkDragStart, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { Component, EventEmitter, Input, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IPepButtonClickEvent } from '@pepperi-addons/ngx-lib/button';\nimport { PepDialogService } from '@pepperi-addons/ngx-lib/dialog';\nimport { IPepDraggableItem } from '@pepperi-addons/ngx-lib/draggable-items';\nimport { DataViewField, MenuDataViewField } from '@pepperi-addons/papi-sdk';\nimport { DataViewBuilderService } from '../data-view-builder.service';\n\n@Component({\n    selector: 'menu-data-view',\n    templateUrl: './menu-data-view.component.html',\n    styleUrls: ['./menu-data-view.component.scss']\n})\nexport class MenuDataViewComponent implements OnInit {\n    @ViewChild('separatorTitleModalTemplate', { read: TemplateRef }) separatorTitleModalTemplate!: TemplateRef<any>;\n\n    @Input() \n    fields: Array<DataViewField> = []; // The data view fields.\n\n    @Input()\n    availableFieldsTitles: Map<string, string> = new Map<string, string>(); // <FieldID, Original Title> from the available fields.\n\n    @Input() \n    emptyDropAreaId = '';\n\n    @Input() \n    mappedFieldsId = '';\n\n    @Input()\n    showAddSeparator = true;\n\n    @Input()\n    itemKeyLabel = '';\n\n    @Input()\n    itemTitleLabel = '';\n\n    @Output()\n    fieldsChange: EventEmitter<DataViewField[]> = new EventEmitter<DataViewField[]>();\n    \n    isGrabbing = false;\n    private dialogRef: MatDialogRef<any> | null = null;\n    \n    constructor(\n        private translate: TranslateService,\n        private dialogService: PepDialogService,\n        private dataViewBuilderService: DataViewBuilderService\n    ) { \n        this.dataViewBuilderService.isGrabbingChange$.subscribe((value) => {\n            this.isGrabbing = value;\n        });\n    }\n    \n    private addNewField(draggableItem: IPepDraggableItem, index: number) {\n        // Add new menuField to the mappedFields.\n        const menuField: MenuDataViewField = { FieldID: draggableItem.data.key, Title: draggableItem.title };\n        this.spliceMappedFields(index, 0, menuField);\n    }\n    \n    private spliceMappedFields(start: number, deleteCount: number, item?: MenuDataViewField) {\n        if (item) {\n            this.fields.splice(start, deleteCount, item);\n        } else {\n            this.fields.splice(start, deleteCount);\n        }\n\n        this.notifyFieldsChange();\n    }\n\n    private changeTitle(menuField: MenuDataViewField, title: string) {\n        menuField.Title = title;\n        this.notifyFieldsChange();\n    }\n\n    private notifyFieldsChange() {\n        this.fieldsChange.emit(this.fields);\n    }\n\n    ngOnInit() {\n        if(this.itemKeyLabel == ''){\n            this.translate.get('DATA_VIEW_BUILDER.MENU_ITEM_KEY_TITLE').toPromise().then((res) => {\n                this.itemKeyLabel = res;\n            });\n        }\n        if(this.itemTitleLabel == ''){\n            this.translate.get('DATA_VIEW_BUILDER.MENU_ITEM_VALUE_TITLE').toPromise().then((res) => {\n                this.itemTitleLabel = res;\n            });\n        }\n    }\n\n    addSeparator(index: number) {\n        const menuField: MenuDataViewField = { FieldID: '', Title: '' };\n        this.spliceMappedFields(index, 0, menuField);\n    }\n\n    onDragStart(event: CdkDragStart) {\n        this.dataViewBuilderService.onDragStart(event);\n    }\n\n    onDragEnd(event: CdkDragEnd) {\n        this.dataViewBuilderService.onDragEnd(event);\n    }\n    \n    onDropField(event: CdkDragDrop<any[]>) {\n        if (event.previousContainer === event.container) {\n            moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n            this.notifyFieldsChange();\n        } else if (event.container.id === 'emptyDropArea') {\n            this.addNewField(event.previousContainer.data[event.previousIndex], this.fields.length);\n        } else {\n            this.addNewField(event.previousContainer.data[event.previousIndex], event.currentIndex);\n        }\n    }\n\n    onTitleChanged(event: string, menuField: MenuDataViewField) {\n        this.changeTitle(menuField, event);\n    }\n\n    onDeleteMappedField(event: IPepButtonClickEvent, menuField: MenuDataViewField) {\n        const index = this.fields.findIndex(ms => ms === menuField);\n        if (index > -1) {\n            this.spliceMappedFields(index, 1);\n        }\n    }\n\n    onEditSeparatorField(event: IPepButtonClickEvent, menuField: MenuDataViewField) {\n        this.dialogRef = this.dialogService.openDialog(this.separatorTitleModalTemplate, { value: menuField.Title });\n        this.dialogRef.afterClosed().subscribe((titleValue) => {\n            if (titleValue !== undefined) {\n                this.changeTitle(menuField, titleValue);\n            }\n        });\n    }\n\n    setDialogValue(value: string) {\n        this.closeDialog(value);\n    }\n\n    closeDialog(value: string | undefined = undefined) {\n        this.dialogRef?.close(value);\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/variables' as ngx-variables;\r\n@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/mixins' as ngx-mixins;\r\n@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/functions' as ngx-functions;\r\n\r\n@use '../../src/core/style/components/data-view-builder';\r\n\r\n.drop-field-here-area {\r\n    min-height: 5rem;\r\n\r\n    @include data-view-builder.mapped-field-item-container();\r\n    @include ngx-mixins.state-weak-default();\r\n    @include ngx-mixins.inline(ngx-functions.get-pep-color(color-system-primary, color-flat-r-20), 1px, dashed);\r\n\r\n    &.cdk-drop-list-dragging {\r\n        @include ngx-mixins.focus();\r\n        \r\n        &:hover {\r\n            @include ngx-mixins.state-regular-hover(true);\r\n            @include ngx-mixins.focus();\r\n        }\r\n\r\n        // Hide the placeholder when \r\n        ::ng-deep.placeholder-item {\r\n            display: none;\r\n        }\r\n    }\r\n}\r\n\r\n.mapped-fields-area {\r\n    display: flex;\r\n    flex-direction: column;\r\n    // row-gap: ngx-variables.$content-margin;\r\n    column-gap: ngx-variables.$content-margin;\r\n    \r\n    &:not(.no-row-gap) {\r\n        row-gap: ngx-variables.$content-margin;\r\n    }\r\n\r\n    &.cdk-drop-list-dragging {\r\n        ::ng-deep.placeholder-item {\r\n            @include data-view-builder.mapped-field-item-container();\r\n            @include ngx-mixins.state-regular-default(true);\r\n            @include ngx-mixins.focus();\r\n            height: ngx-variables.$draggable-item-height;\r\n        }\r\n    }\r\n\r\n    // The mapped-field-container style declared in style.scss because when dragging in list the item added to the end of the dom and we cannot style it here (component context).\r\n    .mapped-field-container { \r\n        cursor: grab;\r\n        @include data-view-builder.mapped-field-container();\r\n\r\n        &.cdk-drag-placeholder {\r\n            // opacity: 0;\r\n            // @include ngx-mixins.state-regular-default(true);\r\n            @include ngx-mixins.focus();\r\n\r\n            .fields-wrapper,\r\n            .separator-wrapper {\r\n                opacity: 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    .add-separator-container {\r\n        @include data-view-builder.mapped-field-item-container();\r\n        height: ngx-variables.$content-margin;\r\n\r\n        .add-separator {\r\n            position: relative;\r\n            display: none;\r\n        }\r\n\r\n        &:hover .add-separator {\r\n            display: block;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./menu-data-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "PepDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataViewBuilderService",
                        "type": "DataViewBuilderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "PepDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataViewBuilderService",
                        "type": "DataViewBuilderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"fields === null || fields.length === 0; then emptyTemplate; else notEmptyTemplate\"></ng-container>\n<ng-template #emptyTemplate>\n    <div [id]=\"emptyDropAreaId\" class=\"drop-field-here-area\" cdkDropList (cdkDropListDropped)=\"onDropField($event)\">\n        <mat-icon class=\"pep-spacing-element\">\n            <pep-icon name=\"arrow_down_alt\"></pep-icon>\n        </mat-icon>\n        <span class=\"body-sm ellipsis\">\n            {{ 'DATA_VIEW_BUILDER.EMPTY_DROP_AREA_TEXT' | translate }}\n        </span> \n    </div>\n</ng-template>\n<ng-template #notEmptyTemplate>\n    <div [id]=\"mappedFieldsId\" class=\"mapped-fields-area\" [ngClass]=\"{ 'no-row-gap': !isGrabbing }\"\n        cdkDropList [cdkDropListData]=\"fields\" (cdkDropListDropped)=\"onDropField($event)\">\n        <ng-container *ngFor=\"let menuField of fields; let i = index\" >\n            <div class=\"mapped-field-container\" [ngClass]=\"{ 'separator-container': menuField.FieldID === '' }\" \n                cdkDrag (cdkDragStarted)=\"onDragStart($event)\" (cdkDragEnded)=\"onDragEnd($event)\">\n                <ng-container *ngTemplateOutlet=\"mappedFieldTemplate; context: { menuField: menuField }\"></ng-container>\n            </div>\n            <div *ngIf=\"!isGrabbing\" class=\"add-separator-container\">\n                <pep-button *ngIf=\"showAddSeparator\" class=\"add-separator\" styleType=\"regular\" sizeType=\"sm\" iconName=\"number_plus\" \n                    [value]=\"'DATA_VIEW_BUILDER.ADD_SEPARATOR' | translate\" (buttonClick)=\"addSeparator(i+1)\"></pep-button>\n            </div>\n        </ng-container>\n    </div>\n</ng-template>\n\n<ng-template #mappedFieldTemplate let-menuField=\"menuField\">\n    <ng-container *ngIf=\"menuField.FieldID !== ''; then menuItemTemplate; else separatorTemplate\"></ng-container>\n\n    <ng-template #menuItemTemplate>\n        <div class=\"fields-wrapper\">\n            <pep-textbox [label]=\"itemKeyLabel\" [value]=\"menuField.FieldID\" [disabled]=\"true\">\n            </pep-textbox>\n            \n            <pep-textbox [label]=\"itemTitleLabel\" [hint]=\"'(' + (availableFieldsTitles.get(menuField.FieldID) || '') + ')'\"\n                [value]=\"menuField.Title\" (valueChange)=\"onTitleChanged($event, menuField)\">\n            </pep-textbox>\n    \n            <pep-button class=\"center-button\" iconName=\"system_bin\" [title]=\"'ACTIONS.DELETE' | translate\" (buttonClick)=\"onDeleteMappedField($event, menuField)\"></pep-button>\n        </div>\n    </ng-template>\n    <ng-template #separatorTemplate>\n        <div class=\"separator-wrapper \">\n            <div class=\"pep-spacing-element title title-md color-dimmed\">\n                <span [title]=\"menuField.Title\">{{ menuField.Title }}</span>\n            </div>\n            <div class=\"list-actions\">\n                <pep-button iconName=\"system_edit\" [title]=\"'ACTIONS.EDIT' | translate\" sizeType=\"xs\" styleType=\"regular\" (buttonClick)=\"onEditSeparatorField($event, menuField)\"></pep-button>\n                <pep-button iconName=\"system_bin\" [title]=\"'ACTIONS.DELETE' | translate\" sizeType=\"xs\" styleType=\"regular\" (buttonClick)=\"onDeleteMappedField($event, menuField)\"></pep-button>\n            </div>\n        </div>\n    </ng-template>\n</ng-template>\n\n<ng-template #separatorTitleModalTemplate let-data>\n    <pep-dialog [title]=\"'DATA_VIEW_BUILDER.SEPARATOR_TITLE' | translate\">\n        <ng-container pep-dialog-content>\n            <pep-textbox #txt [label]=\"'DATA_VIEW_BUILDER.ADD_A_TITLE' | translate\" [(value)]=\"data.value\">\n            </pep-textbox>\n        </ng-container>\n        <ng-container pep-dialog-actions>\n            <div class=\"pep-spacing-element-negative\">\n                <button mat-button class=\"pep-spacing-element pep-button md weak\"\n                    (click)=\"closeDialog()\">\n                    {{'Cancel' | translate}}\n                </button>\n                <button mat-button class=\"pep-spacing-element pep-button md strong\"\n                    (click)=\"setDialogValue(txt.value)\">\n                    {{ 'Save' | translate}}\n                </button>\n            </div>\n        </ng-container>\n    </pep-dialog>\n</ng-template>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-432c9ae0bcf6e2e1f46701f7565a67376cb10145b7d049c5fe930cf8f075c6e02e24151589750b18cbaa8266f7c61393b95c4d833fbfd71ee228904aa014349f",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "RichTextComponent",
            "id": "component-RichTextComponent-129546b5a0f1eba6aab2bb615a823448c4369cabc3d307b7f85b73e026f787dfb2b65c166b725031350519ab16b3148e19aa00e74861a05d7763b984ad856e85",
            "file": "projects/ngx-composite-lib/rich-text/rich-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-rich-text",
            "styleUrls": [
                "./rich-text.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./rich-text.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "inlineMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "key",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "layoutType",
                    "defaultValue": "'form'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "PepLayoutType",
                    "decorators": []
                },
                {
                    "name": "mandatory",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "maxFieldCharacters",
                    "defaultValue": "300",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "renderEnlargeButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "renderTitle",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rowSpan",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "sanitize",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showTitle",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "toolbarOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "IPepRichHtmlTextareaToolbarOptions",
                    "decorators": []
                },
                {
                    "name": "useAssetsForImages",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "visible",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "xAlignment",
                    "defaultValue": "DEFAULT_HORIZONTAL_ALIGNMENT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "PepHorizontalAlignment",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_toolbarOptions",
                    "defaultValue": "this.getDefaultToolbarOptions()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepRichHtmlTextareaToolbarOptions",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "quillEditor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getDefaultToolbarOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepRichHtmlTextareaToolbarOptions",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "insertAssets",
                    "args": [
                        {
                            "name": "assetUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "assetUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEditorOpen",
                    "args": [
                        {
                            "name": "editor",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "editor",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openAssetsPickerDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "valueChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewContainerRef } from '@angular/core';\nimport { PepAddonBlockLoaderService } from '@pepperi-addons/ngx-lib/remote-loader';\nimport { RichTextService } from './rich-text.service';\nimport { DEFAULT_HORIZONTAL_ALIGNMENT, PepHorizontalAlignment, PepLayoutType } from '@pepperi-addons/ngx-lib';\nimport { FormGroup } from '@angular/forms';\nimport { IPepRichHtmlTextareaToolbarOptions } from '@pepperi-addons/ngx-lib/rich-html-textarea';\nimport Quill from 'quill';\n\n@Component({\n    selector: 'pep-rich-text',\n    templateUrl: './rich-text.component.html',\n    styleUrls: ['./rich-text.component.scss']\n})\nexport class RichTextComponent implements OnInit {\n\n    @Input() key = '';\n    @Input() value = '';\n    @Input() label = '';\n    @Input() mandatory = false;\n    @Input() disabled = false;\n    @Input() readonly = false;\n    @Input() maxFieldCharacters = 300;\n    @Input() xAlignment: PepHorizontalAlignment = DEFAULT_HORIZONTAL_ALIGNMENT;\n    @Input() sanitize = true;\n    @Input() rowSpan = 1;\n    @Input() visible = true;\n    @Input() isActive = false;\n    @Input() showTitle = true;\n    @Input() renderTitle = true;\n    @Input() renderEnlargeButton = true;\n    @Input() layoutType: PepLayoutType = 'form';\n    @Input() inlineMode = false;\n    @Input() useAssetsForImages = true;\n    \n    private quillEditor: any;\n    protected _toolbarOptions: IPepRichHtmlTextareaToolbarOptions = this.getDefaultToolbarOptions();\n    @Input()\n    get toolbarOptions(): IPepRichHtmlTextareaToolbarOptions {\n        return this._toolbarOptions;\n    }\n    set toolbarOptions(options: IPepRichHtmlTextareaToolbarOptions) {\n        if (options) {\n            this._toolbarOptions = options;\n        }\n    }\n\n    @Output()\n        valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(\n        private viewContainerRef: ViewContainerRef,\n        private addonBlockLoaderService: PepAddonBlockLoaderService, \n        private RichTextService: RichTextService) { \n            this.toolbarOptions = this.getDefaultToolbarOptions();\n        }\n\n    ngOnInit() {\n        // Do nothing.\n        \n    }\n\n\n    getDefaultToolbarOptions(): IPepRichHtmlTextareaToolbarOptions {\n        return {\n            font: false,\n            size: false,\n            header: true,\n            bold: true,\n            italic: true,\n            underline: true,\n            strike: false,\n            link: true,\n            image: { useAssetsABI : true },\n            ordered: true,\n            bullet: true,\n            color: true,\n            background: false,\n            align: true\n        };\n    }\n\n    onEditorOpen(editor: any){\n        this.quillEditor = editor;\n\n        if(this.useAssetsForImages){\n            const imageButton = document.querySelector('.ql-image');\n            const newButton = document.querySelector('.quill-editor-image-btn')?.cloneNode(true);\n            \n            if(imageButton && newButton){\n                newButton.addEventListener(\"click\", () => { this.openAssetsPickerDialog();});\n                //newButton.addEventListener(\"click\", () => { this.insertAssets('https://pfs.pepperi.com/50d42a3f-f21d-40fa-8c24-a1359b04dbb7/ad909780-0c23-401e-8e8e-f514cc4f6aa2/Assets/logo.jpg');});\n                imageButton.parentNode?.appendChild(newButton);\n                imageButton.setAttribute('style','display:none');    \n            }\n        }\n    }\n    \n    openAssetsPickerDialog() {\n        const dialogRef = this.addonBlockLoaderService.loadAddonBlockInDialog({\n            container: this.viewContainerRef,\n            name: 'AssetPicker',\n            hostObject: {\n                selectionType: 'single',\n                allowedAssetsTypes: 'images',\n                inDialog: true\n            },\n            size: 'full-screen',\n            hostEventsCallback: async (event) => {\n                if (event?.action === 'on-save') {\n                    if(event.url){\n                        this.insertAssets(event.url);\n                    }\n                    dialogRef?.close();\n                } else if (event.action === 'on-cancel') {\n                    dialogRef?.close();\n                }\n            }\n        });\n    }\n\n    insertAssets(assetUrl: string){\n        const range = this.quillEditor.getSelection() || { index: 0, length: 0};\n        this.quillEditor.insertEmbed(range.index, 'image', assetUrl);\n    }\n\n    valueChanged(event: any){\n        this.valueChange.emit(event);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep .quill-editor-image-btn{\r\n    display: none;\r\n    width: 2.5rem !important;\r\n}",
                    "styleUrl": "./rich-text.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "addonBlockLoaderService",
                        "type": "PepAddonBlockLoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "RichTextService",
                        "type": "RichTextService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "addonBlockLoaderService",
                        "type": "PepAddonBlockLoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "RichTextService",
                        "type": "RichTextService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "toolbarOptions": {
                    "name": "toolbarOptions",
                    "setSignature": {
                        "name": "toolbarOptions",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "options",
                                "type": "IPepRichHtmlTextareaToolbarOptions",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "jsdoctags": [
                            {
                                "name": "options",
                                "type": "IPepRichHtmlTextareaToolbarOptions",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "toolbarOptions",
                        "type": "",
                        "returnType": "IPepRichHtmlTextareaToolbarOptions",
                        "line": 38
                    }
                }
            },
            "templateData": "<pep-rich-html-textarea [key]=\"key\" \n                        [value]=\"value\"\n                        [label]=\"label\" \n                        [mandatory]=\"mandatory\"\n                        [disabled]=\"disabled\"\n                        [readonly]=\"readonly\"\n                        [maxFieldCharacters]=\"maxFieldCharacters\" \n                        [xAlignment]=\"xAlignment\" \n                        [toolbarOptions]=\"toolbarOptions\"\n                        [rowSpan]=\"rowSpan\" \n                        [visible]=\"visible\"\n                        \n                        [isActive]=\"isActive\"\n                        [showTitle]=\"showTitle\"\n                        [renderTitle]=\"renderTitle\"\n                        [renderEnlargeButton]=\"renderEnlargeButton\"\n                        [layoutType]=\"layoutType\"\n                        [inlineMode]=\"inlineMode\"\n                        (editorCreated)=\"onEditorOpen($event)\"\n                        (valueChange)=\"valueChanged($event)\">\n</pep-rich-html-textarea>\n<pep-button [sizeType]=\"'sm'\" [classNames]=\"'pep-spacing-element quill-editor-image-btn'\" \n                [iconName]=\"'system_image'\" (buttonClick)=\"openAssetsPickerDialog()\">\n</pep-button>"
        },
        {
            "name": "ShadowSettingsComponent",
            "id": "component-ShadowSettingsComponent-44184213543f666aadbfb238242834cda54ad5831583aea3bceff620913b5f079943cbed93acdca88607e51574d047f150ad93a698c854eaa4c937a79697e071",
            "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-shadow-settings",
            "styleUrls": [
                "./shadow-settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shadow-settings.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "shadow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "PepShadowSettings",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "shadowChange",
                    "defaultValue": "new EventEmitter<PepShadowSettings>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<PepShadowSettings>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_shadow",
                    "defaultValue": "new PepShadowSettings()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepShadowSettings",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "shadowIntensities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<PepButton>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "shadowSizes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<PepButton>",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onIntensityChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "PepShadowIntensityType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "PepShadowIntensityType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSizeChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "PepSizeType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "PepSizeType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUseChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "raiseShadowChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { PepSizeType } from '@pepperi-addons/ngx-lib';\nimport { IPepButtonClickEvent, PepButton } from '@pepperi-addons/ngx-lib/button';\nimport { PepShadowIntensityType, PepShadowSettings } from './shadow-settings.model';\n\n@Component({\n    selector: 'pep-shadow-settings',\n    templateUrl: './shadow-settings.component.html',\n    styleUrls: ['./shadow-settings.component.scss']\n})\nexport class ShadowSettingsComponent implements OnInit {\n\n    private _shadow: PepShadowSettings = new PepShadowSettings();\n    @Input()\n    set shadow(value: PepShadowSettings) {\n        if (!value) {\n            this._shadow = new PepShadowSettings();\n        } else {\n            this._shadow = value;\n        }\n    }\n    get shadow(): PepShadowSettings {\n        return this._shadow;\n    }\n\n    @Output()\n    shadowChange: EventEmitter<PepShadowSettings> = new EventEmitter<PepShadowSettings>();\n    \n    shadowSizes: Array<PepButton> = [];\n    shadowIntensities: Array<PepButton> = [];\n\n    constructor(\n        private translate: TranslateService,\n    ) {\n    }\n\n    ngOnInit(): void { \n        // Get the first translation for load all translations.\n        this.translate.get('SHADOW_SETTINGS.INTENSITY_SOFT').toPromise().then((typeSoft) => {\n            this.shadowSizes = [\n                { key: 'sm', value: this.translate.instant('GENERAL.SM'), callback: () => this.onSizeChange('sm') },\n                { key: 'md', value: this.translate.instant('GENERAL.MD'), callback: () => this.onSizeChange('md') },\n                { key: 'lg', value: this.translate.instant('GENERAL.LG'), callback: () => this.onSizeChange('lg') },\n                { key: 'xl', value: this.translate.instant('GENERAL.XL'), callback: () => this.onSizeChange('xl') }\n            ];\n\n            this.shadowIntensities = [\n                { key: 'soft', value: typeSoft, callback: () => this.onIntensityChange('soft') },\n                { key: 'regular', value: this.translate.instant('SHADOW_SETTINGS.INTENSITY_REGULAR'), callback: () => this.onIntensityChange('regular') },\n                { key: 'hard', value: this.translate.instant('SHADOW_SETTINGS.INTENSITY_HARD'), callback: () => this.onIntensityChange('hard') }\n            ];\n        });\n    }\n\n\n    private raiseShadowChange() {\n        this.shadowChange.emit(this.shadow);\n    }\n\n    onUseChanged(value: boolean) {\n        this.shadow.use = value;\n        this.raiseShadowChange();\n    }\n\n    onSizeChange(value: PepSizeType) {\n        this.shadow.size = value;\n        this.raiseShadowChange();\n    }\n\n    onIntensityChange(value: PepShadowIntensityType) {\n        this.shadow.intensity = value;\n        this.raiseShadowChange();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/variables' as ngx-variables;\r\n\r\n:host {\r\n    width: 100%;\r\n    // max-width: 200px;\r\n\r\n    .shadow-size-group,\r\n    .shadow-type-group {\r\n        display: block;\r\n        margin-bottom: ngx-variables.$form-spacing;\r\n    }\r\n}",
                    "styleUrl": "./shadow-settings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "shadow": {
                    "name": "shadow",
                    "setSignature": {
                        "name": "shadow",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "PepShadowSettings",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "PepShadowSettings",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "shadow",
                        "type": "",
                        "returnType": "PepShadowSettings",
                        "line": 23
                    }
                }
            },
            "templateData": "<pep-checkbox class=\"checkbox-as-title\" [label]=\"'SHADOW_SETTINGS.TITLE' | translate\" [renderTitle]=\"false\" [value]=\"shadow.use\" (valueChange)=\"onUseChanged($event)\"></pep-checkbox>\n<pep-field-title [label]=\"'SHADOW_SETTINGS.SIZE' | translate\" [disabled]=\"!shadow.use\"></pep-field-title>\n<pep-group-buttons class=\"shadow-size-group\" [buttons]=\"shadowSizes\" [selectedButtonKey]=\"shadow.size\" [stretch]=\"true\" buttonsClass=\"md regular\" [buttonsDisabled]=\"!shadow.use\" viewType=\"toggle\">\n</pep-group-buttons>\n<pep-field-title [label]=\"'SHADOW_SETTINGS.INTENSITY' | translate\" [disabled]=\"!shadow.use\"></pep-field-title>\n<pep-group-buttons class=\"shadow-intensity-group\" [buttons]=\"shadowIntensities\" [selectedButtonKey]=\"shadow.intensity\" [stretch]=\"true\" buttonsClass=\"md regular\" [buttonsDisabled]=\"!shadow.use\" viewType=\"toggle\">\n</pep-group-buttons>"
        },
        {
            "name": "ShowIfBadgeComponent",
            "id": "component-ShowIfBadgeComponent-103a1b2e2a1ba806321b7c58646842c0c8a84f292c124909a871bb15013f17061ac0a4d8c17f5e285aada2a5cc65e279836dbc7fb1243e996a7e2397c7306db7",
            "file": "projects/ngx-composite-lib/show-if-badge/show-if-badge.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-show-if-badge",
            "styleUrls": [
                "./show-if-badge.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./show-if-badge.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'hsl(0,0%,0%)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconName",
                    "defaultValue": "pepIconSystemView.name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 627,
                            "end": 678,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 351,
                            "tagName": {
                                "pos": 628,
                                "end": 632,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "type"
                            },
                            "comment": "<p>See {@link PepIconType}</p>\n",
                            "typeExpression": {
                                "pos": 633,
                                "end": 646,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 634,
                                    "end": 645,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 183,
                                    "typeName": {
                                        "pos": 634,
                                        "end": 645,
                                        "flags": 16777216,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 80,
                                        "escapedText": "PepIconType"
                                    }
                                }
                            }
                        },
                        {
                            "pos": 678,
                            "end": 712,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 679,
                                "end": 687,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "memberof"
                            },
                            "comment": "<p>PepButtonComponent</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIf you want to show an icon in the button then select an icon form the provided icon list\n\n",
                    "description": "<p>If you want to show an icon in the button then select an icon form the provided icon list</p>\n",
                    "line": 23,
                    "type": "PepIconType",
                    "decorators": []
                },
                {
                    "name": "showIf",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isRtl",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\nimport { PepLayoutService } from '@pepperi-addons/ngx-lib';\nimport { PepIconType, pepIconSystemView } from '@pepperi-addons/ngx-lib/icon';\nimport { PepColorSettings } from '@pepperi-addons/ngx-composite-lib/color-settings';\n\n\n@Component({\n    selector: 'pep-show-if-badge',\n    templateUrl: './show-if-badge.component.html',\n    styleUrls: ['./show-if-badge.component.scss']\n})\n\nexport class ShowIfBadgeComponent {\n    @Input() showIf = false;\n   \n     /**\n     * If you want to show an icon in the button then select an icon form the provided icon list\n     *\n     * @type {PepIconType} See {@link PepIconType}\n     * @memberof PepButtonComponent\n     */\n   @Input() iconName: PepIconType = pepIconSystemView.name;\n   @Input() backgroundColor = 'hsl(0,0%,0%)';\n   \n    \n    protected isRtl = false;\n    \n    constructor(protected layoutService: PepLayoutService) { \n        this.isRtl = this.layoutService.isRtl();\n    }\n\n    ngOnInit(){\n        setTimeout(() => {\n            const badge = document.getElementsByClassName(\"mat-badge-content\")[0] as HTMLElement;\n                if(badge){\n                    badge.setAttribute('style', 'background-color:'+ this.backgroundColor + '!important');\n                }\n          }, 0);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/mixins';\r\n@use '@pepperi-addons/ngx-lib/src/core/style/abstracts/functions';\r\n\r\n.show-if-badge {\r\n    @include mixins.pep-badge();\r\n    position: relative;\r\n    right: 0;\r\n    \r\n    &.rtl-direction {\r\n        right: unset;\r\n        left: 0;\r\n    }\r\n\r\n    .mat-icon {\r\n        right: 0;\r\n        height: 2.5rem;\r\n        width: 2.5rem;\r\n        margin-top: -1rem;\r\n        margin-right: -1.25rem;\r\n\r\n        ::ng-deep.svg-icon {\r\n            fill: functions.get-pep-color(color-system-primary-invert, color-base);\r\n            width: 1.75rem;\r\n            height: 1.75rem;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./show-if-badge.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div *ngIf=\"showIf\" class=\"show-if-badge\" [ngClass]=\"{ 'rtl-direction': isRtl }\">\n    <mat-icon class=\"mat-badge-content\">\n        <pep-icon [name]=\"iconName\"></pep-icon>\n    </mat-icon>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-c1f1d66c02b4d47dbb4832bbffbe3d3c78424255524257da039a3d5345acd7705ab007972c82254109bad01fc70244b78bac34735e2c64696e8dd23bb420124b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib-tester/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { PepAddonService } from '@pepperi-addons/ngx-lib';\nimport { PepTextboxModule } from '@pepperi-addons/ngx-lib/textbox';\nimport { NgxLibHelperModule } from './common/ngx-helper.module';\nimport { PepNgxCompositeLibModule } from '@pepperi-addons/ngx-composite-lib';\nimport { PepColorSettingsModule } from '@pepperi-addons/ngx-composite-lib/color-settings';\nimport { PepShadowSettingsModule } from '@pepperi-addons/ngx-composite-lib/shadow-settings';\nimport { PepGroupButtonsSettingsModule } from '@pepperi-addons/ngx-composite-lib/group-buttons-settings';\nimport { PepFileStatusPanelModule } from '@pepperi-addons/ngx-composite-lib/file-status-panel';\nimport { PepGenericListModule } from '@pepperi-addons/ngx-composite-lib/generic-list';\nimport { PepDataViewBuilderModule } from '@pepperi-addons/ngx-composite-lib/data-view-builder';\nimport { PepIconPickerModule } from 'projects/ngx-composite-lib/icon-picker';\nimport { PepRichTextModule } from 'projects/ngx-composite-lib/rich-text';\nimport { PepShowIfBadgeModule } from 'projects/ngx-composite-lib/show-if-badge';\nimport { PepGenericFormModule } from '@pepperi-addons/ngx-composite-lib/generic-form';\nimport { ComponentsExampleComponent } from './components-example/components-example.component';\nimport { GenericListExampleComponent } from './generic-list-example/generic-list-example.component';\nimport { GenericFormExampleComponent } from './generic-form-example/generic-form-example.component';\nimport { DataViewBuilderExampleComponent } from './data-view-builder-example/data-view-builder-example.component';\n\nimport {\n    TranslateModule,\n    TranslateLoader,\n    TranslateService,\n} from '@ngx-translate/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        ComponentsExampleComponent,\n        GenericListExampleComponent,\n        GenericFormExampleComponent,\n        DataViewBuilderExampleComponent,\n    ],\n    imports: [\n        CommonModule,\n        BrowserModule,\n        BrowserAnimationsModule,\n        ReactiveFormsModule,\n        AppRoutingModule,\n        NgxLibHelperModule,\n        PepNgxCompositeLibModule,\n        PepColorSettingsModule,\n        PepTextboxModule,\n        PepShadowSettingsModule,\n        PepGroupButtonsSettingsModule,\n        PepFileStatusPanelModule,\n        PepGenericListModule,\n        PepGenericFormModule,\n        PepIconPickerModule,\n        PepRichTextModule,\n        PepShowIfBadgeModule,\n        PepDataViewBuilderModule,\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: (addonService: PepAddonService) => \n                    PepAddonService.createMultiTranslateLoader('', addonService, ['ngx-lib', 'ngx-composite-lib']),\n                deps: [PepAddonService]\n            }\n        }),\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { \n    constructor(\n        translate: TranslateService,\n        private pepAddonService: PepAddonService\n    ) {\n        this.pepAddonService.setDefaultTranslateLang(translate);\n    }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ComponentsExampleComponent"
                        },
                        {
                            "name": "DataViewBuilderExampleComponent"
                        },
                        {
                            "name": "GenericFormExampleComponent"
                        },
                        {
                            "name": "GenericListExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "NgxLibHelperModule"
                        },
                        {
                            "name": "PepColorSettingsModule"
                        },
                        {
                            "name": "PepDataViewBuilderModule"
                        },
                        {
                            "name": "PepFileStatusPanelModule"
                        },
                        {
                            "name": "PepGenericFormModule"
                        },
                        {
                            "name": "PepGenericListModule"
                        },
                        {
                            "name": "PepGroupButtonsSettingsModule"
                        },
                        {
                            "name": "PepIconPickerModule"
                        },
                        {
                            "name": "PepNgxCompositeLibModule"
                        },
                        {
                            "name": "PepRichTextModule"
                        },
                        {
                            "name": "PepShadowSettingsModule"
                        },
                        {
                            "name": "PepShowIfBadgeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-00883c377af26d0edfcedd2df7d0b4ad887a954d4c7089c649ba4b4ed249d62ff019f01ed6c708b37033c015c95d34934ba6acb98d9a5d9f41a11a1b60ca3fb3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib-tester/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ComponentsExampleComponent } from './components-example/components-example.component';\nimport { GenericListExampleComponent } from './generic-list-example/generic-list-example.component';\nimport { GenericFormExampleComponent } from './generic-form-example/generic-form-example.component';\nimport { DataViewBuilderExampleComponent } from './data-view-builder-example/data-view-builder-example.component';\n\nconst routes: Routes = [\n    {\n        path: `generic-list-example`,\n        component: GenericListExampleComponent,\n    },\n    {\n        path: `generic-form-example`,\n        component: GenericFormExampleComponent,\n    },\n    {\n        path: `data-view-builder-example`,\n        component: DataViewBuilderExampleComponent,\n    },\n    {\n        path: '**',\n        component: ComponentsExampleComponent,\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgxLibHelperModule",
            "id": "module-NgxLibHelperModule-ef6b649c4dba8d8fb5b1902c75ea2e76410864a98368f5f53e45191907c60e23c022deea6a8a3df3938afef508370067c06b029a282134d51d9bfd094e6d75aa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\n\nimport {\n    PepNgxLibModule,\n    PepAddonService,\n    PepCustomizationService,\n    PepFileService,\n} from '@pepperi-addons/ngx-lib';\nimport { PepAttachmentModule } from '@pepperi-addons/ngx-lib/attachment';\nimport { PepBreadCrumbsModule } from '@pepperi-addons/ngx-lib/bread-crumbs';\nimport { PepButtonModule } from '@pepperi-addons/ngx-lib/button';\nimport { PepCarouselModule } from '@pepperi-addons/ngx-lib/carousel';\nimport { PepCheckboxModule } from '@pepperi-addons/ngx-lib/checkbox';\nimport { PepColorModule } from '@pepperi-addons/ngx-lib/color';\nimport { PepDateModule } from '@pepperi-addons/ngx-lib/date';\nimport { PepGroupButtonsModule } from '@pepperi-addons/ngx-lib/group-buttons';\nimport { PepImageModule } from '@pepperi-addons/ngx-lib/image';\nimport { PepImagesFilmstripModule } from '@pepperi-addons/ngx-lib/images-filmstrip';\nimport { PepQuantitySelectorModule } from '@pepperi-addons/ngx-lib/quantity-selector';\nimport { PepRichHtmlTextareaModule } from '@pepperi-addons/ngx-lib/rich-html-textarea';\nimport { PepSearchModule } from '@pepperi-addons/ngx-lib/search';\nimport { PepSelectModule } from '@pepperi-addons/ngx-lib/select';\nimport { PepSliderModule } from '@pepperi-addons/ngx-lib/slider';\nimport { PepSeparatorModule } from '@pepperi-addons/ngx-lib/separator';\nimport { PepSideBarModule } from '@pepperi-addons/ngx-lib/side-bar';\nimport { PepSignatureModule } from '@pepperi-addons/ngx-lib/signature';\nimport { PepSizeDetectorModule } from '@pepperi-addons/ngx-lib/size-detector';\nimport { PepTextareaModule } from '@pepperi-addons/ngx-lib/textarea';\nimport { PepTextboxModule } from '@pepperi-addons/ngx-lib/textbox';\nimport { PepListModule } from '@pepperi-addons/ngx-lib/list';\nimport { PepMenuModule } from '@pepperi-addons/ngx-lib/menu';\nimport { PepTopBarModule } from '@pepperi-addons/ngx-lib/top-bar';\nimport { PepPageLayoutModule } from '@pepperi-addons/ngx-lib/page-layout';\n\nimport { PepFormModule } from '@pepperi-addons/ngx-lib/form';\n\nimport { PepSmartFiltersModule } from '@pepperi-addons/ngx-lib/smart-filters';\n\nimport {\n    PepIconModule,\n    PepIconRegistry,\n    pepIconSystemBolt,\n    pepIconNoImage,\n    pepIconNoImage2,\n    pepIconArrowTwoWaysVerT,\n    pepIconArrowDown,\n    pepIconArrowUp,\n    pepIconArrowRightAlt,\n    pepIconArrowLeftAlt,\n    pepIconArrowDownAlt,\n    pepIconArrowUpAlt,\n    pepIconNumberNumber,\n    pepIconNumberPlus,\n    pepIconSystemBin,\n    pepIconSystemEdit,\n    pepIconSystemClose,\n    pepIconSystemFilter,\n    pepIconSystemMenu,\n    pepIconSystemHome,\n    pepIconSystemSettings,\n    pepIconSystemQuestion,\n    pepIconSystemAvatar,\n    pepIconSystemDoor,\n    pepIconSystemPrint,\n    pepIconSystemSearch,\n    pepIconSystemSpinner,\n    pepIconSystemInfo,\n    pepIconShoppingCart,\n    pepIconTimeCal,\n    pepIconViewCardLg,\n    pepIconViewCardMd,\n    pepIconViewCardSm,\n    pepIconViewTable,\n    pepIconViewMatrix,\n    pepIconViewLine,\n} from '@pepperi-addons/ngx-lib/icon';\nconst pepIcons = [\n    pepIconSystemBolt,\n    pepIconNoImage,\n    pepIconNoImage2,\n    pepIconArrowTwoWaysVerT,\n    pepIconArrowDown,\n    pepIconArrowUp,\n    pepIconArrowRightAlt,\n    pepIconArrowLeftAlt,\n    pepIconArrowDownAlt,\n    pepIconArrowUpAlt,\n    pepIconNumberNumber,\n    pepIconNumberPlus,\n    pepIconSystemBin,\n    pepIconSystemEdit,\n    pepIconSystemClose,\n    pepIconSystemFilter,\n    pepIconSystemMenu,\n    pepIconSystemHome,\n    pepIconSystemSettings,\n    pepIconSystemQuestion,\n    pepIconSystemAvatar,\n    pepIconSystemDoor,\n    pepIconSystemPrint,\n    pepIconSystemSearch,\n    pepIconSystemSpinner,\n    pepIconSystemInfo,\n    pepIconShoppingCart,\n    pepIconTimeCal,\n    pepIconViewCardLg,\n    pepIconViewCardMd,\n    pepIconViewCardSm,\n    pepIconViewTable,\n    pepIconViewMatrix,\n    pepIconViewLine,\n];\n\nconst pepperiComponentsModules = [\n    PepAttachmentModule,\n    PepCarouselModule,\n    PepBreadCrumbsModule,\n    PepButtonModule,\n    PepCheckboxModule,\n    PepColorModule,\n    PepDateModule,\n    PepGroupButtonsModule,\n    PepImageModule,\n    PepImagesFilmstripModule,\n    PepListModule,\n    PepCheckboxModule,\n    PepQuantitySelectorModule,\n    PepRichHtmlTextareaModule,\n    PepSearchModule,\n    PepSelectModule,\n    PepSeparatorModule,\n    PepSliderModule,\n    PepSideBarModule,\n    PepSignatureModule,\n    PepSizeDetectorModule,\n    PepTextareaModule,\n    PepTextboxModule,\n    PepIconModule,\n    PepMenuModule,\n    PepTopBarModule,\n    PepPageLayoutModule,\n    PepSmartFiltersModule,\n    PepFormModule\n];\n\n@NgModule({\n    declarations: [],\n    imports: [\n        CommonModule,\n        PepNgxLibModule,\n        pepperiComponentsModules,\n    ],\n    exports: [PepNgxLibModule, pepperiComponentsModules],\n})\nexport class NgxLibHelperModule {\n    constructor(\n        private pepperiIconRegistry: PepIconRegistry,\n    ) {\n        this.pepperiIconRegistry.registerIcons(pepIcons);\n    }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepColorSettingsModule",
            "id": "module-PepColorSettingsModule-83aad0eb095d7a890f7cdbea13430560f79cd6c391ded69c44248a3020427a4c31654d7d620184c2358bacd61433261c4bf6192205f890b370e5ff40f3a6edc4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/color-settings/color-settings.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\nimport { PepColorModule } from '@pepperi-addons/ngx-lib/color';\nimport { PepCheckboxModule } from '@pepperi-addons/ngx-lib/checkbox';\nimport { PepSliderModule } from '@pepperi-addons/ngx-lib/slider';\n\nimport { ColorSettingsComponent } from './color-settings.component';\n\n@NgModule({\n    declarations: [\n        ColorSettingsComponent\n    ],\n    imports: [\n        CommonModule,\n        PepNgxLibModule,\n        PepCheckboxModule,\n        PepColorModule,\n        PepSliderModule\n    ],\n    exports: [ColorSettingsComponent],\n})\nexport class PepColorSettingsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ColorSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ColorSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepDataViewBuilderModule",
            "id": "module-PepDataViewBuilderModule-6fc62a2e916d955d3b60510f6b2fe1ec80982a9911f6dc081618f43f1d3d8655c88c58ce0dd53beb590233819452141fb8570c0c0e8f8927185c684de1f5a12c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/data-view-builder/data-view-builder.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\nimport { PepButtonModule } from '@pepperi-addons/ngx-lib/button';\nimport { PepDialogModule } from '@pepperi-addons/ngx-lib/dialog';\nimport { PepMenuModule } from '@pepperi-addons/ngx-lib/menu';\nimport { PepPageLayoutModule } from '@pepperi-addons/ngx-lib/page-layout';\nimport { PepTextboxModule } from '@pepperi-addons/ngx-lib/textbox';\nimport { PepTopBarModule } from '@pepperi-addons/ngx-lib/top-bar';\nimport { PepDraggableItemsModule } from '@pepperi-addons/ngx-lib/draggable-items';\nimport { PepIconRegistry, PepIconModule, pepIconSystemClose, pepIconArrowDownAlt, pepIconSystemBin, pepIconNumberPlus } from '@pepperi-addons/ngx-lib/icon';\n\nimport { DataViewBuilderService } from './data-view-builder.service';\n\nimport { DataViewBuilderComponent } from './data-view-builder.component';\nimport { MenuDataViewComponent } from './menu-data-view/menu-data-view.component';\n\nconst pepIcons = [\n    pepIconSystemClose,\n    pepIconArrowDownAlt,\n    pepIconSystemBin,\n    pepIconNumberPlus\n];\n\n@NgModule({\n    declarations: [\n        DataViewBuilderComponent, MenuDataViewComponent\n    ],\n    imports: [\n        CommonModule,\n        DragDropModule,\n        MatIconModule,\n        PepNgxLibModule,\n        PepButtonModule,\n        PepDialogModule,\n        PepIconModule,\n        PepMenuModule,\n        PepPageLayoutModule,\n        PepTextboxModule,\n        PepTopBarModule,\n        PepDraggableItemsModule,\n    ],\n    exports: [DataViewBuilderComponent],\n    providers: [DataViewBuilderService]\n})\nexport class PepDataViewBuilderModule {\n    constructor(\n        private pepIconRegistry: PepIconRegistry,\n    ) {\n        this.pepIconRegistry.registerIcons(pepIcons);\n    }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DataViewBuilderService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DataViewBuilderComponent"
                        },
                        {
                            "name": "MenuDataViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DataViewBuilderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepFileStatusPanelModule",
            "id": "module-PepFileStatusPanelModule-36119821e5fb737fd61cd8201a539d2c430b6111f4a992a6f4ab7b1bb1473aa23996fee1482787e9c88b529633659080dffa1cd8c6829839f3b17682ca3a66fa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FileStatusPanelComponent } from './file-status-panel.component';\nimport { PepTextboxModule } from '@pepperi-addons/ngx-lib/textbox';\nimport { PepTopBarModule } from '@pepperi-addons/ngx-lib/top-bar';\nimport { PepDialogModule } from '@pepperi-addons/ngx-lib/dialog';\nimport { PepButtonModule } from '@pepperi-addons/ngx-lib/button';\nimport { PepIconModule, PepIconRegistry, pepIconArrowRightAlt } from '@pepperi-addons/ngx-lib/icon';\nimport { PepSnackBarModule } from '@pepperi-addons/ngx-lib/snack-bar';\n\nconst pepIcons = [\n    pepIconArrowRightAlt,\n]\n\n@NgModule({\n    declarations: [\n        FileStatusPanelComponent\n    ],\n    imports: [\n        CommonModule,\n        PepTopBarModule,\n        PepTextboxModule,\n        PepButtonModule,\n        PepIconModule,\n        PepDialogModule,\n        PepSnackBarModule\n    ],\n    exports: [FileStatusPanelComponent]\n})\n\nexport class PepFileStatusPanelModule { \n    constructor(\n        private pepIconRegistry: PepIconRegistry,\n    ) {\n        this.pepIconRegistry.registerIcons(pepIcons);\n    }\n}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FileStatusPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FileStatusPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepFlowPickerButtonModule",
            "id": "module-PepFlowPickerButtonModule-91f949d04ecb4cdcf6afbdbf5f94ada64e125982c6e082aaadbeddffb2c8aae8e0bf6ec00eeb6b7706765c713825b53df801d182a6280705b7e4181b6435bd36",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/flow-picker-button/flow-picker-button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\nimport { PepButtonModule } from '@pepperi-addons/ngx-lib/button';\nimport { PepRemoteLoaderModule } from '@pepperi-addons/ngx-lib/remote-loader';\n\nimport { FlowPickerButtonComponent } from './flow-picker-button.component';\nimport { FlowPickerService } from './flow-picker-button.service';\n\n@NgModule({\n    declarations: [\n        FlowPickerButtonComponent\n    ],\n    imports: [\n        CommonModule,\n        PepNgxLibModule,\n        PepButtonModule,\n        PepRemoteLoaderModule\n    ],\n    providers: [FlowPickerService],\n    exports: [FlowPickerButtonComponent],\n})\nexport class PepFlowPickerButtonModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FlowPickerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FlowPickerButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FlowPickerButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepGenericFormModule",
            "id": "module-PepGenericFormModule-beaf009f921c5d2a72fa28951a14d8b10f815a520f03ea3c6c1bb15b07b1a9d5c0a948235f366d5e94d7b5003ddc6a0be8cf83546fab0fc63238b98ed9cbb185",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/generic-form/generic-form.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n//import { MatFormFieldModule } from '@angular/material/form-field';\n//import { MaterialModule } from '@pepperi-addons/ngx-lib/';\n//import { ReactiveFormsModule } from '@angular/forms';\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\nimport { PepFormModule } from '@pepperi-addons/ngx-lib/form';\nimport { PepMenuModule } from '@pepperi-addons/ngx-lib/menu';\nimport { PepPageLayoutModule } from '@pepperi-addons/ngx-lib/page-layout';\nimport { PepTopBarModule } from '@pepperi-addons/ngx-lib/top-bar';\n//import { PepTextboxModule } from '@pepperi-addons/ngx-lib/textbox';\n//import { PepDateModule } from '@pepperi-addons/ngx-lib/date';\n\nimport { PepGenericFormService } from './generic-form.service';\n\nimport { GenericFormComponent } from './generic-form.component';\n\n@NgModule({\n    declarations: [\n        GenericFormComponent\n    ],\n    imports: [\n        CommonModule, \n\n       // MatFormFieldModule,\n     //   ReactiveFormsModule,\n\n        PepNgxLibModule,\n       // PepListModule,\n        PepFormModule,\n        PepMenuModule,\n        PepPageLayoutModule,\n        PepTopBarModule,\n     //   PepTextboxModule,\n      //  PepDateModule\n     //   PepSearchModule,\n      //  PepBreadCrumbsModule\n    ],\n    exports: [\n        GenericFormComponent\n    ],\n    providers: [\n        PepGenericFormService\n    ]\n})\nexport class PepGenericFormModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "PepGenericFormService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GenericFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GenericFormComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepGenericListModule",
            "id": "module-PepGenericListModule-ffa41701411cca39bc95dc6055d00fb1814146d43e6bf6a52e8ca194918d9863a2737449c295f60f8ca863ed5ecae254df989634e270863bd9dc9d57a5024884",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/generic-list/generic-list.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, APP_INITIALIZER } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TranslateService } from '@ngx-translate/core';\nimport { GenericListComponent } from './generic-list.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\nimport { PepListModule } from '@pepperi-addons/ngx-lib/list';\nimport { PepFormModule } from '@pepperi-addons/ngx-lib/form';\nimport { PepMenuModule } from '@pepperi-addons/ngx-lib/menu';\nimport { PepPageLayoutModule } from '@pepperi-addons/ngx-lib/page-layout';\nimport { PepTopBarModule } from '@pepperi-addons/ngx-lib/top-bar';\nimport { PepSideBarModule } from '@pepperi-addons/ngx-lib/side-bar';\nimport { PepSearchModule } from '@pepperi-addons/ngx-lib/search';\nimport { PepBreadCrumbsModule } from '@pepperi-addons/ngx-lib/bread-crumbs';\nimport { PepSmartFiltersModule } from '@pepperi-addons/ngx-lib/smart-filters';\nimport { PepIconModule, PepIconRegistry, pepIconLeafRound, pepIconLeafSkiny, pepIconSystemView } from '@pepperi-addons/ngx-lib/icon';\nimport { PepGenericListService } from './generic-list.service';\nimport { firstValueFrom } from 'rxjs';\n\nconst pepIcons = [\n    pepIconLeafRound,\n    pepIconLeafSkiny, pepIconSystemView\n]\n\n/*\nexport function appInitializerFactory(translate: TranslateService) {\n    return () => {\n        translate.setDefaultLang('en');\n        return firstValueFrom(translate.use('en'));\n    }\n}*/\n\n@NgModule({\n    declarations: [\n        GenericListComponent\n    ],\n    imports: [\n        CommonModule,\n        PepNgxLibModule,\n        MatIconModule,\n        PepListModule,\n        PepFormModule,\n        PepMenuModule,\n        PepPageLayoutModule,\n        PepTopBarModule,\n        PepSideBarModule,\n        PepSearchModule,\n        PepBreadCrumbsModule,\n        PepIconModule,\n        PepSmartFiltersModule\n    ],\n    exports: [\n        GenericListComponent        \n    ],\n    providers: [\n        PepGenericListService,\n        /*{\n            provide: APP_INITIALIZER,\n            useFactory: appInitializerFactory,\n            deps: [TranslateService],\n            multi: true\n        } */\n    ]\n})\nexport class PepGenericListModule { \n    constructor(\n        private pepIconRegistry: PepIconRegistry\n    ) {\n        this.pepIconRegistry.registerIcons(pepIcons);\n    }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "PepGenericListService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GenericListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GenericListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepGroupButtonsSettingsModule",
            "id": "module-PepGroupButtonsSettingsModule-33d4e823e0b6bdbd39f150d4b70dbec78d9fd1aa2fccc910459139830855c85e0c83ceb51dfc2e894fb59d339950300803dbc511fbb60cb65321e758605cdc7f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GroupButtonsSettingsComponent } from './group-buttons-settings.component';\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\nimport { PepFieldTitleModule } from '@pepperi-addons/ngx-lib/field-title';\nimport { PepGroupButtonsModule } from '@pepperi-addons/ngx-lib/group-buttons';\nimport { pepIconArrowLeftAlt, pepIconArrowRightAlt, PepIconModule, PepIconRegistry, pepIconTextAlignCenter, pepIconTextAlignLeft, pepIconTextAlignRight } from '@pepperi-addons/ngx-lib/icon';\n\nconst pepIcons = [\n    pepIconTextAlignCenter, \n    pepIconTextAlignLeft, \n    pepIconTextAlignRight,\n    pepIconArrowRightAlt,\n    pepIconArrowLeftAlt\n]\n\n@NgModule({\n    declarations: [\n        GroupButtonsSettingsComponent\n    ],\n    imports: [\n        CommonModule,\n        PepNgxLibModule,\n        PepFieldTitleModule,\n        PepGroupButtonsModule,\n        PepIconModule\n    ],\n    exports: [GroupButtonsSettingsComponent]\n})\nexport class PepGroupButtonsSettingsModule { \n    constructor(\n        private pepIconRegistry: PepIconRegistry,\n    ) {\n        this.pepIconRegistry.registerIcons(pepIcons);\n    }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GroupButtonsSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GroupButtonsSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepIconPickerModule",
            "id": "module-PepIconPickerModule-3e8c0a52cbd883757d56af7f4e69acf7006078964faae48f1f5d9262ed5f4222b0022d3a1dca86f9b85ea8139537250f46d5d0d07092ab865247348d0165037c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/icon-picker/icon-picker.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\nimport { PepButtonModule } from '@pepperi-addons/ngx-lib/button';\nimport { PepFieldTitleModule } from '@pepperi-addons/ngx-lib/field-title';\nimport { PepRemoteLoaderModule } from '@pepperi-addons/ngx-lib/remote-loader';\nimport { PepCheckboxModule } from '@pepperi-addons/ngx-lib/checkbox';\nimport { IconPickerComponent } from './icon-picker.component';\nimport { FlowPickerService } from './icon-picker.service';\n\n@NgModule({\n    declarations: [\n        IconPickerComponent\n    ],\n    imports: [\n        CommonModule,\n        PepNgxLibModule,\n        PepButtonModule,\n        PepFieldTitleModule,\n        PepCheckboxModule,\n        PepRemoteLoaderModule\n    ],\n    providers: [FlowPickerService],\n    exports: [IconPickerComponent],\n})\nexport class PepIconPickerModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FlowPickerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IconPickerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IconPickerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepManageParametersModule",
            "id": "module-PepManageParametersModule-1235ac66982238da5b2ae62eab1de2b25cb6e7da925eb091a34efcc5564c9075b5a5ac81bbc9865ede486cc5c9c298440bd8d02b5dcb8e89ae3999d25e0518ec",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\nimport { ManageParametersComponent } from './manage-parameters.component';\nimport { ManageParameterComponent } from './manage-parameter/manage-parameter.component';\nimport { PepDialogModule } from '@pepperi-addons/ngx-lib/dialog';\nimport { PepGenericListModule } from '@pepperi-addons/ngx-composite-lib/generic-list';\nimport { PepGenericFormModule } from '@pepperi-addons/ngx-composite-lib/generic-form';\nimport { PepButtonModule } from '@pepperi-addons/ngx-lib/button';\nimport { ManageParametersService } from './manage-parameters.service';\n\n@NgModule({\n    declarations: [\n        ManageParametersComponent, ManageParameterComponent\n    ],\n    imports: [\n        CommonModule,\n        PepNgxLibModule,\n        PepDialogModule,\n        PepButtonModule,\n        PepGenericListModule,\n        PepGenericFormModule\n    ],\n    providers: [ManageParametersService],\n    exports: [ManageParametersComponent],\n})\nexport class PepManageParametersModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ManageParametersService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ManageParameterComponent"
                        },
                        {
                            "name": "ManageParametersComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepGenericFormModule"
                        },
                        {
                            "name": "PepGenericListModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ManageParametersComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepNgxCompositeLibModule",
            "id": "module-PepNgxCompositeLibModule-a368cdf5c30d73e7c69551d1650d5c982ca2a66e244ae4ed0ddd544bbe576e8d161f4887dea07c411fa09b02df1d04096e71fb908eb444e9344baa509bf2bc0f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/src/ngx-composite-lib.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n//import { TranslateModule } from '@ngx-translate/core';\n// import { HttpClientModule } from '@angular/common/http';\n// import { ReactiveFormsModule } from '@angular/forms';\nimport { PepResetConfigurationFieldDirective } from './core/common/directives/reset-configuration-field.directive';\nimport { PepDIMXHelperService, PepCompositeLibUtilitiesService } from './core/common/services/index';\n\nimport { PepRemoteLoaderModule } from '@pepperi-addons/ngx-lib/remote-loader';\n\nimport {\n    PepIconModule,\n    PepIconRegistry,\n    pepIconDeviceResponsive,\n} from '@pepperi-addons/ngx-lib/icon';\n\nconst utilitiesList = [\n    PepResetConfigurationFieldDirective\n];\n\n@NgModule({\n    declarations: [\n        utilitiesList\n    ],\n    imports: [\n        CommonModule,\n        PepIconModule,\n        PepRemoteLoaderModule,\n    ],\n    exports: [\n        utilitiesList\n        //TranslateModule\n    ],\n    providers: [\n        PepDIMXHelperService,\n        PepCompositeLibUtilitiesService\n    ]\n})\nexport class PepNgxCompositeLibModule {\n    constructor(\n        private pepIconRegistry: PepIconRegistry\n    ) {\n        this.pepIconRegistry.registerIcons([\n            pepIconDeviceResponsive\n        ]);\n    }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "PepCompositeLibUtilitiesService"
                        },
                        {
                            "name": "PepDIMXHelperService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepResetConfigurationFieldDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepResetConfigurationFieldDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepRichTextModule",
            "id": "module-PepRichTextModule-97014fe46f59d2b3fab62dd436c3aa9b8ffcd76b90f9a7d034b04ded5012ed400813e8e3f4940b7cbde718291be2961ca8a984f7f161f1d8c4c79b5ed7d39690",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/rich-text/rich-text.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\nimport { PepRichHtmlTextareaModule } from '@pepperi-addons/ngx-lib/rich-html-textarea';\nimport { PepRemoteLoaderModule } from '@pepperi-addons/ngx-lib/remote-loader';\nimport { PepButtonModule } from '@pepperi-addons/ngx-lib/button';\nimport { RichTextComponent } from './rich-text.component';\nimport { RichTextService } from './rich-text.service';\nimport { \n    PepIconModule,\n    PepIconRegistry,\n    pepIconSystemImage\n} from '@pepperi-addons/ngx-lib/icon';\n\nconst pepIcons = [\n    pepIconSystemImage\n];\n\n@NgModule({\n    declarations: [\n        RichTextComponent\n    ],\n    imports: [\n        CommonModule,\n        PepNgxLibModule,\n        PepIconModule,\n        PepButtonModule,\n        PepRichHtmlTextareaModule,\n        PepRemoteLoaderModule\n    ],\n    providers: [RichTextService],\n    exports: [RichTextComponent],\n})\nexport class PepRichTextModule {\n    constructor(private pepIconRegistry: PepIconRegistry) {\n        this.pepIconRegistry.registerIcons(pepIcons);\n    }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "RichTextService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RichTextComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RichTextComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepShadowSettingsModule",
            "id": "module-PepShadowSettingsModule-a1b44c4dc1f4dab0ef6c9268df5edef976021ecf5d5f68aba664bd4bb0aa0f37389a8b9d880605abe3824b3d1086a657160b2b58670c59a8bd973c7f2c0c8c42",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ShadowSettingsComponent } from './shadow-settings.component';\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\nimport { PepCheckboxModule } from '@pepperi-addons/ngx-lib/checkbox';\nimport { PepFieldTitleModule } from '@pepperi-addons/ngx-lib/field-title';\nimport { PepGroupButtonsModule } from '@pepperi-addons/ngx-lib/group-buttons';\nimport { PepSliderModule } from '@pepperi-addons/ngx-lib/slider';\n\n@NgModule({\n    declarations: [\n        ShadowSettingsComponent\n    ],\n    imports: [\n        CommonModule,\n        PepNgxLibModule,\n        PepCheckboxModule,\n        PepFieldTitleModule,\n        PepGroupButtonsModule,\n        PepSliderModule\n    ],\n    exports: [ShadowSettingsComponent],\n})\nexport class PepShadowSettingsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ShadowSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ShadowSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepShowIfBadgeModule",
            "id": "module-PepShowIfBadgeModule-92c00dc1805b25c9fec1e7eb3cd3068e4434452a3dc428239da743d1efa230b9fc87f41a14dcebb55b329b30e67c743c440877d7af8fd5db5ac21600735ef72a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/show-if-badge/show-if-badge.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PepNgxLibModule, PepAddonService } from '@pepperi-addons/ngx-lib';\nimport { PepIconModule, PepIconRegistry, pepIconSystemView} from '@pepperi-addons/ngx-lib/icon';\n\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatBadgeModule } from '@angular/material/badge';\n\nimport { ShowIfBadgeComponent } from './show-if-badge.component';\n\nconst pepIcons = [\n    pepIconSystemView\n];\n\n@NgModule({\n    declarations: [\n        ShowIfBadgeComponent\n    ],\n    imports: [\n        CommonModule,\n        PepNgxLibModule,\n        PepIconModule,\n        MatIconModule,\n        MatBadgeModule,\n        TranslateModule.forChild(),\n    ],\n    exports: [ShowIfBadgeComponent]\n})\nexport class PepShowIfBadgeModule { \n\nconstructor(\n    private pepIconRegistry: PepIconRegistry\n    ) {\n        this.pepIconRegistry.registerIcons(pepIcons);\n    }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ShowIfBadgeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ShowIfBadgeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-form/generic-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "breadCrumbsItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    production: false\n}"
            },
            {
                "name": "FakeCardsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    {\r\n        UUID: '00000000-0000-0000-0000-000000abcdef',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/8/32944058_1.jpg?ft=1',\r\n        UnitPrice: '34.0000',\r\n        ObjectMenu: '',\r\n        TotalUnitsPriceAfterDiscount: '31.0000',\r\n        UnitsQuantity: '1.0000',\r\n        ItemExternalID: 'ABC1234'\r\n    },\r\n    {\r\n        UUID: '1624db9d-3c6f-4814-a92f-ac45a991df74',\r\n        ItemImage: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/6/32944056_1.jpg?ft=1',\r\n        UnitPrice: '55.0000',\r\n        ObjectMenu: '',\r\n        TotalUnitsPriceAfterDiscount: '40.0000',\r\n        UnitsQuantity: '1.0000',\r\n        ItemExternalID: 'DDD4444'\r\n    },\r\n    {\r\n        UUID: '00000000-0000-0000-0000-000000abcdef',\r\n        ItemImage: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        UnitPrice: '23.0000',\r\n        ObjectMenu: '',\r\n        TotalUnitsPriceAfterDiscount: '18.0000',\r\n        UnitsQuantity: '1.0000',\r\n        ItemExternalID: 'FER321'\r\n    },\r\n    {\r\n        UUID: '00000000-0000-0000-0000-000000abcdef',\r\n        ItemImage: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        UnitPrice: '60.0000',\r\n        ObjectMenu: '',\r\n        TotalUnitsPriceAfterDiscount: '60.0000',\r\n        UnitsQuantity: '1.0000',\r\n        ItemExternalID: 'POR444'\r\n    }\r\n]"
            },
            {
                "name": "FakeCardsDataView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    {\r\n        \"FieldID\": \"Image\",\r\n        \"Type\": \"Image\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 0,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 3,\r\n                \"Height\": 3\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"UnitPrice\",\r\n        \"Type\": \"Currency\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 3,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 6,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ObjectMenu\",\r\n        \"Type\": \"InternalLink\",\r\n        \"Title\": \"Menu\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": false,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 9,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 1,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"TotalUnitsPriceAfterDiscount\",\r\n        \"Type\": \"Currency\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 3,\r\n                \"Y\": 1\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 7,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"UnitsQuantity\",\r\n        \"Type\": \"NumberReal\",\r\n        \"Title\": \"Unit Quantity\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": false,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 3,\r\n                \"Y\": 2\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 7,\r\n                \"Height\": 2\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemExternalID\",\r\n        \"Type\": \"TextBox\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 0,\r\n                \"Y\": 3\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 3,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    }\r\n]"
            },
            {
                "name": "FakeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\n    GeneralInformation: 'Rich Text Example',\n    //  ItemExternalID: 'Abcd',\n    ActionDateTime: '2021-11-22T09:26:02Z',\n    WrntyID: '272764514',\n    TSATsaTextTest: 'Some text',\n    DeliveryDate: '2021-11-22',\n    AccountInformation: '',\n    BranchDbId: '1',\n    BillToName: 'AD',\n    ShipToName: 'Someone',\n    ButtunTest: 'Yar',\n    /*BillToAddress: {\n        Value: 'Israel',\n        GroupFields: [\n            {\n                ShipToCountryIso: {\n                    Value: 'IL',\n                    OptionalValues: [{ Key: \"AD\", Value: \"Andorra\" }, { Key: \"IL\", Value: \"UIsrael\" }],\n                }\n            },\n            { ShipToStateIso: '' },\n            { ShipToCity: '' },\n            { ShipToStreet: '' },\n            { ShipToZipCode: '' }\n\n        ]\n    }, \n\n    ItemName: {\n        Value: 'abc',\n        OptionalValues: [{ Key: 'a', Value: 1 }, { Key: 'b', Value: 2 }]\n    }, */\n    UnitsQuantity: 10000,\n    TotalUnitsPriceAfterDiscount: 20000,\n    TSASetPriceForHardContract: 'high price',\n    TSALabels: null,\n    TSALabelQty: 0,\n    TSALabelCode: '',\n    TSABagsQty: 4,\n    TSAAmountPerBag: 999,\n    TSABagPrevValue: 7,\n    ItemTSAPackAllIn1Bag: 'all-pack'\n\n}"
            },
            {
                "name": "FakeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    Addons: [\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '2e51566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d152',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '31f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd701',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: 'ba0adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '1c24db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '2251566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '33f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '44fb64d8-2b2c-4dec-8563-ac9fa98cd701',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '50adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '6c24db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '7e51566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d154',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '81f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '94fb64d8-2b2c-4dec-8563-ac9fa98cd701',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '100adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '1124db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '1251566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '13f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd731',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '150adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '1624db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        }\r\n    ],\r\n}"
            },
            {
                "name": "FakeDataOld",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ObjectsDataRowCell[]",
                "defaultValue": "[\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"GeneralInformation\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 13,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '2',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true,\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"ExternalID\",\n        BackgroundColor: \"\",\n        Enabled: false,\n        FieldType: 1,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true,\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"ActionDateTime\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 6,\n        FormattedValue: \"11/22/2021 11:26 AM\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '607483216',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"2021-11-22T09:26:02Z\",\n        Visible: true,\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"WrntyID\",\n        BackgroundColor: \"\",\n        Enabled: false,\n        FieldType: 2,\n        FormattedValue: \"272764514\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '607492672',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"272764514\",\n        Visible: true,\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"TSATsaTextTest\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 1,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '1610126992',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true,\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"DeliveryDate\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 5,\n        FormattedValue: \"11/22/2021\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"2021-11-22\",\n        Visible: true,\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"AccountInformation\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 13,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '607499200',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true,\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"BranchDbId\",\n        BackgroundColor: \"\",\n        Enabled: false,\n        FieldType: 16,\n        FormattedValue: \"12234566686869\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '-1',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"1\",\n        Visible: true,\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"BillToName\",\n        BackgroundColor: \"\",\n        Enabled: false,\n        FieldType: 1,\n        FormattedValue: \"12234566686869\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '-1',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"12234566686869\",\n        Visible: true,\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"ShipToName\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 1,\n        FormattedValue: \"12234566686869\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '-1',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"12234566686869\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"BillToAddress\",\n        BackgroundColor: \"\",\n        Enabled: false,\n        FieldType: 14,\n        FormattedValue: \"Israel\",\n        GroupFields: [\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"BillToCountryIso\",\n                BackgroundColor: \"\",\n                Enabled: true,\n                FieldType: 16,\n                FormattedValue: \"Israel\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [{ Key: \"AD\", Value: \"Andorra\" }, { Key: \"IL\", Value: \"Israel\" }],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '1505137882',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"IL\",\n                Visible: true,\n            },\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"BillToStateIso\",\n                BackgroundColor: \"\",\n                Enabled: false,\n                FieldType: 16,\n                FormattedValue: \"\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '1585223436',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"\",\n                Visible: true,\n            },\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"BillToCity\",\n                BackgroundColor: \"\",\n                Enabled: true,\n                FieldType: 1,\n                FormattedValue: \"\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '607497088',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"\",\n                Visible: true\n            },\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"BillToStreet\",\n                BackgroundColor: \"\",\n                Enabled: true,\n                FieldType: 1,\n                FormattedValue: \"\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '0',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"\",\n                Visible: true,\n            },\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"BillToZipCode\",\n                BackgroundColor: \"\",\n                Enabled: true,\n                FieldType: 1,\n                FormattedValue: \"\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '1525717912',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"\",\n                Visible: true\n            }\n        ],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"Israel\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"ShipToAddress\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 14,\n        FormattedValue: \"Israel\",\n        GroupFields: [\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"ShipToCountryIso\",\n                BackgroundColor: \"\",\n                Enabled: true,\n                FieldType: 16,\n                FormattedValue: \"Israel\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [{ Key: \"AD\", Value: \"Andorra\" }, { Key: \"IL\", Value: \"UIsrael\" }],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '-1',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"IL\",\n                Visible: true\n            },\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"ShipToStateIso\",\n                BackgroundColor: \"\",\n                Enabled: false,\n                FieldType: 16,\n                FormattedValue: \"\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '0',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"\",\n                Visible: true\n            },\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"ShipToCity\",\n                BackgroundColor: \"\",\n                Enabled: true,\n                FieldType: 1,\n                FormattedValue: \"\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '0',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"\",\n                Visible: true\n            },\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"ShipToStreet\",\n                BackgroundColor: \"\",\n                Enabled: true,\n                FieldType: 1,\n                FormattedValue: \"\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '0',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"\",\n                Visible: true\n            },\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"ShipToZipCode\",\n                BackgroundColor: \"\",\n                Enabled: true,\n                FieldType: 1,\n                FormattedValue: \"\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '1530042974',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"\",\n                Visible: true\n            }\n        ],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '-1',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"Israel\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"BillToPhone\",\n        BackgroundColor: \"\",\n        Enabled: false,\n        FieldType: 1,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"ShipToPhone\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 1,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"OrderInformation\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 13,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"TSAImage1\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 20,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"TSAmulti\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 12,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [{ Key: \"ACV\", Value: \"ACV\" }, { Key: \"123\", Value: \"123\" }, { Key: \"DFGH\", Value: \"DFGH\" }],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"TSADropdown\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 11,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [{ Key: \"1\", Value: \"1\" }, { Key: \"23\", Value: \"23\" }, { Key: \"4\", Value: \"4\" }, { Key: \"5\", Value: \"5\" }],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"AccountTSAAccountDropdown\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 11,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [{ Key: \"A\", Value: \"A\" }, { Key: \"B\", Value: \"B\" }, { Key: \"C\", Value: \"C\" }, { Key: \"D\", Value: \"D\" }],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"TSACalculatedNumberbilltocountry\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 7,\n        FormattedValue: \"1\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"1\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"TSAUDTTEST\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 3,\n        FormattedValue: \"{\\\"success\\\":true}\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"{\\\"success\\\":true}\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"TSAUDTtesttest\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 1,\n        FormattedValue: \"Jfnfhdhdhfhfhfhfhf\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"Jfnfhdhdhfhfhfhfhf\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"Signature\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 25,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '2',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"TSAsignaturetest\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 25,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true\n    }\n]"
            },
            {
                "name": "FakeDataViewFields",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[\n    {\n        FieldID: 'GeneralInformation',\n        Type: 'RichTextHTML',\n        Title: 'General Information',\n        Mandatory: false,\n        ReadOnly: false,\n        Layout: {\n            Origin: {\n                X: 0,\n                Y: 0\n            },\n            Size: {\n                Width: 2,\n                Height: 0\n            }\n        },\n        Style: {\n            Alignment: {\n                Horizontal: 'Stretch',\n                Vertical: 'Stretch'\n            }\n        },\n        AdditionalProps: {\n            renderTitle: false,\n            renderEnlargeButton: false\n        }\n    },\n    {\n        FieldID: 'GeneralInformationTwo',\n        Type: 'TextHeader',\n        Title: 'Description',\n        Mandatory: false,\n        ReadOnly: false,\n        Layout: {\n            Origin: {\n                X: 0,\n                Y: 1\n            },\n            Size: {\n                Width: 2,\n                Height: 0\n            }\n        },\n        Style: {\n            Alignment: {\n                Horizontal: 'Stretch',\n                Vertical: 'Stretch'\n            }\n        }\n    },\n    {\n        FieldID: 'WrntyID',\n        Type: 'LimitedLengthTextBox',\n        Title: 'ID',\n        Mandatory: false,\n        ReadOnly: true,\n        Layout: {\n            Origin: {\n                X: 0,\n                Y: 2\n            },\n            Size: {\n                Width: 1,\n                Height: 0\n            }\n        },\n        Style: {\n            Alignment: {\n                Horizontal: 'Stretch',\n                Vertical: 'Stretch'\n            }\n        }\n    },\n    {\n        FieldID: 'TSATsaTextTest',\n        Type: 'TextBox',\n        Title: 'TSA Tsa Text Test',\n        Mandatory: true,\n        ReadOnly: false,\n        Layout: {\n            Origin: {\n                X: 1,\n                Y: 2\n            },\n            Size: {\n                Width: 1,\n                Height: 0\n            }\n        },\n        Style: {\n            Alignment: {\n                Horizontal: 'Stretch',\n                Vertical: 'Stretch'\n            }\n        }\n    },\n    {\n        FieldID: 'ButtunTest',\n        Type: 'Button',\n        Title: 'TSA Tsa Btn Test',\n        Mandatory: true,\n        ReadOnly: false,\n        Layout: {\n            Origin: {\n                X: 0,\n                Y: 3\n            },\n            Size: {\n                Width: 2,\n                Height: 0\n            }\n        },\n        Style: {\n            Alignment: {\n                Horizontal: 'Stretch',\n                Vertical: 'Stretch'\n            }\n        },\n        \n    }\n]"
            },
            {
                "name": "FakeLineData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    {   \r\n        UUID: '00000000-0000-0000-0000-000000abcdef',\r\n        ItemHasActiveCampaign: '1',\r\n        ItemIndicatorsWithoutCampaign: '',\r\n        ItemExternalID: 'FER321',\r\n        ObjectMenu: '',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        ItemParentCode: '',\r\n        ItemDimension1Name: 'Kuko',\r\n        UnitsQuantity: '1.0000'\r\n    },\r\n    {   \r\n        UUID: '00000000-0000-0000-0000-000000abcdee',\r\n        ItemHasActiveCampaign: '1',\r\n        ItemIndicatorsWithoutCampaign: '',\r\n        ItemExternalID: 'FER333',\r\n        ObjectMenu: '',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        ItemParentCode: '',\r\n        ItemDimension1Name: 'Kuko',\r\n        UnitsQuantity: '1.0000'\r\n    },\r\n    {   \r\n        UUID: '00000000-0000-0000-0000-000000abcded',\r\n        ItemHasActiveCampaign: '1',\r\n        ItemIndicatorsWithoutCampaign: '',\r\n        ItemExternalID: 'FER999',\r\n        ObjectMenu: '',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        ItemParentCode: '',\r\n        ItemDimension1Name: 'Kuko',\r\n        UnitsQuantity: '1.0000'\r\n    },\r\n    {   \r\n        UUID: '00000000-0000-0000-0000-000000abcdec',\r\n        ItemHasActiveCampaign: '1',\r\n        ItemIndicatorsWithoutCampaign: '',\r\n        ItemExternalID: 'FER778',\r\n        ObjectMenu: '',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        ItemParentCode: '',\r\n        ItemDimension1Name: 'Kuko',\r\n        UnitsQuantity: '1.0000'\r\n    }\r\n]"
            },
            {
                "name": "FakeLineDataView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    {\r\n        \"FieldID\": \"ItemHasActiveCampaign\",\r\n        \"Type\": \"Boolean\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 0,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 1,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Left\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemIndicatorsWithoutCampaign\",\r\n        \"Type\": \"Indicators\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 1,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 2,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Left\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemExternalID\",\r\n        \"Type\": \"TextBox\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 4,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 5,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ObjectMenu\",\r\n        \"Type\": \"InternalLink\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": false,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 9,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 1,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Right\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"Image\",\r\n        \"Type\": \"ImageURL\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 0,\r\n                \"Y\": 1\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 4,\r\n                \"Height\": 4\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemParentCode\",\r\n        \"Type\": \"TextBox\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 4,\r\n                \"Y\": 1\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 6,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemDimension1Name\",\r\n        \"Type\": \"TextBox\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 4,\r\n                \"Y\": 2\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 6,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"UnitsQuantity\",\r\n        \"Type\": \"NumberRealQuantitySelector\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": false,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 4,\r\n                \"Y\": 3\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 6,\r\n                \"Height\": 2\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    }\r\n]"
            },
            {
                "name": "FakeSmartFilterFields",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    {\r\n        FieldID: 'BillToName',\r\n        Type: 'MultipleStringValues',\r\n        Title: 'Bill To Name',\r\n        OptionalValues: [{ Key: \"AD\", Value: \"Andorra\" }, { Key: \"IL\", Value: \"Israel\" }]\r\n    },\r\n    {\r\n        FieldID: 'AllowDecimal',\r\n        Type: 'Bool',\r\n        Title: 'Allow Decimal'\r\n    },\r\n    {\r\n        FieldID: 'CaseQuantity',\r\n        Type: 'Integer',\r\n        Title: 'Case Quantity'\r\n    },\r\n    { FieldID: 'TSAAttachmentTest', Title: 'TSA Attachment Test', Type: 'String' },\r\n    { FieldID: 'ActionDateTime', Title: 'Action Date Time', Type: 'DateTime' },\r\n]"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NoDataFoundMsg",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "pepIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    pepIconArrowRightAlt,\n]"
            },
            {
                "name": "pepIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/data-view-builder/data-view-builder.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    pepIconSystemClose,\n    pepIconArrowDownAlt,\n    pepIconSystemBin,\n    pepIconNumberPlus\n]"
            },
            {
                "name": "pepIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-list/generic-list.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    pepIconLeafRound,\n    pepIconLeafSkiny, pepIconSystemView\n]"
            },
            {
                "name": "pepIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    pepIconTextAlignCenter, \n    pepIconTextAlignLeft, \n    pepIconTextAlignRight,\n    pepIconArrowRightAlt,\n    pepIconArrowLeftAlt\n]"
            },
            {
                "name": "pepIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/rich-text/rich-text.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    pepIconSystemImage\n]"
            },
            {
                "name": "pepIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/show-if-badge/show-if-badge.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    pepIconSystemView\n]"
            },
            {
                "name": "pepIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    pepIconSystemBolt,\n    pepIconNoImage,\n    pepIconNoImage2,\n    pepIconArrowTwoWaysVerT,\n    pepIconArrowDown,\n    pepIconArrowUp,\n    pepIconArrowRightAlt,\n    pepIconArrowLeftAlt,\n    pepIconArrowDownAlt,\n    pepIconArrowUpAlt,\n    pepIconNumberNumber,\n    pepIconNumberPlus,\n    pepIconSystemBin,\n    pepIconSystemEdit,\n    pepIconSystemClose,\n    pepIconSystemFilter,\n    pepIconSystemMenu,\n    pepIconSystemHome,\n    pepIconSystemSettings,\n    pepIconSystemQuestion,\n    pepIconSystemAvatar,\n    pepIconSystemDoor,\n    pepIconSystemPrint,\n    pepIconSystemSearch,\n    pepIconSystemSpinner,\n    pepIconSystemInfo,\n    pepIconShoppingCart,\n    pepIconTimeCal,\n    pepIconViewCardLg,\n    pepIconViewCardMd,\n    pepIconViewCardSm,\n    pepIconViewTable,\n    pepIconViewMatrix,\n    pepIconViewLine,\n]"
            },
            {
                "name": "pepperiComponentsModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    PepAttachmentModule,\n    PepCarouselModule,\n    PepBreadCrumbsModule,\n    PepButtonModule,\n    PepCheckboxModule,\n    PepColorModule,\n    PepDateModule,\n    PepGroupButtonsModule,\n    PepImageModule,\n    PepImagesFilmstripModule,\n    PepListModule,\n    PepCheckboxModule,\n    PepQuantitySelectorModule,\n    PepRichHtmlTextareaModule,\n    PepSearchModule,\n    PepSelectModule,\n    PepSeparatorModule,\n    PepSliderModule,\n    PepSideBarModule,\n    PepSignatureModule,\n    PepSizeDetectorModule,\n    PepTextareaModule,\n    PepTextboxModule,\n    PepIconModule,\n    PepMenuModule,\n    PepTopBarModule,\n    PepPageLayoutModule,\n    PepSmartFiltersModule,\n    PepFormModule\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SmartFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-form/generic-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<GenericFormComponent>",
                "defaultValue": "(args: GenericFormComponent) => ({\n    props: {\n        ...args,\n        valueChange: action('valueChange'),\n        fieldClick: action('fieldClick'),\n        formValidationChange: action('formValidationChange')\n    }\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<GenericListComponent>",
                "defaultValue": "(args: GenericListComponent) => ({\n    props: {\n        ...args,\n        fieldClick: action('fieldClick'),\n        valueChange: action('valueChange'),\n        breadCrumbItemClick: action('breadCrumbItemClick')\n    },\n    template: `\n        <div style=\"height: 40vh\">\n            <pep-generic-list [dataSource]=\"dataSource\" [actions]=\"actions\" [breadCrumbsItems]=\"breadCrumbsItems\" [uuidMapping]=\"uuidMapping\" [disabled]=\"disabled\" \n                [addPadding]=\"addPadding\" [title]=\"title\" [description]=\"description\" [inline]=\"inline\" [showSearch]=\"showSearch\" [selectionType]=\"selectionType\"\n                [noDataFoundMsg]=\"noDataFoundMsg\" [supportSorting]=\"supportSorting\" [supportSorting]=\"supportSorting\" [showTopBar]=\"showTopBar\" [pager]=\"pager\"\n                [tableViewType]=\"tableViewType\" [zebraStripes]=\"zebraStripes\" [smartFilter]=\"smartFilter\" (valueChange)=\"valueChange\" (fieldClick)=\"fieldClick\" \n                (breadCrumbItemClick)=\"breadCrumbItemClick\">\n            </pep-generic-list>\n        </div>\n    `\n})"
            },
            {
                "name": "uiControlData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\n    Type: 'Form',\n    // Columns: 2,\n    ControlFields: [{\n        ApiName: \"GeneralInformation\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"\",\n        FieldType: 13,\n        Layout: { Height: 1, LineNumber: 0, Width: 2, X: 0, XAlignment: 0, Y: 0, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 0,\n        Width: 2,\n        X: 0,\n        XAlignment: 0,\n        Y: 0,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 100,\n        MinValue: 0,\n        ReadOnly: false,\n        Title: \"General Information\"\n    },\n    {\n        ApiName: \"ExternalID\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"External ID\",\n        FieldType: 1,\n        Layout: { Height: 1, LineNumber: 1, Width: 1, X: 0, XAlignment: 0, Y: 1, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 1,\n        Width: 1,\n        X: 0,\n        XAlignment: 0,\n        Y: 1,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: true,\n        Title: \"External ID\"\n    },\n    {\n        ApiName: \"ActionDateTime\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"Action Time\",\n        FieldType: 6,\n        Layout: { Height: 1, LineNumber: 1, Width: 1, X: 1, XAlignment: 0, Y: 1, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 1,\n        Width: 1,\n        X: 1,\n        XAlignment: 0,\n        Y: 1,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Action Time\"\n    },\n    {\n        ApiName: \"WrntyID\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"ID\",\n        FieldType: 2,\n        Layout: { Height: 1, LineNumber: 2, Width: 1, X: 0, XAlignment: 0, Y: 2, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 2,\n        Width: 1,\n        X: 0,\n        XAlignment: 0,\n        Y: 2,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: true,\n        Title: \"ID\"\n    },\n    {\n        ApiName: \"TSATsaTextTest\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"TsaTextTest\",\n        FieldType: 1,\n        Layout: { Height: 1, LineNumber: 2, Width: 1, X: 1, XAlignment: 0, Y: 2, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 2,\n        Width: 1,\n        X: 1,\n        XAlignment: 0,\n        Y: 2,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"TsaTextTest\"\n    },\n    {\n        ApiName: \"DeliveryDate\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"Delivery Date\",\n        FieldType: 5,\n        Layout: { Height: 1, LineNumber: 3, Width: 2, X: 0, XAlignment: 0, Y: 3, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 3,\n        Width: 2,\n        X: 0,\n        XAlignment: 0,\n        Y: 3,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Delivery Date\"\n    },\n    {\n        ApiName: \"AccountInformation\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"\",\n        FieldType: 13,\n        Layout: { Height: 1, LineNumber: 4, Width: 2, X: 0, XAlignment: 0, Y: 4, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 4,\n        Width: 2,\n        X: 0,\n        XAlignment: 0,\n        Y: 4,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 100,\n        MinValue: 0,\n        ReadOnly: false,\n        Title: \"Account Information\"\n    },\n    {\n        ApiName: \"BranchDbId\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"Branch\",\n        FieldType: 16,\n        Layout: { Height: 1, LineNumber: 5, Width: 1, X: 1, XAlignment: 0, Y: 5, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 5,\n        Width: 1,\n        X: 1,\n        XAlignment: 0,\n        Y: 5,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Branch\"\n    },\n    {\n        ApiName: \"BillToName\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"Bill to Name\",\n        FieldType: 1,\n        Layout: { Height: 1, LineNumber: 6, Width: 1, X: 0, XAlignment: 0, Y: 6, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 6,\n        Width: 1,\n        X: 0,\n        XAlignment: 0,\n        Y: 6,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: true,\n        Title: \"Bill to Name\"\n    },\n    {\n        ApiName: \"ShipToName\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"Ship to Name\",\n        FieldType: 1,\n        Layout: { Height: 1, LineNumber: 6, Width: 1, X: 1, XAlignment: 0, Y: 6, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 6,\n        Width: 1,\n        X: 1,\n        XAlignment: 0,\n        Y: 6,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Ship to Name\"\n    },\n    {\n        ApiName: \"BillToAddress\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"Bill to Address\",\n        FieldType: 14,\n        Layout: { Height: 2, LineNumber: 7, Width: 1, X: 0, XAlignment: 0, Y: 7, YAlignment: 3 },\n        Height: 2,\n        LineNumber: 7,\n        Width: 1,\n        X: 0,\n        XAlignment: 0,\n        Y: 7,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: true,\n        Title: \"Bill to Address\"\n    },\n    {\n        ApiName: \"ShipToAddress\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"Ship to Address\",\n        FieldType: 14,\n        Layout: { Height: 2, LineNumber: 7, Width: 1, X: 1, XAlignment: 0, Y: 7, YAlignment: 3 },\n        Height: 2,\n        LineNumber: 7,\n        Width: 1,\n        X: 1,\n        XAlignment: 0,\n        Y: 7,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Ship to Address\"\n    },\n    {\n        ApiName: \"BillToPhone\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"Bill to Phone\",\n        FieldType: 1,\n        Layout: { Height: 1, LineNumber: 8, Width: 1, X: 0, XAlignment: 0, Y: 10, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: true,\n        Title: \"Bill to Phone\",\n    },\n    {\n        ApiName: \"ShipToPhone\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"Ship to Phone\",\n        FieldType: 1,\n        Layout: { Height: 1, LineNumber: 8, Width: 1, X: 1, XAlignment: 0, Y: 10, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Ship to Phone\"\n    },\n    {\n        ApiName: \"OrderInformation\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"\",\n        FieldType: 13,\n        Layout: { Height: 1, LineNumber: 9, Width: 2, X: 0, XAlignment: 0, Y: 11, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 100,\n        MinValue: 0,\n        ReadOnly: false,\n        Title: \"Order Information\"\n    },\n    {\n        ApiName: \"TSAImage1\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"Image1\",\n        FieldType: 20,\n        Layout: { Height: 4, LineNumber: 10, Width: 2, X: 0, XAlignment: 0, Y: 12, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Image1\"\n    },\n    {\n        ApiName: \"TSAmulti\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"multi\",\n        FieldType: 12,\n        Layout: { Height: 1, LineNumber: 11, Width: 2, X: 0, XAlignment: 0, Y: 16, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"multi\",\n    },\n    {\n        ApiName: \"TSADropdown\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"Dropdown\",\n        FieldType: 11,\n        Layout: { Height: 1, LineNumber: 12, Width: 2, X: 0, XAlignment: 0, Y: 17, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Dropdown\"\n    },\n    {\n        ApiName: \"AccountTSAAccountDropdown\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"Account Account Dropdown\",\n        FieldType: 11,\n        Layout: { Height: 1, LineNumber: 13, Width: 2, X: 0, XAlignment: 0, Y: 18, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Account Dropdown\"\n    },\n    {\n        ApiName: \"TSACalculatedNumberbilltocountry\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"Calculated Number bill to country\",\n        FieldType: 7,\n        Layout: { Height: 1, LineNumber: 14, Width: 2, X: 0, XAlignment: 0, Y: 19, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Calculated Number bill to country\"\n    },\n    {\n        ApiName: \"TSAUDTTEST\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"UDT TEST\",\n        FieldType: 3,\n        Layout: { Height: 2, LineNumber: 15, Width: 2, X: 0, XAlignment: 0, Y: 20, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"UDT TEST\"\n    },\n    {\n        ApiName: \"TSAUDTtesttest\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"UDTtesttest\",\n        FieldType: 1,\n        Layout: { Height: 1, LineNumber: 16, Width: 2, X: 0, XAlignment: 0, Y: 22, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"UDTtesttest\"\n    },\n    {\n        ApiName: \"Signature\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"Signature\",\n        FieldType: 25,\n        Layout: { Height: 2, LineNumber: 17, Width: 2, X: 0, XAlignment: 0, Y: 23, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Signature\"\n    },\n    {\n        ApiName: \"TSAsignaturetest\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"signaturetest\",\n        FieldType: 25,\n        Layout: { Height: 2, LineNumber: 18, Width: 2, X: 0, XAlignment: 0, Y: 25, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"signaturetest\"\n    }\n    ]\n}"
            },
            {
                "name": "utilitiesList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/src/ngx-composite-lib.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    PepResetConfigurationFieldDirective\n]"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "FileStatusType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"uploading\" | \"downloading\" | \"done\" | \"failed\" | \"hidden\" | \"deleting\"",
                "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ParameterFormType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"add\" | \"edit\"",
                "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "PepDataViewBuilderType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"menu\" | \"list\" | \"card\" | \"not-supported\"",
                "file": "projects/ngx-composite-lib/data-view-builder/data-view-builder.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "PepGroupbuttonsTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sizes\" | \"font-weight\" | \"width-sizes\" | \"vertical-align\" | \"horizontal-align\" | \"left-right-arrows\" | \"boolean\" | \"custom\"",
                "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "PepShadowIntensityType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"soft\" | \"regular\" | \"hard\"",
                "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/ngx-composite-lib/generic-form/generic-form.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-form/generic-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-form/generic-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<GenericFormComponent>",
                    "defaultValue": "(args: GenericFormComponent) => ({\n    props: {\n        ...args,\n        valueChange: action('valueChange'),\n        fieldClick: action('fieldClick'),\n        formValidationChange: action('formValidationChange')\n    }\n})"
                }
            ],
            "projects/ngx-composite-lib/generic-list/generic-list.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "breadCrumbsItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NoDataFoundMsg",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SmartFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<GenericListComponent>",
                    "defaultValue": "(args: GenericListComponent) => ({\n    props: {\n        ...args,\n        fieldClick: action('fieldClick'),\n        valueChange: action('valueChange'),\n        breadCrumbItemClick: action('breadCrumbItemClick')\n    },\n    template: `\n        <div style=\"height: 40vh\">\n            <pep-generic-list [dataSource]=\"dataSource\" [actions]=\"actions\" [breadCrumbsItems]=\"breadCrumbsItems\" [uuidMapping]=\"uuidMapping\" [disabled]=\"disabled\" \n                [addPadding]=\"addPadding\" [title]=\"title\" [description]=\"description\" [inline]=\"inline\" [showSearch]=\"showSearch\" [selectionType]=\"selectionType\"\n                [noDataFoundMsg]=\"noDataFoundMsg\" [supportSorting]=\"supportSorting\" [supportSorting]=\"supportSorting\" [showTopBar]=\"showTopBar\" [pager]=\"pager\"\n                [tableViewType]=\"tableViewType\" [zebraStripes]=\"zebraStripes\" [smartFilter]=\"smartFilter\" (valueChange)=\"valueChange\" (fieldClick)=\"fieldClick\" \n                (breadCrumbItemClick)=\"breadCrumbItemClick\">\n            </pep-generic-list>\n        </div>\n    `\n})"
                }
            ],
            "projects/ngx-composite-lib/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/ngx-composite-lib-tester/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/ngx-composite-lib-tester/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    production: true\n}"
                }
            ],
            "projects/ngx-composite-lib-tester/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    production: false\n}"
                }
            ],
            "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts": [
                {
                    "name": "FakeCardsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    {\r\n        UUID: '00000000-0000-0000-0000-000000abcdef',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/8/32944058_1.jpg?ft=1',\r\n        UnitPrice: '34.0000',\r\n        ObjectMenu: '',\r\n        TotalUnitsPriceAfterDiscount: '31.0000',\r\n        UnitsQuantity: '1.0000',\r\n        ItemExternalID: 'ABC1234'\r\n    },\r\n    {\r\n        UUID: '1624db9d-3c6f-4814-a92f-ac45a991df74',\r\n        ItemImage: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/6/32944056_1.jpg?ft=1',\r\n        UnitPrice: '55.0000',\r\n        ObjectMenu: '',\r\n        TotalUnitsPriceAfterDiscount: '40.0000',\r\n        UnitsQuantity: '1.0000',\r\n        ItemExternalID: 'DDD4444'\r\n    },\r\n    {\r\n        UUID: '00000000-0000-0000-0000-000000abcdef',\r\n        ItemImage: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        UnitPrice: '23.0000',\r\n        ObjectMenu: '',\r\n        TotalUnitsPriceAfterDiscount: '18.0000',\r\n        UnitsQuantity: '1.0000',\r\n        ItemExternalID: 'FER321'\r\n    },\r\n    {\r\n        UUID: '00000000-0000-0000-0000-000000abcdef',\r\n        ItemImage: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        UnitPrice: '60.0000',\r\n        ObjectMenu: '',\r\n        TotalUnitsPriceAfterDiscount: '60.0000',\r\n        UnitsQuantity: '1.0000',\r\n        ItemExternalID: 'POR444'\r\n    }\r\n]"
                },
                {
                    "name": "FakeCardsDataView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    {\r\n        \"FieldID\": \"Image\",\r\n        \"Type\": \"Image\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 0,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 3,\r\n                \"Height\": 3\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"UnitPrice\",\r\n        \"Type\": \"Currency\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 3,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 6,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ObjectMenu\",\r\n        \"Type\": \"InternalLink\",\r\n        \"Title\": \"Menu\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": false,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 9,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 1,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"TotalUnitsPriceAfterDiscount\",\r\n        \"Type\": \"Currency\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 3,\r\n                \"Y\": 1\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 7,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"UnitsQuantity\",\r\n        \"Type\": \"NumberReal\",\r\n        \"Title\": \"Unit Quantity\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": false,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 3,\r\n                \"Y\": 2\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 7,\r\n                \"Height\": 2\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemExternalID\",\r\n        \"Type\": \"TextBox\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 0,\r\n                \"Y\": 3\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 3,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    }\r\n]"
                },
                {
                    "name": "FakeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    Addons: [\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '2e51566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d152',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '31f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd701',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: 'ba0adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '1c24db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '2251566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '33f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '44fb64d8-2b2c-4dec-8563-ac9fa98cd701',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '50adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '6c24db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '7e51566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d154',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '81f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '94fb64d8-2b2c-4dec-8563-ac9fa98cd701',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '100adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '1124db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '1251566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '13f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd731',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '150adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '1624db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        }\r\n    ],\r\n}"
                },
                {
                    "name": "FakeLineData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    {   \r\n        UUID: '00000000-0000-0000-0000-000000abcdef',\r\n        ItemHasActiveCampaign: '1',\r\n        ItemIndicatorsWithoutCampaign: '',\r\n        ItemExternalID: 'FER321',\r\n        ObjectMenu: '',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        ItemParentCode: '',\r\n        ItemDimension1Name: 'Kuko',\r\n        UnitsQuantity: '1.0000'\r\n    },\r\n    {   \r\n        UUID: '00000000-0000-0000-0000-000000abcdee',\r\n        ItemHasActiveCampaign: '1',\r\n        ItemIndicatorsWithoutCampaign: '',\r\n        ItemExternalID: 'FER333',\r\n        ObjectMenu: '',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        ItemParentCode: '',\r\n        ItemDimension1Name: 'Kuko',\r\n        UnitsQuantity: '1.0000'\r\n    },\r\n    {   \r\n        UUID: '00000000-0000-0000-0000-000000abcded',\r\n        ItemHasActiveCampaign: '1',\r\n        ItemIndicatorsWithoutCampaign: '',\r\n        ItemExternalID: 'FER999',\r\n        ObjectMenu: '',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        ItemParentCode: '',\r\n        ItemDimension1Name: 'Kuko',\r\n        UnitsQuantity: '1.0000'\r\n    },\r\n    {   \r\n        UUID: '00000000-0000-0000-0000-000000abcdec',\r\n        ItemHasActiveCampaign: '1',\r\n        ItemIndicatorsWithoutCampaign: '',\r\n        ItemExternalID: 'FER778',\r\n        ObjectMenu: '',\r\n        Image: 'https://cdn.pepperi.com/WrntyImages/7779723/PortfolioItems/2/32944052_1.jpg?ft=1',\r\n        ItemParentCode: '',\r\n        ItemDimension1Name: 'Kuko',\r\n        UnitsQuantity: '1.0000'\r\n    }\r\n]"
                },
                {
                    "name": "FakeLineDataView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    {\r\n        \"FieldID\": \"ItemHasActiveCampaign\",\r\n        \"Type\": \"Boolean\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 0,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 1,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Left\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemIndicatorsWithoutCampaign\",\r\n        \"Type\": \"Indicators\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 1,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 2,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Left\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemExternalID\",\r\n        \"Type\": \"TextBox\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 4,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 5,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ObjectMenu\",\r\n        \"Type\": \"InternalLink\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": false,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 9,\r\n                \"Y\": 0\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 1,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Right\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"Image\",\r\n        \"Type\": \"ImageURL\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 0,\r\n                \"Y\": 1\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 4,\r\n                \"Height\": 4\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemParentCode\",\r\n        \"Type\": \"TextBox\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 4,\r\n                \"Y\": 1\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 6,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"ItemDimension1Name\",\r\n        \"Type\": \"TextBox\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": true,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 4,\r\n                \"Y\": 2\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 6,\r\n                \"Height\": 1\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"FieldID\": \"UnitsQuantity\",\r\n        \"Type\": \"NumberRealQuantitySelector\",\r\n        \"Title\": \"\",\r\n        \"Mandatory\": false,\r\n        \"ReadOnly\": false,\r\n        \"Layout\": {\r\n            \"Origin\": {\r\n                \"X\": 4,\r\n                \"Y\": 3\r\n            },\r\n            \"Size\": {\r\n                \"Width\": 6,\r\n                \"Height\": 2\r\n            }\r\n        },\r\n        \"Style\": {\r\n            \"Alignment\": {\r\n                \"Vertical\": \"Center\",\r\n                \"Horizontal\": \"Center\"\r\n            }\r\n        }\r\n    }\r\n]"
                },
                {
                    "name": "FakeSmartFilterFields",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    {\r\n        FieldID: 'BillToName',\r\n        Type: 'MultipleStringValues',\r\n        Title: 'Bill To Name',\r\n        OptionalValues: [{ Key: \"AD\", Value: \"Andorra\" }, { Key: \"IL\", Value: \"Israel\" }]\r\n    },\r\n    {\r\n        FieldID: 'AllowDecimal',\r\n        Type: 'Bool',\r\n        Title: 'Allow Decimal'\r\n    },\r\n    {\r\n        FieldID: 'CaseQuantity',\r\n        Type: 'Integer',\r\n        Title: 'Case Quantity'\r\n    },\r\n    { FieldID: 'TSAAttachmentTest', Title: 'TSA Attachment Test', Type: 'String' },\r\n    { FieldID: 'ActionDateTime', Title: 'Action Date Time', Type: 'DateTime' },\r\n]"
                }
            ],
            "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts": [
                {
                    "name": "FakeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\n    GeneralInformation: 'Rich Text Example',\n    //  ItemExternalID: 'Abcd',\n    ActionDateTime: '2021-11-22T09:26:02Z',\n    WrntyID: '272764514',\n    TSATsaTextTest: 'Some text',\n    DeliveryDate: '2021-11-22',\n    AccountInformation: '',\n    BranchDbId: '1',\n    BillToName: 'AD',\n    ShipToName: 'Someone',\n    ButtunTest: 'Yar',\n    /*BillToAddress: {\n        Value: 'Israel',\n        GroupFields: [\n            {\n                ShipToCountryIso: {\n                    Value: 'IL',\n                    OptionalValues: [{ Key: \"AD\", Value: \"Andorra\" }, { Key: \"IL\", Value: \"UIsrael\" }],\n                }\n            },\n            { ShipToStateIso: '' },\n            { ShipToCity: '' },\n            { ShipToStreet: '' },\n            { ShipToZipCode: '' }\n\n        ]\n    }, \n\n    ItemName: {\n        Value: 'abc',\n        OptionalValues: [{ Key: 'a', Value: 1 }, { Key: 'b', Value: 2 }]\n    }, */\n    UnitsQuantity: 10000,\n    TotalUnitsPriceAfterDiscount: 20000,\n    TSASetPriceForHardContract: 'high price',\n    TSALabels: null,\n    TSALabelQty: 0,\n    TSALabelCode: '',\n    TSABagsQty: 4,\n    TSAAmountPerBag: 999,\n    TSABagPrevValue: 7,\n    ItemTSAPackAllIn1Bag: 'all-pack'\n\n}"
                },
                {
                    "name": "FakeDataOld",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ObjectsDataRowCell[]",
                    "defaultValue": "[\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"GeneralInformation\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 13,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '2',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true,\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"ExternalID\",\n        BackgroundColor: \"\",\n        Enabled: false,\n        FieldType: 1,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true,\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"ActionDateTime\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 6,\n        FormattedValue: \"11/22/2021 11:26 AM\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '607483216',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"2021-11-22T09:26:02Z\",\n        Visible: true,\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"WrntyID\",\n        BackgroundColor: \"\",\n        Enabled: false,\n        FieldType: 2,\n        FormattedValue: \"272764514\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '607492672',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"272764514\",\n        Visible: true,\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"TSATsaTextTest\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 1,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '1610126992',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true,\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"DeliveryDate\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 5,\n        FormattedValue: \"11/22/2021\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"2021-11-22\",\n        Visible: true,\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"AccountInformation\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 13,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '607499200',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true,\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"BranchDbId\",\n        BackgroundColor: \"\",\n        Enabled: false,\n        FieldType: 16,\n        FormattedValue: \"12234566686869\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '-1',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"1\",\n        Visible: true,\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"BillToName\",\n        BackgroundColor: \"\",\n        Enabled: false,\n        FieldType: 1,\n        FormattedValue: \"12234566686869\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '-1',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"12234566686869\",\n        Visible: true,\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"ShipToName\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 1,\n        FormattedValue: \"12234566686869\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '-1',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"12234566686869\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"BillToAddress\",\n        BackgroundColor: \"\",\n        Enabled: false,\n        FieldType: 14,\n        FormattedValue: \"Israel\",\n        GroupFields: [\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"BillToCountryIso\",\n                BackgroundColor: \"\",\n                Enabled: true,\n                FieldType: 16,\n                FormattedValue: \"Israel\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [{ Key: \"AD\", Value: \"Andorra\" }, { Key: \"IL\", Value: \"Israel\" }],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '1505137882',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"IL\",\n                Visible: true,\n            },\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"BillToStateIso\",\n                BackgroundColor: \"\",\n                Enabled: false,\n                FieldType: 16,\n                FormattedValue: \"\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '1585223436',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"\",\n                Visible: true,\n            },\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"BillToCity\",\n                BackgroundColor: \"\",\n                Enabled: true,\n                FieldType: 1,\n                FormattedValue: \"\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '607497088',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"\",\n                Visible: true\n            },\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"BillToStreet\",\n                BackgroundColor: \"\",\n                Enabled: true,\n                FieldType: 1,\n                FormattedValue: \"\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '0',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"\",\n                Visible: true,\n            },\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"BillToZipCode\",\n                BackgroundColor: \"\",\n                Enabled: true,\n                FieldType: 1,\n                FormattedValue: \"\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '1525717912',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"\",\n                Visible: true\n            }\n        ],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"Israel\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"ShipToAddress\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 14,\n        FormattedValue: \"Israel\",\n        GroupFields: [\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"ShipToCountryIso\",\n                BackgroundColor: \"\",\n                Enabled: true,\n                FieldType: 16,\n                FormattedValue: \"Israel\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [{ Key: \"AD\", Value: \"Andorra\" }, { Key: \"IL\", Value: \"UIsrael\" }],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '-1',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"IL\",\n                Visible: true\n            },\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"ShipToStateIso\",\n                BackgroundColor: \"\",\n                Enabled: false,\n                FieldType: 16,\n                FormattedValue: \"\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '0',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"\",\n                Visible: true\n            },\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"ShipToCity\",\n                BackgroundColor: \"\",\n                Enabled: true,\n                FieldType: 1,\n                FormattedValue: \"\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '0',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"\",\n                Visible: true\n            },\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"ShipToStreet\",\n                BackgroundColor: \"\",\n                Enabled: true,\n                FieldType: 1,\n                FormattedValue: \"\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '0',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"\",\n                Visible: true\n            },\n            {\n                Accessory: \"\",\n                AdditionalValue: \"\",\n                ApiName: \"ShipToZipCode\",\n                BackgroundColor: \"\",\n                Enabled: true,\n                FieldType: 1,\n                FormattedValue: \"\",\n                GroupFields: [],\n                Highlighted: false,\n                NotificationInfo: \"\",\n                OptionalValues: [],\n                ReferenceObjectInternalType: \"\",\n                ReferenceObjectSubType: \"\",\n                ReferenceObjectType: '1530042974',\n                TextColor: \"\",\n                UiPageKey: \"\",\n                Value: \"\",\n                Visible: true\n            }\n        ],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '-1',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"Israel\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"BillToPhone\",\n        BackgroundColor: \"\",\n        Enabled: false,\n        FieldType: 1,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"ShipToPhone\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 1,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"OrderInformation\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 13,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"TSAImage1\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 20,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"TSAmulti\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 12,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [{ Key: \"ACV\", Value: \"ACV\" }, { Key: \"123\", Value: \"123\" }, { Key: \"DFGH\", Value: \"DFGH\" }],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"TSADropdown\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 11,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [{ Key: \"1\", Value: \"1\" }, { Key: \"23\", Value: \"23\" }, { Key: \"4\", Value: \"4\" }, { Key: \"5\", Value: \"5\" }],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"AccountTSAAccountDropdown\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 11,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [{ Key: \"A\", Value: \"A\" }, { Key: \"B\", Value: \"B\" }, { Key: \"C\", Value: \"C\" }, { Key: \"D\", Value: \"D\" }],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"TSACalculatedNumberbilltocountry\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 7,\n        FormattedValue: \"1\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"1\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"TSAUDTTEST\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 3,\n        FormattedValue: \"{\\\"success\\\":true}\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"{\\\"success\\\":true}\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"TSAUDTtesttest\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 1,\n        FormattedValue: \"Jfnfhdhdhfhfhfhfhf\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"Jfnfhdhdhfhfhfhfhf\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"Signature\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 25,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '2',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true\n    },\n    {\n        Accessory: \"\",\n        AdditionalValue: \"\",\n        ApiName: \"TSAsignaturetest\",\n        BackgroundColor: \"\",\n        Enabled: true,\n        FieldType: 25,\n        FormattedValue: \"\",\n        GroupFields: [],\n        Highlighted: false,\n        NotificationInfo: \"\",\n        OptionalValues: [],\n        ReferenceObjectInternalType: \"\",\n        ReferenceObjectSubType: \"\",\n        ReferenceObjectType: '0',\n        TextColor: \"\",\n        UiPageKey: \"\",\n        Value: \"\",\n        Visible: true\n    }\n]"
                },
                {
                    "name": "FakeDataViewFields",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[\n    {\n        FieldID: 'GeneralInformation',\n        Type: 'RichTextHTML',\n        Title: 'General Information',\n        Mandatory: false,\n        ReadOnly: false,\n        Layout: {\n            Origin: {\n                X: 0,\n                Y: 0\n            },\n            Size: {\n                Width: 2,\n                Height: 0\n            }\n        },\n        Style: {\n            Alignment: {\n                Horizontal: 'Stretch',\n                Vertical: 'Stretch'\n            }\n        },\n        AdditionalProps: {\n            renderTitle: false,\n            renderEnlargeButton: false\n        }\n    },\n    {\n        FieldID: 'GeneralInformationTwo',\n        Type: 'TextHeader',\n        Title: 'Description',\n        Mandatory: false,\n        ReadOnly: false,\n        Layout: {\n            Origin: {\n                X: 0,\n                Y: 1\n            },\n            Size: {\n                Width: 2,\n                Height: 0\n            }\n        },\n        Style: {\n            Alignment: {\n                Horizontal: 'Stretch',\n                Vertical: 'Stretch'\n            }\n        }\n    },\n    {\n        FieldID: 'WrntyID',\n        Type: 'LimitedLengthTextBox',\n        Title: 'ID',\n        Mandatory: false,\n        ReadOnly: true,\n        Layout: {\n            Origin: {\n                X: 0,\n                Y: 2\n            },\n            Size: {\n                Width: 1,\n                Height: 0\n            }\n        },\n        Style: {\n            Alignment: {\n                Horizontal: 'Stretch',\n                Vertical: 'Stretch'\n            }\n        }\n    },\n    {\n        FieldID: 'TSATsaTextTest',\n        Type: 'TextBox',\n        Title: 'TSA Tsa Text Test',\n        Mandatory: true,\n        ReadOnly: false,\n        Layout: {\n            Origin: {\n                X: 1,\n                Y: 2\n            },\n            Size: {\n                Width: 1,\n                Height: 0\n            }\n        },\n        Style: {\n            Alignment: {\n                Horizontal: 'Stretch',\n                Vertical: 'Stretch'\n            }\n        }\n    },\n    {\n        FieldID: 'ButtunTest',\n        Type: 'Button',\n        Title: 'TSA Tsa Btn Test',\n        Mandatory: true,\n        ReadOnly: false,\n        Layout: {\n            Origin: {\n                X: 0,\n                Y: 3\n            },\n            Size: {\n                Width: 2,\n                Height: 0\n            }\n        },\n        Style: {\n            Alignment: {\n                Horizontal: 'Stretch',\n                Vertical: 'Stretch'\n            }\n        },\n        \n    }\n]"
                },
                {
                    "name": "uiControlData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\n    Type: 'Form',\n    // Columns: 2,\n    ControlFields: [{\n        ApiName: \"GeneralInformation\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"\",\n        FieldType: 13,\n        Layout: { Height: 1, LineNumber: 0, Width: 2, X: 0, XAlignment: 0, Y: 0, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 0,\n        Width: 2,\n        X: 0,\n        XAlignment: 0,\n        Y: 0,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 100,\n        MinValue: 0,\n        ReadOnly: false,\n        Title: \"General Information\"\n    },\n    {\n        ApiName: \"ExternalID\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"External ID\",\n        FieldType: 1,\n        Layout: { Height: 1, LineNumber: 1, Width: 1, X: 0, XAlignment: 0, Y: 1, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 1,\n        Width: 1,\n        X: 0,\n        XAlignment: 0,\n        Y: 1,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: true,\n        Title: \"External ID\"\n    },\n    {\n        ApiName: \"ActionDateTime\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"Action Time\",\n        FieldType: 6,\n        Layout: { Height: 1, LineNumber: 1, Width: 1, X: 1, XAlignment: 0, Y: 1, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 1,\n        Width: 1,\n        X: 1,\n        XAlignment: 0,\n        Y: 1,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Action Time\"\n    },\n    {\n        ApiName: \"WrntyID\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"ID\",\n        FieldType: 2,\n        Layout: { Height: 1, LineNumber: 2, Width: 1, X: 0, XAlignment: 0, Y: 2, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 2,\n        Width: 1,\n        X: 0,\n        XAlignment: 0,\n        Y: 2,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: true,\n        Title: \"ID\"\n    },\n    {\n        ApiName: \"TSATsaTextTest\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"TsaTextTest\",\n        FieldType: 1,\n        Layout: { Height: 1, LineNumber: 2, Width: 1, X: 1, XAlignment: 0, Y: 2, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 2,\n        Width: 1,\n        X: 1,\n        XAlignment: 0,\n        Y: 2,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"TsaTextTest\"\n    },\n    {\n        ApiName: \"DeliveryDate\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"Delivery Date\",\n        FieldType: 5,\n        Layout: { Height: 1, LineNumber: 3, Width: 2, X: 0, XAlignment: 0, Y: 3, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 3,\n        Width: 2,\n        X: 0,\n        XAlignment: 0,\n        Y: 3,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Delivery Date\"\n    },\n    {\n        ApiName: \"AccountInformation\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"\",\n        FieldType: 13,\n        Layout: { Height: 1, LineNumber: 4, Width: 2, X: 0, XAlignment: 0, Y: 4, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 4,\n        Width: 2,\n        X: 0,\n        XAlignment: 0,\n        Y: 4,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 100,\n        MinValue: 0,\n        ReadOnly: false,\n        Title: \"Account Information\"\n    },\n    {\n        ApiName: \"BranchDbId\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"Branch\",\n        FieldType: 16,\n        Layout: { Height: 1, LineNumber: 5, Width: 1, X: 1, XAlignment: 0, Y: 5, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 5,\n        Width: 1,\n        X: 1,\n        XAlignment: 0,\n        Y: 5,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Branch\"\n    },\n    {\n        ApiName: \"BillToName\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"Bill to Name\",\n        FieldType: 1,\n        Layout: { Height: 1, LineNumber: 6, Width: 1, X: 0, XAlignment: 0, Y: 6, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 6,\n        Width: 1,\n        X: 0,\n        XAlignment: 0,\n        Y: 6,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: true,\n        Title: \"Bill to Name\"\n    },\n    {\n        ApiName: \"ShipToName\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"Ship to Name\",\n        FieldType: 1,\n        Layout: { Height: 1, LineNumber: 6, Width: 1, X: 1, XAlignment: 0, Y: 6, YAlignment: 3 },\n        Height: 1,\n        LineNumber: 6,\n        Width: 1,\n        X: 1,\n        XAlignment: 0,\n        Y: 6,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Ship to Name\"\n    },\n    {\n        ApiName: \"BillToAddress\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"Bill to Address\",\n        FieldType: 14,\n        Layout: { Height: 2, LineNumber: 7, Width: 1, X: 0, XAlignment: 0, Y: 7, YAlignment: 3 },\n        Height: 2,\n        LineNumber: 7,\n        Width: 1,\n        X: 0,\n        XAlignment: 0,\n        Y: 7,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: true,\n        Title: \"Bill to Address\"\n    },\n    {\n        ApiName: \"ShipToAddress\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"Ship to Address\",\n        FieldType: 14,\n        Layout: { Height: 2, LineNumber: 7, Width: 1, X: 1, XAlignment: 0, Y: 7, YAlignment: 3 },\n        Height: 2,\n        LineNumber: 7,\n        Width: 1,\n        X: 1,\n        XAlignment: 0,\n        Y: 7,\n        YAlignment: 3,\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Ship to Address\"\n    },\n    {\n        ApiName: \"BillToPhone\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"Bill to Phone\",\n        FieldType: 1,\n        Layout: { Height: 1, LineNumber: 8, Width: 1, X: 0, XAlignment: 0, Y: 10, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: true,\n        Title: \"Bill to Phone\",\n    },\n    {\n        ApiName: \"ShipToPhone\",\n        ColumnWidth: 1,\n        ColumnWidthType: 0,\n        FieldName: \"Ship to Phone\",\n        FieldType: 1,\n        Layout: { Height: 1, LineNumber: 8, Width: 1, X: 1, XAlignment: 0, Y: 10, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Ship to Phone\"\n    },\n    {\n        ApiName: \"OrderInformation\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"\",\n        FieldType: 13,\n        Layout: { Height: 1, LineNumber: 9, Width: 2, X: 0, XAlignment: 0, Y: 11, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 100,\n        MinValue: 0,\n        ReadOnly: false,\n        Title: \"Order Information\"\n    },\n    {\n        ApiName: \"TSAImage1\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"Image1\",\n        FieldType: 20,\n        Layout: { Height: 4, LineNumber: 10, Width: 2, X: 0, XAlignment: 0, Y: 12, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Image1\"\n    },\n    {\n        ApiName: \"TSAmulti\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"multi\",\n        FieldType: 12,\n        Layout: { Height: 1, LineNumber: 11, Width: 2, X: 0, XAlignment: 0, Y: 16, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"multi\",\n    },\n    {\n        ApiName: \"TSADropdown\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"Dropdown\",\n        FieldType: 11,\n        Layout: { Height: 1, LineNumber: 12, Width: 2, X: 0, XAlignment: 0, Y: 17, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Dropdown\"\n    },\n    {\n        ApiName: \"AccountTSAAccountDropdown\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"Account Account Dropdown\",\n        FieldType: 11,\n        Layout: { Height: 1, LineNumber: 13, Width: 2, X: 0, XAlignment: 0, Y: 18, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Account Dropdown\"\n    },\n    {\n        ApiName: \"TSACalculatedNumberbilltocountry\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"Calculated Number bill to country\",\n        FieldType: 7,\n        Layout: { Height: 1, LineNumber: 14, Width: 2, X: 0, XAlignment: 0, Y: 19, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Calculated Number bill to country\"\n    },\n    {\n        ApiName: \"TSAUDTTEST\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"UDT TEST\",\n        FieldType: 3,\n        Layout: { Height: 2, LineNumber: 15, Width: 2, X: 0, XAlignment: 0, Y: 20, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"UDT TEST\"\n    },\n    {\n        ApiName: \"TSAUDTtesttest\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"UDTtesttest\",\n        FieldType: 1,\n        Layout: { Height: 1, LineNumber: 16, Width: 2, X: 0, XAlignment: 0, Y: 22, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"UDTtesttest\"\n    },\n    {\n        ApiName: \"Signature\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"Signature\",\n        FieldType: 25,\n        Layout: { Height: 2, LineNumber: 17, Width: 2, X: 0, XAlignment: 0, Y: 23, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"Signature\"\n    },\n    {\n        ApiName: \"TSAsignaturetest\",\n        ColumnWidth: 2,\n        ColumnWidthType: 0,\n        FieldName: \"signaturetest\",\n        FieldType: 25,\n        Layout: { Height: 2, LineNumber: 18, Width: 2, X: 0, XAlignment: 0, Y: 25, YAlignment: 3 },\n        Mandatory: false,\n        MaxFieldCharacters: 0,\n        MaxFieldLines: 0,\n        MaxValue: 1000000000,\n        MinValue: -1000000000,\n        ReadOnly: false,\n        Title: \"signaturetest\"\n    }\n    ]\n}"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "projects/ngx-composite-lib/file-status-panel/file-status-panel.module.ts": [
                {
                    "name": "pepIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    pepIconArrowRightAlt,\n]"
                }
            ],
            "projects/ngx-composite-lib/data-view-builder/data-view-builder.module.ts": [
                {
                    "name": "pepIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/data-view-builder/data-view-builder.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    pepIconSystemClose,\n    pepIconArrowDownAlt,\n    pepIconSystemBin,\n    pepIconNumberPlus\n]"
                }
            ],
            "projects/ngx-composite-lib/generic-list/generic-list.module.ts": [
                {
                    "name": "pepIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-list/generic-list.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    pepIconLeafRound,\n    pepIconLeafSkiny, pepIconSystemView\n]"
                }
            ],
            "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.module.ts": [
                {
                    "name": "pepIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    pepIconTextAlignCenter, \n    pepIconTextAlignLeft, \n    pepIconTextAlignRight,\n    pepIconArrowRightAlt,\n    pepIconArrowLeftAlt\n]"
                }
            ],
            "projects/ngx-composite-lib/rich-text/rich-text.module.ts": [
                {
                    "name": "pepIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/rich-text/rich-text.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    pepIconSystemImage\n]"
                }
            ],
            "projects/ngx-composite-lib/show-if-badge/show-if-badge.module.ts": [
                {
                    "name": "pepIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/show-if-badge/show-if-badge.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    pepIconSystemView\n]"
                }
            ],
            "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts": [
                {
                    "name": "pepIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    pepIconSystemBolt,\n    pepIconNoImage,\n    pepIconNoImage2,\n    pepIconArrowTwoWaysVerT,\n    pepIconArrowDown,\n    pepIconArrowUp,\n    pepIconArrowRightAlt,\n    pepIconArrowLeftAlt,\n    pepIconArrowDownAlt,\n    pepIconArrowUpAlt,\n    pepIconNumberNumber,\n    pepIconNumberPlus,\n    pepIconSystemBin,\n    pepIconSystemEdit,\n    pepIconSystemClose,\n    pepIconSystemFilter,\n    pepIconSystemMenu,\n    pepIconSystemHome,\n    pepIconSystemSettings,\n    pepIconSystemQuestion,\n    pepIconSystemAvatar,\n    pepIconSystemDoor,\n    pepIconSystemPrint,\n    pepIconSystemSearch,\n    pepIconSystemSpinner,\n    pepIconSystemInfo,\n    pepIconShoppingCart,\n    pepIconTimeCal,\n    pepIconViewCardLg,\n    pepIconViewCardMd,\n    pepIconViewCardSm,\n    pepIconViewTable,\n    pepIconViewMatrix,\n    pepIconViewLine,\n]"
                },
                {
                    "name": "pepperiComponentsModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    PepAttachmentModule,\n    PepCarouselModule,\n    PepBreadCrumbsModule,\n    PepButtonModule,\n    PepCheckboxModule,\n    PepColorModule,\n    PepDateModule,\n    PepGroupButtonsModule,\n    PepImageModule,\n    PepImagesFilmstripModule,\n    PepListModule,\n    PepCheckboxModule,\n    PepQuantitySelectorModule,\n    PepRichHtmlTextareaModule,\n    PepSearchModule,\n    PepSelectModule,\n    PepSeparatorModule,\n    PepSliderModule,\n    PepSideBarModule,\n    PepSignatureModule,\n    PepSizeDetectorModule,\n    PepTextareaModule,\n    PepTextboxModule,\n    PepIconModule,\n    PepMenuModule,\n    PepTopBarModule,\n    PepPageLayoutModule,\n    PepSmartFiltersModule,\n    PepFormModule\n]"
                }
            ],
            "projects/ngx-composite-lib/src/ngx-composite-lib.module.ts": [
                {
                    "name": "utilitiesList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/src/ngx-composite-lib.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    PepResetConfigurationFieldDirective\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/ngx-composite-lib/file-status-panel/file-status-panel.model.ts": [
                {
                    "name": "FileStatusType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"uploading\" | \"downloading\" | \"done\" | \"failed\" | \"hidden\" | \"deleting\"",
                    "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/ngx-composite-lib/manage-parameters/manage-parameters.model.ts": [
                {
                    "name": "ParameterFormType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"add\" | \"edit\"",
                    "file": "projects/ngx-composite-lib/manage-parameters/manage-parameters.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/ngx-composite-lib/data-view-builder/data-view-builder.model.ts": [
                {
                    "name": "PepDataViewBuilderType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"menu\" | \"list\" | \"card\" | \"not-supported\"",
                    "file": "projects/ngx-composite-lib/data-view-builder/data-view-builder.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.model.ts": [
                {
                    "name": "PepGroupbuttonsTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sizes\" | \"font-weight\" | \"width-sizes\" | \"vertical-align\" | \"horizontal-align\" | \"left-right-arrows\" | \"boolean\" | \"custom\"",
                    "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/ngx-composite-lib/shadow-settings/shadow-settings.model.ts": [
                {
                    "name": "PepShadowIntensityType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"soft\" | \"regular\" | \"hard\"",
                    "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "projects/ngx-composite-lib-tester/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepperiComponentsModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/components-example/components-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentsExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/data-view-builder-example/data-view-builder-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DataViewBuilderExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeDataOld",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeDataViewFields",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-form-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uiControlData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-form-example/generic-form-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenericFormExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeCardsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeCardsDataView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeLineData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeLineDataView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeSmartFilterFields",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-list-example/generic-list-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenericListExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/42",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/color-settings/color-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/color-settings/color-settings.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepColorSettings",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/data-view-builder/data-view-builder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DataViewBuilderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/data-view-builder/data-view-builder.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/data-view-builder/data-view-builder.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataViewBuilderService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/data-view-builder/menu-data-view/menu-data-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuDataViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/file-status-panel/file-status-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileStatusPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/file-status-panel/file-status-panel.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FileStatus",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/file-status-panel/file-status-panel.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/flow-picker-button/flow-picker-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FlowPickerButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/flow-picker-button/flow-picker-button.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FlowPickerService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenericFormComponent",
                "coveragePercent": 8,
                "coverageCount": "2/25",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericFormData",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericFormDataParams",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericFormDataView",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericFormDataViewField",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericFormFieldUpdate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericFormValueChange",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepGenericFormService",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-form/generic-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenericListComponent",
                "coveragePercent": 5,
                "coverageCount": "4/77",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListActions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListDataRow",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListDataSource",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListDataViewField",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListEmptyState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListInitData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListListInputs",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListPager",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListParams",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListSmartFilter",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepSmartFilters",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepGenericListService",
                "coveragePercent": 10,
                "coverageCount": "1/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "breadCrumbsItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoDataFoundMsg",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SmartFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupButtonsSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/icon-picker/icon-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconPickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/icon-picker/icon-picker.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FlowPickerService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/manage-parameters/manage-parameter/manage-parameter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ManageParameterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/manage-parameters/manage-parameters.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ManageParametersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/manage-parameters/manage-parameters.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IParamemeter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/manage-parameters/manage-parameters.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IParameterFormData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/manage-parameters/manage-parameters.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IParametersColumn",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/manage-parameters/manage-parameters.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ManageParametersService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/rich-text/rich-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RichTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/rich-text/rich-text.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/rich-text/rich-text.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RichTextService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/shadow-settings/shadow-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShadowSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/shadow-settings/shadow-settings.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepShadowSettings",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/show-if-badge/show-if-badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShowIfBadgeComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/show-if-badge/show-if-badge.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/directives/reset-configuration-field.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PepResetConfigurationFieldDirective",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepDIMXHelperService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DIMXExportOptions",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DIMXHostObject",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DIMXImportOptions",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DIMXRecursiveExportOptions",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/services/dimx.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DIMXRecursiveImportOptions",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/services/utilities.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepCompositeLibUtilitiesService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/ngx-composite-lib.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "utilitiesList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}