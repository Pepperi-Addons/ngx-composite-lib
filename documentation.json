{
    "pipes": [],
    "interfaces": [
        {
            "name": "IPepGenericListActions",
            "id": "interface-IPepGenericListActions-71333e2338752310870416b92c722aa4a979e66700cc52c1909fdae70b2d13e38b0750bd0b65c9f7bb94e9d45115bd20d05c88b5a8901ffdc98d495e197f61f7",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GridDataView } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { \r\n    PepListPagerType, \r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent\r\n } from '@pepperi-addons/ngx-lib/list';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: {\r\n        searchString?: string,\r\n        filter?: any,\r\n        sorting?: IPepListSortingChangeEvent,\r\n        fromIndex: number, // 0\r\n        toIndex: number // top || page-size\r\n    }): Promise<IPepGenericListInitData>;\r\n    inputs?(): Promise<IPepGenericListTableInputs>;\r\n    update?(params: {\r\n        searchString?: string,\r\n        sorting?: IPepListSortingChangeEvent,\r\n        fromIndex: number,\r\n        toIndex: number,\r\n        pageIndex?: number\r\n    }): Promise<any[]>;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView,\r\n    totalCount: number,\r\n    items: any[]\r\n}\r\n\r\nexport interface IPepGenericListTableInputs {\r\n    supportSorting?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: any): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<literal type[]>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "IPepGenericListDataSource",
            "id": "interface-IPepGenericListDataSource-71333e2338752310870416b92c722aa4a979e66700cc52c1909fdae70b2d13e38b0750bd0b65c9f7bb94e9d45115bd20d05c88b5a8901ffdc98d495e197f61f7",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GridDataView } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { \r\n    PepListPagerType, \r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent\r\n } from '@pepperi-addons/ngx-lib/list';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: {\r\n        searchString?: string,\r\n        filter?: any,\r\n        sorting?: IPepListSortingChangeEvent,\r\n        fromIndex: number, // 0\r\n        toIndex: number // top || page-size\r\n    }): Promise<IPepGenericListInitData>;\r\n    inputs?(): Promise<IPepGenericListTableInputs>;\r\n    update?(params: {\r\n        searchString?: string,\r\n        sorting?: IPepListSortingChangeEvent,\r\n        fromIndex: number,\r\n        toIndex: number,\r\n        pageIndex?: number\r\n    }): Promise<any[]>;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView,\r\n    totalCount: number,\r\n    items: any[]\r\n}\r\n\r\nexport interface IPepGenericListTableInputs {\r\n    supportSorting?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: any): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<IPepGenericListInitData>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "inputs",
                    "args": [],
                    "optional": true,
                    "returnType": "Promise<IPepGenericListTableInputs>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "Promise<any[]>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "IPepGenericListInitData",
            "id": "interface-IPepGenericListInitData-71333e2338752310870416b92c722aa4a979e66700cc52c1909fdae70b2d13e38b0750bd0b65c9f7bb94e9d45115bd20d05c88b5a8901ffdc98d495e197f61f7",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GridDataView } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { \r\n    PepListPagerType, \r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent\r\n } from '@pepperi-addons/ngx-lib/list';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: {\r\n        searchString?: string,\r\n        filter?: any,\r\n        sorting?: IPepListSortingChangeEvent,\r\n        fromIndex: number, // 0\r\n        toIndex: number // top || page-size\r\n    }): Promise<IPepGenericListInitData>;\r\n    inputs?(): Promise<IPepGenericListTableInputs>;\r\n    update?(params: {\r\n        searchString?: string,\r\n        sorting?: IPepListSortingChangeEvent,\r\n        fromIndex: number,\r\n        toIndex: number,\r\n        pageIndex?: number\r\n    }): Promise<any[]>;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView,\r\n    totalCount: number,\r\n    items: any[]\r\n}\r\n\r\nexport interface IPepGenericListTableInputs {\r\n    supportSorting?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: any): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "dataView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GridDataView",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "totalCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPepGenericListPager",
            "id": "interface-IPepGenericListPager-71333e2338752310870416b92c722aa4a979e66700cc52c1909fdae70b2d13e38b0750bd0b65c9f7bb94e9d45115bd20d05c88b5a8901ffdc98d495e197f61f7",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GridDataView } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { \r\n    PepListPagerType, \r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent\r\n } from '@pepperi-addons/ngx-lib/list';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: {\r\n        searchString?: string,\r\n        filter?: any,\r\n        sorting?: IPepListSortingChangeEvent,\r\n        fromIndex: number, // 0\r\n        toIndex: number // top || page-size\r\n    }): Promise<IPepGenericListInitData>;\r\n    inputs?(): Promise<IPepGenericListTableInputs>;\r\n    update?(params: {\r\n        searchString?: string,\r\n        sorting?: IPepListSortingChangeEvent,\r\n        fromIndex: number,\r\n        toIndex: number,\r\n        pageIndex?: number\r\n    }): Promise<any[]>;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView,\r\n    totalCount: number,\r\n    items: any[]\r\n}\r\n\r\nexport interface IPepGenericListTableInputs {\r\n    supportSorting?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: any): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepListPagerType",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPepGenericListTableInputs",
            "id": "interface-IPepGenericListTableInputs-71333e2338752310870416b92c722aa4a979e66700cc52c1909fdae70b2d13e38b0750bd0b65c9f7bb94e9d45115bd20d05c88b5a8901ffdc98d495e197f61f7",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GridDataView } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\r\nimport { \r\n    PepListPagerType, \r\n    PepListSelectionType,\r\n    IPepListSortingChangeEvent\r\n } from '@pepperi-addons/ngx-lib/list';\r\n\r\nexport interface IPepGenericListDataSource {\r\n    init(params: {\r\n        searchString?: string,\r\n        filter?: any,\r\n        sorting?: IPepListSortingChangeEvent,\r\n        fromIndex: number, // 0\r\n        toIndex: number // top || page-size\r\n    }): Promise<IPepGenericListInitData>;\r\n    inputs?(): Promise<IPepGenericListTableInputs>;\r\n    update?(params: {\r\n        searchString?: string,\r\n        sorting?: IPepListSortingChangeEvent,\r\n        fromIndex: number,\r\n        toIndex: number,\r\n        pageIndex?: number\r\n    }): Promise<any[]>;\r\n}\r\n\r\nexport interface IPepGenericListInitData {\r\n    dataView: GridDataView,\r\n    totalCount: number,\r\n    items: any[]\r\n}\r\n\r\nexport interface IPepGenericListTableInputs {\r\n    supportSorting?: boolean;\r\n    selectionType?: PepListSelectionType;\r\n    pager?: IPepGenericListPager;\r\n    noDataFoundMsg?: string;\r\n}\r\n\r\nexport interface IPepGenericListActions {\r\n    get(data: any): Promise<{\r\n        title: string;\r\n        handler: (obj: any) => Promise<void>;\r\n    }[]>;\r\n}\r\n\r\nexport interface IPepGenericListPager {\r\n    type: PepListPagerType;\r\n    size?: number;\r\n    index?: number;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "noDataFoundMsg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "pager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListPager",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "selectionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepListSelectionType",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "supportSorting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "DIMXService",
            "id": "injectable-DIMXService-994f9632e4bf9cc9ce143650ba76b00a71a34b65fa2a56e93cc7df636a31bb32dec5bab847882c84cf7158ed0af5e87b60a4f6d7c7044e5b3c181c8839be7324",
            "file": "projects/ngx-composite-lib/dimx-export/dimx.service.ts",
            "properties": [
                {
                    "name": "accessToken",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "papiBaseURL",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "parsedToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "pepperiDataConverter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepDataConvertorService",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "session",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepSessionService",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pepGet",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pepPost",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable } from 'rxjs';\nimport jwt from 'jwt-decode';\nimport { PapiClient } from '@pepperi-addons/papi-sdk';\nimport { Injectable } from '@angular/core';\n\nimport {PepHttpService, PepDataConvertorService, PepSessionService} from '@pepperi-addons/ngx-lib';\n\n@Injectable({ providedIn: 'root' })\nexport class DIMXService {\n    //tempToken = \"\"\n    accessToken = '';\n    parsedToken: any\n    papiBaseURL = ''\n\n    get papiClient(): PapiClient {\n        return new PapiClient({\n            baseURL: this.papiBaseURL,\n            token: this.session.getIdpToken(),\n            suppressLogging:true\n        })\n    }\n\n    constructor(\n        public session:  PepSessionService,\n        public pepperiDataConverter: PepDataConvertorService,\n        private pepHttp: PepHttpService\n    ) {\n        //window.sessionStorage.setItem('idp_token',this.tempToken)\n        const accessToken = this.session.getIdpToken();\n      \n        this.parsedToken = jwt(accessToken);\n        this.papiBaseURL = this.parsedToken[\"pepperi.baseurl\"]\n    }\n\n    async get(endpoint: string): Promise<any> {\n        return await this.papiClient.get(endpoint);\n    }\n\n    async post(endpoint: string, body: any): Promise<any> {\n        return await this.papiClient.post(endpoint, body);\n    }\n\n    pepGet(endpoint: string): Observable<any> {\n        return this.pepHttp.getPapiApiCall(endpoint);\n    }\n\n    pepPost(endpoint: string, body: any): Observable<any> {\n        return this.pepHttp.postPapiApiCall(endpoint, body);\n    }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "session",
                        "type": "PepSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pepperiDataConverter",
                        "type": "PepDataConvertorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pepHttp",
                        "type": "PepHttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "session",
                        "type": "PepSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pepperiDataConverter",
                        "type": "PepDataConvertorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pepHttp",
                        "type": "PepHttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "papiClient": {
                    "name": "papiClient",
                    "getSignature": {
                        "name": "papiClient",
                        "type": "",
                        "returnType": "PapiClient",
                        "line": 15
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "PepCompositeLibUtilitiesService",
            "id": "injectable-PepCompositeLibUtilitiesService-d394ea8f6abb5accfecb818463afdff7981a63774224cd2d7b41deffda659490b6b2044b1c1d43cc9c03631d1ac56688aacda5523fee59c3fa7d051e95ee3811",
            "file": "projects/ngx-composite-lib/src/core/common/services/utilities.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n/*\r\n    This service is for utillity usege.\r\n*/\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class PepCompositeLibUtilitiesService {\r\n    constructor(\r\n        // private sessionService: PepSessionService,\r\n        // private httpService: PepHttpService,\r\n        // private loaderService: PepLoaderService\r\n    ) {\r\n        //\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "PepGenericListService",
            "id": "injectable-PepGenericListService-5dfe950b82fb9605cea083979a8a3dab6638606a974ae9201c0e970bb581ba7e01fe3e90228e8b6cb0d95d0cf4c3ff8463e13781037886795ddf942f500365e6",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.service.ts",
            "properties": [
                {
                    "name": "_pepList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_refresh$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "refresh$",
                    "defaultValue": "this._refresh$.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getItemById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedItems",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, ViewContainerRef } from '@angular/core';\nimport { PepListComponent } from '@pepperi-addons/ngx-lib/list';\nimport { BehaviorSubject } from 'rxjs';\n//test\n@Injectable({\n    providedIn: 'root'\n})\nexport class PepGenericListService {   \n    private _refresh$ = new BehaviorSubject<boolean>(false);\n    \n    private _pepList: any;    \n\n    public refresh$ = this._refresh$.asObservable();\n       \n    constructor() {\n        //\n    }\n\n    set pepList(val: any) {\n        this._pepList = val;\n    }\n\n    get pepList() {\n        return this._pepList;\n    }\n   \n    getItemById(id: string) {\n        if (this._pepList) {\n            return this._pepList.getItemDataByID(id);\n        } else { \n            return null;\n        }        \n    }\n\n    getSelectedItems() {\n        if (this._pepList) {\n            return this._pepList.getSelectedItemsData();\n        } else { \n            return null;\n        }  \n    }\n\n    /*\n    refreshTable() {\n        this._refresh$.next(true);\n    } */\n\n\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "accessors": {
                "pepList": {
                    "name": "pepList",
                    "setSignature": {
                        "name": "pepList",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 19,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "pepList",
                        "type": "",
                        "returnType": "",
                        "line": 23
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "IFile",
            "id": "class-IFile-c939fd68d7d96a4ce6908c8c315c9166dc00819caf2ac239ac0a197c8caad2f26986431c69b1569efb4724be458fb949319dd0a42f36fe6c2386c5a1ef566c3c",
            "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export type fileStatus = 'uploading' | 'downloading' | 'done' | 'failed' | 'hidden';\r\n\r\nexport class IFile {\r\n    key = 0;\r\n    name = '';\r\n    status: fileStatus = 'uploading';\r\n}",
            "properties": [
                {
                    "name": "key",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "status",
                    "defaultValue": "'uploading'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileStatus",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IFile",
            "id": "class-IFile-506bd01c8ba83b608137c76dce41823167a8b6be1a1de7283b618ede39e9640c02ec2bec064abc308dd62aea94de5cb7812a2cba6d5ec6c33ad57bbcafcaa208-1",
            "file": "projects/ngx-composite-lib/dimx-export/dimx.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "type fileStatus = 'uploading'|'downloading'|'done'|'failed'|'hidden';\nexport class IFile {\n    key = 0;\n    name = '';\n    status: fileStatus = 'downloading';\n    }",
            "properties": [
                {
                    "name": "key",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "status",
                    "defaultValue": "'downloading'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fileStatus",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IFile-1"
        },
        {
            "name": "PepColorSettings",
            "id": "class-PepColorSettings-4ceb059cf3c036648d9f4f5f50b0d618c09b8525a6423240e5bbbc0bf9e1c4a0508ff398c31e1a14d1944269dd5ae90dd20098b8cdbca37a8cc54df1849d5d07",
            "file": "projects/ngx-composite-lib/color-settings/color-settings.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PepColorSettings {\r\n    use = false;\r\n    value = 'hsl(0, 0%, 57%)';\r\n    opacity = 50;\r\n    // useGradientOverlay?: boolean = true;\r\n}",
            "properties": [
                {
                    "name": "opacity",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "use",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "defaultValue": "'hsl(0, 0%, 57%)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PepShadowSettings",
            "id": "class-PepShadowSettings-efaedb36570c7d79e71a1e4a1be34f73b1df7746d1bb071f53d8406e8dda6be1b9e5d26e5997c8f6e595a2b2fe4a4d49b72b0970aa05308a9ebf3a7531299f06",
            "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PepSizeType } from \"@pepperi-addons/ngx-lib\";\r\n\r\nexport type PepShadowIntensityType = 'soft' | 'regular' | 'hard';\r\n\r\nexport class PepShadowSettings {\r\n    use = false;\r\n    size: PepSizeType = 'md';\r\n    intensity: PepShadowIntensityType = 'regular';\r\n}",
            "properties": [
                {
                    "name": "intensity",
                    "defaultValue": "'regular'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepShadowIntensityType",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepSizeType",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "use",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "PepResetConfigurationFieldDirective",
            "id": "directive-PepResetConfigurationFieldDirective-04cc5f7465655681cd00e58968f0fbd09cb26d848fd089f2af8822e473c619c6eb863cc3b3a3dbb584678d828cc9b40678eeb20cae84bc84c35caf2e4bd780a8",
            "file": "projects/ngx-composite-lib/src/core/common/directives/reset-configuration-field.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener, ElementRef, AfterViewInit, TemplateRef, ViewContainerRef, Renderer2, Output, EventEmitter, Input, OnDestroy } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { PepSizeType, PepStyleStateType, PepStyleType } from '@pepperi-addons/ngx-lib';\r\n\r\n@Directive({\r\n    selector: '[pepResetConfigurationField]',\r\n    \r\n})\r\nexport class PepResetConfigurationFieldDirective implements AfterViewInit, OnDestroy {\r\n    @Input('pepResetConfigurationField') resetFieldKey: string = '';\r\n    @Input() resetHostEvents: EventEmitter<any> = new EventEmitter();\r\n    \r\n    private _disabled: boolean = false;\r\n    @Input() \r\n    set disabled(value: boolean) {\r\n        this._disabled = value;\r\n        this.renderer.setStyle(this.buttonContainer, 'visibility', this.getVisibility());\r\n    }\r\n    get disabled(): boolean {\r\n        return this._disabled;\r\n    }\r\n\r\n    private _hideReset: boolean = false;\r\n    @Input() \r\n    set hideReset(value: boolean) {\r\n        this._hideReset = value;\r\n        this.renderer.setStyle(this.buttonContainer, 'visibility', this.getVisibility());\r\n    }\r\n    get hideReset(): boolean {\r\n        return this._hideReset;\r\n    }\r\n\r\n    // @Input() resetPosition: 'top-end' | 'bottom-end' = 'top-end';\r\n    resetPosition = 'bottom-end';\r\n\r\n    private _dir: 'rtl' | 'ltr' = 'ltr';\r\n    @Input() \r\n    set dir(value: 'rtl' | 'ltr') {\r\n        this._dir = value;\r\n        this.renderer.setStyle(this.buttonContainer, 'float', this.getFloat());\r\n    }\r\n    get dir(): 'rtl' | 'ltr' {\r\n        return this._dir;\r\n    }\r\n\r\n    // styleType: PepStyleType = 'weak';\r\n    // styleStateType: PepStyleStateType = 'system';\r\n    sizeType: PepSizeType = 'sm';\r\n    \r\n    private unlistener: (() => void) | undefined;\r\n    private buttonContainer!: HTMLDivElement;\r\n\r\n    constructor(\r\n        private renderer:Renderer2,\r\n        private element: ElementRef,\r\n        private translate: TranslateService) {\r\n        // Create the buton container.\r\n        this.buttonContainer = this.renderer.createElement('div');\r\n    }\r\n\r\n    private getVisibility() {\r\n        return this.disabled || this.hideReset ? 'hidden' : 'visible';\r\n    }\r\n\r\n    private getFloat() {\r\n        return this.dir === 'rtl' ? 'left' : 'right';\r\n    }\r\n\r\n    private setButtonContainerStyle() {\r\n        let css = `\r\n            position: relative;\r\n            display: flex;\r\n            justify-content: flex-end;\r\n            float: ${this.getFloat()};\r\n            visibility: ${this.getVisibility()};\r\n            ${this.resetPosition === 'top-end' ? 'margin-top:' : 'margin-bottom:'} 1rem;\r\n        `;\r\n\r\n        this.buttonContainer.setAttribute(\"style\", css);\r\n    }\r\n\r\n    private setButtonStyle(button: HTMLButtonElement) {\r\n        // border-radius: 0.5rem !important;\r\n        // padding-inline: 0.75rem !important;\r\n        let css = `\r\n            position: absolute !important;\r\n            display: flex !important;\r\n            align-items: center !important;\r\n            height: 1rem !important;\r\n            line-height: unset !important;\r\n            padding: unset !important;\r\n            background: unset !important;\r\n            font-size: var(--pep-button-2xs-font-size) !important;\r\n            ${this.resetPosition === 'top-end' ? 'top:' : 'bottom:'} -1.25rem;\r\n        `;\r\n\r\n        button.setAttribute(\"style\", css);\r\n    }\r\n\r\n    private async getResetElement(): Promise<HTMLElement> {\r\n        this.setButtonContainerStyle();\r\n        this.renderer.addClass(this.buttonContainer, 'pep-reset-configuration-field-container');\r\n\r\n        const button: HTMLButtonElement = this.renderer.createElement('button');\r\n        await this.translate.get('ACTIONS.RESET').toPromise().then(resetText => {\r\n            const buttonText = this.renderer.createText(resetText);\r\n            this.renderer.appendChild(button, buttonText);\r\n        });\r\n        \r\n        this.renderer.addClass(button, 'pep-button');\r\n        // this.renderer.addClass(button, this.styleType);\r\n        // this.renderer.addClass(button, this.styleStateType);\r\n        this.renderer.addClass(button, 'color-link');\r\n        this.renderer.addClass(button, this.sizeType);\r\n        this.setButtonStyle(button);\r\n        // this.renderer.addClass(button, 'reset-configuration-field-button');\r\n        \r\n        this.unlistener = this.renderer.listen(button, 'click', () => this.onResetClicked());\r\n        \r\n        this.renderer.appendChild(this.buttonContainer, button);\r\n\r\n        return this.buttonContainer;\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.getResetElement().then(element => {\r\n            if (this.resetPosition === 'top-end' && this.element.nativeElement.children?.length > 0) {\r\n                this.renderer.insertBefore(this.element.nativeElement, element, this.element.nativeElement.children[0]);\r\n            } else {\r\n                this.renderer.appendChild(this.element.nativeElement, element);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.unlistener) {\r\n            this.unlistener();\r\n        }\r\n    }\r\n\r\n    onResetClicked() {\r\n        this.resetHostEvents.emit({\r\n            action: 'set-configuration-field',\r\n            key: this.resetFieldKey,\r\n            value: undefined\r\n        });\r\n    }\r\n}\r\n",
            "selector": "[pepResetConfigurationField]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "dir",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideReset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "pepResetConfigurationField",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "resetHostEvents",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_dir",
                    "defaultValue": "'ltr'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"rtl\" | \"ltr\"",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_hideReset",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "buttonContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLDivElement",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "resetPosition",
                    "defaultValue": "'bottom-end'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "sizeType",
                    "defaultValue": "'sm'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepSizeType",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "unlistener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | undefined",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getFloat",
                    "args": [],
                    "optional": false,
                    "returnType": "\"right\" | \"left\"",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getResetElement",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<HTMLElement>",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ]
                },
                {
                    "name": "getVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "\"hidden\" | \"visible\"",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResetClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setButtonContainerStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "setButtonStyle",
                    "args": [
                        {
                            "name": "button",
                            "type": "HTMLButtonElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "button",
                            "type": "HTMLButtonElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 15,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 19
                    }
                },
                "hideReset": {
                    "name": "hideReset",
                    "setSignature": {
                        "name": "hideReset",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "hideReset",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 29
                    }
                },
                "dir": {
                    "name": "dir",
                    "setSignature": {
                        "name": "dir",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "\"rtl\" | \"ltr\"",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "\"rtl\" | \"ltr\"",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "dir",
                        "type": "",
                        "returnType": "\"rtl\" | \"ltr\"",
                        "line": 42
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-47a6989dfedee3ffb89543427b0318a5db4564867d295d6401bb1ee2966d5eca8abc085881e09e0d3cdd31c9070e91599331442effc1d25c1bb2f1ebaa0fad8a",
            "file": "projects/ngx-composite-lib-tester/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss",
                "./app.component.theme.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addPadding",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "customizationService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepCustomizationService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "footerHeight",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "layoutService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepLayoutService",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loaderService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepLoaderService",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showLoader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "showSidebar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getTopBarStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "PepStyleType",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onHostEvents",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n    PepCustomizationService,\n    PepLoaderService,\n    PepLayoutService,\n    PepStyleType,\n} from '@pepperi-addons/ngx-lib';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss', './app.component.theme.scss'],\n})\nexport class AppComponent implements OnInit {\n    footerHeight = 0;\n    showLoader = false;\n    showHeader = true;\n    showSidebar = false;\n    addPadding = true;\n\n    constructor(\n        public customizationService: PepCustomizationService,\n        public loaderService: PepLoaderService,\n        public layoutService: PepLayoutService,\n    ) {\n        // this.loaderService.show();\n        this.loaderService.onChanged$.subscribe((show) => {\n            this.showLoader = show;\n        });\n    }\n\n    ngOnInit() {\n        this.customizationService.setThemeVariables();\n        this.customizationService.hideSettings();\n\n        this.customizationService.footerHeight.subscribe((footerHeight) => {\n            this.footerHeight = footerHeight;\n        });\n    }\n\n    getTopBarStyle() {\n        return document.documentElement.style.getPropertyValue(\n            PepCustomizationService.STYLE_TOP_HEADER_KEY\n        ) as PepStyleType;\n    }\n\n    navigateHome() {\n        alert('Home');\n    }\n\n    onHostEvents(event: any) {\n        //\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~@pepperi-addons/ngx-lib/src/core/style/abstracts/mixins';\r\n@import '~@pepperi-addons/ngx-lib/src/core/style/abstracts/variables';\r\n@import 'ngx-composite-lib/src/core/style/abstracts/variables';\r\n\r\n#header {\r\n    height: $header-height;\r\n\r\n    .navbar {\r\n        // border: none !important;\r\n        border-radius: 0;\r\n        // @include box-sizing(border-box);\r\n        box-sizing: border-box;\r\n        height: inherit;\r\n        width: 100%;\r\n        padding: $spacing-lg $double-content-padding;\r\n        margin: 0;\r\n        max-width: $max-scr-width;\r\n\r\n        @media (max-width: $screen-max-size-xs) {\r\n            padding-left: $content-padding;\r\n            padding-right: $content-padding;\r\n        }\r\n\r\n        .navbar-default {\r\n            background-color: transparent;\r\n            border-bottom-color: transparent;\r\n        }\r\n    }\r\n}\r\n\r\n#mainCont {\r\n    flex-grow: 1;\r\n    min-height: 100%;\r\n}\r\n\r\n#loadingSpinnerModal {\r\n    z-index: $z-index-high + 101;\r\n    height: 1rem;\r\n    width: 100%;\r\n    background-color: transparent;\r\n    opacity: 1;\r\n    position: absolute;\r\n    top: $header-height !important;\r\n    overflow: hidden;\r\n}\r\n\r\n#loadingSpinner {\r\n    z-index: $z-index-high;\r\n    width: 100%;\r\n    margin-top: 5px;\r\n\r\n    div {\r\n        width: 7px;\r\n        height: 7px;\r\n        position: absolute;\r\n        left: -20px;\r\n        border-radius: 50%;\r\n        animation: move 4s infinite cubic-bezier(0.2, 0.64, 0.81, 0.23);\r\n    }\r\n\r\n    div:nth-child(2) {\r\n        animation-delay: 150ms;\r\n    }\r\n\r\n    div:nth-child(3) {\r\n        animation-delay: 300ms;\r\n    }\r\n\r\n    div:nth-child(4) {\r\n        animation-delay: 450ms;\r\n    }\r\n\r\n    div:nth-child(5) {\r\n        animation-delay: 600ms;\r\n    }\r\n}\r\n\r\n@keyframes move {\r\n    0% {\r\n        left: 0%;\r\n    }\r\n    50% {\r\n        left: 100%;\r\n    }\r\n    75% {\r\n        left: 100%;\r\n    }\r\n    100% {\r\n        left: 100%;\r\n    }\r\n}\r\n\r\n[dir='rtl'] {\r\n    #loadingSpinner {\r\n        div {\r\n            animation: moveOpp 4s infinite cubic-bezier(0.2, 0.64, 0.81, 0.23);\r\n        }\r\n\r\n        div:nth-child(2) {\r\n            animation-delay: 150ms;\r\n        }\r\n        div:nth-child(3) {\r\n            animation-delay: 300ms;\r\n        }\r\n        div:nth-child(4) {\r\n            animation-delay: 450ms;\r\n        }\r\n        div:nth-child(5) {\r\n            animation-delay: 600ms;\r\n        }\r\n    }\r\n\r\n    @keyframes moveOpp {\r\n        0% {\r\n            left: 100%;\r\n        }\r\n        50% {\r\n            left: -2%;\r\n        }\r\n        75% {\r\n            left: -2%;\r\n        }\r\n        100% {\r\n            left: -2%;\r\n        }\r\n    }\r\n}\r\n\r\n.pep-layout {\r\n    display: grid;\r\n    grid-template-rows: $header-height 1fr;\r\n    grid-template-areas: \"header\"\r\n                         \"main\";\r\n    height: 100vh;\r\n    width: 100%;\r\n    padding: 0;\r\n    overflow: hidden;\r\n\r\n    .pep-header-layout {\r\n        grid-area: header;\r\n        z-index: $z-index-high + 1;\r\n    }\r\n\r\n    .pep-main-layout {\r\n        $main-layout-height: calc(100vh - #{$header-height});\r\n        height: 100%; \r\n        grid-area: main;\r\n        display: flex;\r\n        overflow: hidden;\r\n        \r\n        &.add-padding {\r\n            padding-inline: $content-padding;\r\n\r\n            @media (max-width: $screen-max-size-xs) {\r\n                padding-inline: 0;\r\n            }\r\n        }\r\n\r\n        .pep-side-layout {\r\n            grid-area: side;\r\n            width: auto;\r\n        }\r\n\r\n        .pep-center-layout {\r\n            grid-area: center;\r\n            height: 100%;\r\n            width: 100%;\r\n            overflow: auto;\r\n\r\n            ::ng-deep > * {\r\n                height: inherit;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // .pep-footer-layout {\r\n    //     grid-area: footer;\r\n    //     display: block;\r\n    // }\r\n}",
                    "styleUrl": "./app.component.scss"
                },
                {
                    "data": "@use '~@pepperi-addons/ngx-lib/src/core/style/abstracts/mixins';\n@use '~@pepperi-addons/ngx-lib/src/core/style/abstracts/functions';\n\n#header {\n    background-color: functions.get-pep-color(color-system-primary-invert, color-base);\n\n    .navbar {\n        box-shadow: functions.get-pep-shadow(shadow-sm, regular);\n        \n        &.weak {\n            @include mixins.state-weak-default(color-top-header);\n        }\n        \n        &.regular {\n            @include mixins.state-regular-default(true, color-top-header);\n        }\n        \n        &.strong {\n            @include mixins.state-strong-default(color-top-header);\n        }\n        \n        border-right: none !important;\n        border-left: none !important;\n    }\n}",
                    "styleUrl": "./app.component.theme.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "PepLoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "customizationService",
                        "type": "PepCustomizationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "PepLoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"loadingSpinnerModal\" *ngIf=\"showHeader\" [hidden]=\"!showLoader\" pepRtlClass >\n    <div id=\"loadingSpinner\">\n        <div class=\"pep-loading-spinner\" *ngFor=\"let number of [0, 1, 2, 3, 4]\" [ngStyle]=\"{ 'background-color': customizationService?.getLoadingSpinnerColor() }\"></div>\n    </div>\n</div>\n<div class=\"pep-layout\" dir=\"{{ layoutService.isRtl() ? 'rtl' : 'ltr' }}\">\n    <header class=\"pep-header-layout\">\n        <div id=\"header\" pepRtlClass>\n            <nav class=\"navbar {{ getTopBarStyle() }} navbar-light bg-faded menuCont\"\n                [ngStyle]=\"{'background-color': customizationService.getBrandingMainColor() }\">\n                <div class=\"pep-spacing-element-negative\">\n                    <pep-button sizeType=\"sm\" styleType=\"weak\" classNames=\"keep-background-on-focus\"\n                        class=\"pep-spacing-element pull-left flip\" iconName=\"system_home\"  (click)=\"navigateHome()\">\n                    </pep-button>\n                </div>\n                <div class=\"pep-spacing-element-negative\">\n                    <pep-button [value]=\"'ExampleComponentsTitle' | translate\" sizeType=\"sm\" styleType=\"weak\" class=\"pep-spacing-element pull-right flip\" classNames=\"keep-background-on-focus\"\n                        [routerLink]=\"['components-example']\">\n                    </pep-button>\n                    <pep-button [value]=\"'GenericListExampleComponentTitle' | translate\" sizeType=\"sm\" styleType=\"weak\" class=\"pep-spacing-element pull-right flip\" classNames=\"keep-background-on-focus\"\n                        [routerLink]=\"['generic-list-example']\">\n                    </pep-button>\n                </div>\n            </nav>\n        </div>\n    </header>\n    <main class=\"pep-main-layout\" [ngClass]=\"{ 'add-padding': addPadding }\">\n        <aside *ngIf=\"showSidebar\" class=\"pep-side-layout\">\n        </aside>\n        <div class=\"pep-center-layout\">\n            <router-outlet></router-outlet>\n            <!-- Check this for demostrate the block editor that raise hostEvents  -->\n            <!-- <app-components-example (hostEvents)=\"onHostEvents($event)\"></app-components-example> -->\n        </div>\n    </main>\n</div>\n<pep-size-detector></pep-size-detector>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ColorSettingsComponent",
            "id": "component-ColorSettingsComponent-93dbd4739c1557a5dc0944123b2c46b87cd6394250d4a3c8488d4135b151a902c3e223a8bb517db9d24e6733d3ce4b6017bbdbf842739088598c4f2df9112017",
            "file": "projects/ngx-composite-lib/color-settings/color-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-color-settings",
            "styleUrls": [
                "./color-settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-settings.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "colorChange",
                    "defaultValue": "new EventEmitter<PepColorSettings>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<PepColorSettings>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_color",
                    "defaultValue": "new PepColorSettings()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepColorSettings",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getRGBAcolor",
                    "args": [
                        {
                            "name": "colorObj",
                            "type": "PepColorSettings",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "opac",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "colorObj",
                            "type": "PepColorSettings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "opac",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSliderBackground",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onColorChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSliderValueChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUseChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "raiseColorChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { PepColorService } from '@pepperi-addons/ngx-lib';\nimport { PepColorSettings } from './color-settings.model';\n\n@Component({\n    selector: 'pep-color-settings',\n    templateUrl: './color-settings.component.html',\n    styleUrls: ['./color-settings.component.scss']\n})\nexport class ColorSettingsComponent implements OnInit {\n\n    @Input() title = '';\n\n    private _color: PepColorSettings = new PepColorSettings();\n    @Input()\n    set color(value: PepColorSettings) {\n        if (!value) {\n            this._color = new PepColorSettings();\n        } else {\n            this._color = value;\n        }\n    }\n    get color(): PepColorSettings {\n        return this._color;\n    }\n\n    @Output()\n    colorChange: EventEmitter<PepColorSettings> = new EventEmitter<PepColorSettings>();\n    \n    constructor(private pepColorService: PepColorService) { }\n\n    ngOnInit() {\n        //\n    }\n\n    private getRGBAcolor(colorObj: PepColorSettings, opac: number | null = null) {\n        let rgba = 'rgba(255,255,255,0)';\n\n        if (colorObj) {\n            const color = colorObj.value;\n            let opacity = opac != null ? opac : colorObj.opacity;\n\n            opacity = opacity > 0 ? opacity / 100 : 0;\n\n            const hsl = this.pepColorService.hslString2hsl(color);\n            const rgb = this.pepColorService.hsl2rgb(hsl);\n            rgba = 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + opacity + ')';\n        }\n\n        return rgba;\n    }\n\n    private raiseColorChange() {\n        this.colorChange.emit(this.color);\n    }\n\n    getSliderBackground() {\n        const alignTo = 'right';\n    \n        const colorObj = new PepColorSettings();\n    \n        colorObj.value = this.color.value;\n        colorObj.opacity = 100;\n    \n        const gradStr = this.getRGBAcolor(colorObj, 0) + ' , ' + this.getRGBAcolor(colorObj);\n    \n        return 'linear-gradient(to ' + alignTo + ', ' + gradStr + ')';\n    }\n\n    onUseChanged(value: boolean) {\n        this.color.use = value;\n        this.raiseColorChange();\n    }\n\n    onColorChanged(value: string) {\n        this.color.value = value;\n        this.raiseColorChange();\n    }\n\n    onSliderValueChanged(value: number) {\n        this.color.opacity = value;\n        this.raiseColorChange();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    width: 100%;\r\n    // max-width: 200px;\r\n}",
                    "styleUrl": "./color-settings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pepColorService",
                        "type": "PepColorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "pepColorService",
                        "type": "PepColorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "color": {
                    "name": "color",
                    "setSignature": {
                        "name": "color",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "PepColorSettings",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "PepColorSettings",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "color",
                        "type": "",
                        "returnType": "PepColorSettings",
                        "line": 23
                    }
                }
            },
            "templateData": "<pep-checkbox class=\"checkbox-as-title\" [label]=\"title\" [renderTitle]=\"false\" [value]=\"color.use\" (valueChange)=\"onUseChanged($event)\"></pep-checkbox>\n<pep-color [value]=\"color.value\" [label]=\"title + ' ' + ('COLOR_SETTINGS.COLOR' | translate)\" [disabled]=\"!color.use\" (valueChange)=\"onColorChanged($event)\">\n</pep-color>\n<pep-slider [label]=\"title + ' ' + ('COLOR_SETTINGS.OPACITY' | translate)\" [hint]=\"color.opacity.toString() || ''\" [minValue]=\"0\" [maxValue]=\"100\" [disabled]=\"!color.use\" [value]=\"color.opacity\" \n    [background]=\"getSliderBackground()\" (inputChange)=\"onSliderValueChanged($event)\">\n</pep-slider>\n"
        },
        {
            "name": "ComponentsExampleComponent",
            "id": "component-ComponentsExampleComponent-27790aabe8f06ca8e840882aad224d95f655d3c67bfd7859a99563554bda26c293d1c3b8bf2d267b50b1807fc9bc99e6ed325910291fee73662e88dc0622b9dc",
            "file": "projects/ngx-composite-lib-tester/src/app/components-example/components-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-components-example",
            "styleUrls": [
                "./components-example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./components-example.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "hostEvents",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dimx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DIMXComponent | undefined",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dimx'"
                        }
                    ]
                },
                {
                    "name": "files",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IFile>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "menuItems",
                    "defaultValue": "[{\"key\":'dimxexport', \"text\":\"Export\"}, {\"key\":'dimximport', \"text\":\"Import\"}]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "selectedMenuItem",
                    "defaultValue": "{\"key\":'dimxexport'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "addFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "menuClick",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "menuItemClick",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\nimport { IFile } from '@pepperi-addons/ngx-composite-lib/file-status-panel';\nimport { DIMXComponent as DIMXComponent } from 'projects/ngx-composite-lib/dimx-export';\n\n@Component({\n    selector: 'app-components-example',\n    templateUrl: './components-example.component.html',\n    styleUrls: ['./components-example.component.scss'],\n})\nexport class ComponentsExampleComponent implements OnInit {\n    @ViewChild('dimx') dimx:DIMXComponent | undefined;\n    public files: Array<IFile> = [];\n\n    @Output() hostEvents: EventEmitter<any> = new EventEmitter();\n    \n    constructor() { \n        //\n    }\n\n    ngOnInit(): void {\n        \n        this.addFiles();\n        \n    }\n\n    menuItems = [{\"key\":'dimxexport', \"text\":\"Export\"}, {\"key\":'dimximport', \"text\":\"Import\"}];\n    selectedMenuItem = {\"key\":'dimxexport'};\n    menuItemClick(value: any){\n        console.log(`menu item was clicked with value ${JSON.stringify(value)}`);\n       \n        switch(value[\"source\"][\"key\"]){\n            case \"dimxexport\":\n                this.dimx?.DIMXExportRun({});\n                break;\n            case \"dimximport\":\n                this.dimx?.uploadFile(value, {});\n                \n                break;\n            default:\n                console.log(\"default reached in menuItemClick switch-case\");\n        }\n        \n    }\n\n    menuClick(value: any){\n        console.log(`menu click with value: ${JSON.stringify(value)}`);\n    }\n\n    addFiles(){\n        const file: IFile = new IFile();\n        file.name = 'Test';\n        file.status = 'downloading';\n        \n        window.setInterval(() => { \n            this.files.push(file);\n            if(this.files.length === 4){\n                this.files[2].status = 'done';\n                this.files[0].status = 'failed';\n            }\n            else if(this.files.length === 6){\n                this.files = [];\n            }\n        }, 2000);\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".components-container {\r\n    display: flex;\r\n    flex-flow: column;\r\n    padding: 1rem;\r\n    width: 300px;\r\n    gap: 1rem;\r\n}",
                    "styleUrl": "./components-example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"components-container\">\n    <pep-menu\n        [text]=\"'text'\"\n        iconName=\"system_menu\"\n        type=\"action\"\n        styleType=\"weak\"\n        sizeType=\"md\"\n        classNames=\"hahah\"\n        [items]=\"menuItems\"\n        [selectedItem]=\"selectedMenuItem\"\n        [disabled]=\"false\"\n        (menuItemClick)=\"menuItemClick($event)\"\n        (menuClick)=\"menuClick($event)\"\n    ></pep-menu>\n    <pep-color-settings title=\"Color\"></pep-color-settings>\n    <pep-shadow-settings></pep-shadow-settings>\n    <!-- <pep-button value=\"click here\"></pep-button> -->\n    <pep-group-buttons-settings [groupType]=\"'vertical-align'\" [title]=\"'Group buttons'\" [subHeader]=\"'Eisenberg'\"\n        pepResetConfigurationField=\"'group-buttons-test'\" [resetPosition]=\"'top-end'\" [dir]=\"'ltr'\" [resetHostEvents]=\"hostEvents\" ></pep-group-buttons-settings>\n    <pep-file-status-panel [title]=\"'File download'\" [filesList]=\"files\"></pep-file-status-panel>\n    <!-- <pep-dimx #dimx [DIMXAddonUUID]=\"'b78f61f0-e9f0-4650-9ab1-d8b0906505ec'\" [DIMXResource]=\"'Todos'\"></pep-dimx> -->\n</div>"
        },
        {
            "name": "DIMXComponent",
            "id": "component-DIMXComponent-7a1fd51ee5416945b7eb272ecd027ce3549874bbb67181d458208d1a24cd583be79027be730a18b41074483d960ad8af238af29755ee994ada0afb268bc3ac21",
            "file": "projects/ngx-composite-lib/dimx-export/dimx.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-dimx",
            "styleUrls": [
                "./dimx.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dimx.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "DIMXAddonUUID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "DIMXResource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addonService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DIMXService",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dimxImportOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | undefined",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "fileField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef | undefined",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fileField'"
                        }
                    ]
                },
                {
                    "name": "iFileArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFile[]",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "iFileID",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "toBase64",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 216
                }
            ],
            "methodsClass": [
                {
                    "name": "createNewIFile",
                    "args": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "\"downloading\" | \"uploading\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IFile",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "\"downloading\" | \"uploading\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "DIMXExportRun",
                    "args": [
                        {
                            "name": "value",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dimximportrun",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDIMXExportPOSTBody",
                    "args": [
                        {
                            "name": "value",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ Format: string; IncludeDeleted: boolean; Where: string; Fields: string; Delimiter: string; }",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewFileName",
                    "args": [
                        {
                            "name": "value",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewPFSUploadKey",
                    "args": [
                        {
                            "name": "fileExt",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileExt",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPFSUploadObject",
                    "args": [
                        {
                            "name": "value",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ Key: string; MIME: any; URI: string; }",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pollDIMXResult",
                    "args": [
                        {
                            "name": "pollingURL",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ifile",
                            "type": "IFile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "pollingURL",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ifile",
                            "type": "IFile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "printHello",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeIfileWithDelay",
                    "args": [
                        {
                            "name": "iFile",
                            "type": "IFile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "delay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2000"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "iFile",
                            "type": "IFile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "delay",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2000",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadf",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IFile } from './dimx.model';\nimport { DIMXService } from './dimx.service';\nimport { saveAs } from 'file-saver';\nimport { PepGuid } from '@pepperi-addons/ngx-lib';\n\n@Component({\n    selector: 'pep-dimx',\n    templateUrl: './dimx.component.html',\n    styleUrls: ['./dimx.component.scss']\n})\nexport class DIMXComponent implements OnInit {\n    @ViewChild('fileField') fileField:ElementRef | undefined;\n    @Input() DIMXAddonUUID!: string;\n    @Input() DIMXResource!: string;\n    dimxImportOptions: { OverwriteOBject?: boolean | undefined; Delimiter?: string | undefined; } | undefined;\n    constructor(\n        private translate: TranslateService,\n        public addonService: DIMXService\n    ) {\n\n    }\n\n\n    ngOnInit(): void { \n        // Get the first translation for load all translations.\n        this.translate.get('SHADOW_SETTINGS.INTENSITY_SOFT').toPromise().then((typeSoft) => { console.log(\"something\");\n        });\n    }\n\n    getDIMXExportPOSTBody(value:{\n        DIMXExportFormat?:string,\n        DIMXExportIncludeDeleted?: boolean,\n        DIMXExportFileName?: string,\n        DIMXExportWhere?: string,\n        DIMXExportFields?: string,\n        DIMXExportDelimiter?:string\n    }){\n        return {\n            \"Format\":value.DIMXExportFormat,\n            \"IncludeDeleted\":value.DIMXExportIncludeDeleted,\n            \"Where\":value.DIMXExportWhere,\n            \"Fields\":value.DIMXExportFields,\n            \"Delimiter\":value.DIMXExportDelimiter\n        }\n    }\n\n    printHello(){\n        console.log(\"hello\");\n    }\n\n    async pollDIMXResult(pollingURL:string, ifile:IFile){\n        console.log(`polling audit with the executionUUID: ${pollingURL}`);\n        const delay = (ms: number) => new Promise(res => setTimeout(res, ms));\n        let seconds = 0;\n        const waitingTime = 1000; //in ms\n        try{\n            let result;\n            while(true){\n                result = await this.addonService.papiClient.get(`/audit_logs/${pollingURL}`);\n        \n                console.log(`result from auditlog get is: ${result}`);\n                if( !result || result[\"Status\"][\"ID\"] === 2 || result[\"Status\"][\"ID\"] === 4){\n                    console.log(`waited for ${seconds++} seconds`);\n                    await delay(waitingTime);\n                }\n                else{\n                    break;\n                }\n            }\n            switch(result[\"Status\"][\"ID\"]){\n                case 0:\n                    ifile.status = \"failed\";\n                    throw new Error(result[\"AuditInfo\"][\"ErrorMessage\"]);\n                case 1:\n                    console.log(`polling result: ${result[\"AuditInfo\"][\"ResultObject\"]}`);\n                    return JSON.parse(result[\"AuditInfo\"][\"ResultObject\"]);\n                default:\n                    ifile.status = \"failed\";\n                    throw new Error(`pollDIMXResult: unknown audit log type: ${result[\"Status\"]}`);\n            }\n        }\n        catch(ex){\n            console.log(`pollDIMXResult: ${ex}`);\n            ifile.status = \"failed\";\n            throw new Error((ex as {message:string}).message);\n        }\n    }\n\n    getNewFileName(value:{\n        DIMXExportFormat:string,\n        DIMXExportFileName: string,\n    }){\n        let extension;\n        switch (value.DIMXExportFormat.toLowerCase()){\n            case \"json\":\n                extension = \".json\";\n                break;\n            case \"csv\":\n                extension = '.csv';\n                break;\n            default:\n                extension = \"\";\n        }\n        const filename = value.DIMXExportFileName;\n        return filename+extension;\n    }\n    \n    iFileID = 0;\n    iFileArray:IFile[] = [];\n    createNewIFile(fileName:string , status:\"downloading\"|\"uploading\"):IFile{\n        return {\n            \"key\":this.iFileID++,\n            \"name\":fileName,\n            \"status\":status};\n    }\n\n    async removeIfileWithDelay(iFile:IFile, delay = 2000) {\n        window.setTimeout(() => {\n            const index = this.iFileArray.findIndex(element => element === iFile);\n            if (index >= 0){\n                this.iFileArray.splice(index,1);\n            }\n        }, delay)\n    }\n\n\n    uploadf(e:any){\n        const files = e.target.files;\n        const fileListAsArray = Array.from(files);\n       \n        fileListAsArray.forEach((file, i) => {\n\n        const filex = (file as HTMLInputElement);\n        \n\n\n\n});\n    }\n\n    uploadFile(event:any, options?:{OverwriteOBject?:boolean, Delimiter?:string}){\n        this.dimxImportOptions = options;\n        const elem = document.getElementById(\"fileuploader\");\n   if(elem && document.createEvent) {\n      const evt = document.createEvent(\"MouseEvents\");\n      evt.initEvent(\"click\", true, false);\n      elem.dispatchEvent(evt);\n   }\n        // this.fileField?.nativeElement.click();\n    }   \n\n\n    async dimximportrun(e:any) {\n        console.log(\"Enter DIMXImportRun\");\n        const files = e.target.files;\n        const fileListAsArray = Array.from(files);\n        fileListAsArray.forEach(async (file, i) => {\n\n        const filex = (file as HTMLInputElement);\n        const dimx_import_relativeURL = `/addons/api/44c97115-6d14-4626-91dc-83f176e9a0fc/api/file_import_upload`;\n        const str = (await this.toBase64(filex)) as string; //???\n        const ext = filex.name.split('.')[1];\n        const value = {fileStr:str, fileExt:ext}\n        const dimxUploadObject = {...this.getPFSUploadObject(value), ...this.dimxImportOptions, Resource:this.DIMXResource, AddonUUID:this.DIMXAddonUUID};\n        const iFile:IFile = this.createNewIFile(filex.name, \"uploading\");\n        console.log(`created new iFile: ${iFile}`);\n        this.iFileArray.push(iFile);\n        console.log(`added iFile to iFileArray`);\n        \n        try{\n\n            console.log(\"posting to dimx import_upload now\");\n            const res = await this.addonService.papiClient.post(dimx_import_relativeURL, dimxUploadObject);\n            console.log(\"Got reply from dimx, calling poll with the result:\");\n            console.log(res);\n\n            const poll_result = await this.pollDIMXResult(res['ExecutionUUID'], iFile);\n\n            console.log(`done polling, got result: ${JSON.stringify(poll_result)}`);\n            iFile.status = \"done\";\n            console.log(\"Imported the file\");\n            await this.removeIfileWithDelay(iFile);\n\n        }\n        catch(ex){\n            console.log(`DIMXImportRun: ${ex}`);\n            iFile.status = \"failed\";\n            await this.removeIfileWithDelay(iFile, 2000);\n            throw new Error((ex as {message:string}).message);\n        }\n        \n        \n        \n        });\n    }\n    getNewPFSUploadKey(fileExt:string){\n        const uuid = PepGuid.newGuid();\n        const folder = 'DIMX_import';\n        const pfsKey = `/${folder}/${uuid}.${fileExt}`;\n        return pfsKey;\n    }\n    getPFSUploadObject(value:{fileStr:string, fileExt:string}){\n        const fileStrArr = value.fileStr.split(';');\n        const mime = fileStrArr[0].split(':')[1];\n        const pfsKey = this.getNewPFSUploadKey(value.fileExt);\n        const pfsUploadObject = {\n            \"Key\": pfsKey,\n            \"MIME\": mime,\n            \"URI\":value.fileStr\n        }\n        return pfsUploadObject;\n    }\n\n    toBase64 = (file:any) => new Promise((resolve, reject) => {\n\n        const reader = new FileReader();\n        \n        reader.readAsDataURL(file);\n        \n        reader.onload = () => resolve(reader.result);\n        \n        reader.onerror = error => reject(error);\n        \n        });\n\n    async DIMXExportRun(value: {\n        DIMXExportFormat?:string,\n        DIMXExportIncludeDeleted?: boolean,\n        DIMXExportFileName?: string,\n        DIMXExportWhere?: string,\n        DIMXExportFields?: string,\n        DIMXExportDelimiter?:string\n    }) {\n        if (!value){\n            value = {};\n        }\n        if (!value.DIMXExportFormat){\n            value.DIMXExportFormat = 'json';\n        }\n        if (!value.DIMXExportIncludeDeleted){\n            value.DIMXExportIncludeDeleted = false;\n        }\n        if (!value.DIMXExportFileName){\n            value.DIMXExportFileName = 'export';\n        }\n        const bod = this.getDIMXExportPOSTBody(value ? value : {});\n        const fileName = this.getNewFileName(value as {DIMXExportFormat:string, DIMXExportFileName:string});\n        const iFile:IFile = this.createNewIFile(fileName, \"downloading\");\n        console.log(`created new iFile: ${iFile}`);\n        this.iFileArray.push(iFile);\n        console.log(`added iFile to iFileArray`);\n     \n        try{\n\n            console.log(\"posting to dimx export now\");\n            const res = await this.addonService.papiClient.post(`/addons/data/export/file/${this.DIMXAddonUUID}/${this.DIMXResource}`, bod);\n            console.log(\"Got reply from dimx, calling poll with the result:\");\n            console.log(res);\n\n            const url = (await this.pollDIMXResult(res['ExecutionUUID'], iFile))[\"DownloadURL\"];\n\n            console.log(\"attempting to download the file\");\n            console.log(`url is: ${url}`);\n            const blob = await fetch(url).then(r => r.blob());\n            saveAs(blob, fileName);\n            iFile.status = \"done\";\n            console.log(\"downloaded the file\");\n            await this.removeIfileWithDelay(iFile);\n        }\n        catch(ex){\n            iFile.status= \"failed\";\n            await this.removeIfileWithDelay(iFile);\n            console.log(`buttonClick: ${ex}`);\n            throw new Error((ex as {message:string}).message);\n        }\n        \n    }\n\n   \n\n   \n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~@pepperi-addons/ngx-lib/src/core/style/abstracts/variables';\n\n:host {\n    width: 100%;\n    // max-width: 200px;\n\n    .shadow-size-group,\n    .shadow-type-group {\n        display: block;\n        margin-bottom: $form-spacing;\n    }\n}",
                    "styleUrl": "./dimx.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "addonService",
                        "type": "DIMXService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "addonService",
                        "type": "DIMXService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<pep-file-status-panel [title]=\"'File Imports/Exports'\" *ngIf=\"iFileArray?.length\" [filesList]=\"iFileArray\"></pep-file-status-panel>\n<input type=\"file\" multiple=\"multiple\" name=\"avatars\" id=\"fileuploader\" #fileField (change)=\"dimximportrun($event)\">\n<!-- <pep-button\n  value=\"export\"\n  styleType=\"strong\"\n  styleStateType=\"success\"\n  sizeType=\"sm\"\n  classNames=\"hahah\"\n  iconName=\"system_doc\"\n  (buttonClick)=\"buttonClick($event)\"\n></pep-button> -->"
        },
        {
            "name": "FileStatusPanelComponent",
            "id": "component-FileStatusPanelComponent-2bb80880bff508aaaa8073d4d1eb327fa8c53a6d6f25e0509127a14a78f3eab62c4f6609bb95d4740d70afed9511fcd00118bd2978a128fa61da43faa2cc7ccd",
            "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-file-status-panel",
            "styleUrls": [
                "./file-status-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-status-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "filesList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Array<IFile>",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "translate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TranslateService",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Injectable, Input, Output, EventEmitter, Optional, Inject } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IFile } from './file-status-panel.model';\n\n@Component({\n    selector: 'pep-file-status-panel',\n    templateUrl: './file-status-panel.component.html',\n    styleUrls: ['./file-status-panel.component.scss']\n})\n\nexport class FileStatusPanelComponent implements OnInit {\n    \n    @Input() title = '';\n    @Input() filesList: Array<IFile> = [];\n    \n    constructor( public translate: TranslateService) {\n       //\n    }\n\n    ngOnInit() {\n        //\n    }\n\n    closeClick(event: any): void {\n        //\n    }\n\n\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#uploadPanelCont{\n    position: absolute;\n    bottom: 10px;\n    right: 2.5rem;\n    width: 22rem;\n    padding: 1rem;\n    min-height: 7rem;\n    background: rgb(255, 255, 255);\n    border: 1px solid rgb(89, 89, 89);\n    box-shadow: 0px 0px 16px 0px rgba(0, 0, 0, 0.24);\n    border-radius: .25rem;\n    z-index: 9999;\n\n.panel-header{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    height: 2.5rem;\n\n        ::ng-deep{\n            .roundCorners{\n                border-radius: 1.5rem;\n            }\n        }\n    }\n}\n.panel-content{\n\n    max-height: 50vh;\n    overflow: auto;\n\n    ul{\n      list-style-type: none;\n      padding: 0;  \n\n      li{\n          height: 1.25rem;\n          margin-top: .5rem;\n          display: flex;\n          flex-direction: row;\n        \n          .done{\n              color: Green !important;\n          }\n          \n        ::ng-deep{\n            .xxs-btn{\n                min-width: 1rem !important;\n                height: 1.3rem;\n                pep-icon{\n                    \n                    width: .75rem !important;\n                }\n            } \n        }\n      }\n      \n    }\n}\n\n",
                    "styleUrl": "./file-status-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"filesList.length\" id=\"uploadPanelCont\">\n    <div class=\"panel-header pep-border-bottom\">\n        <label class=\"body-md ellipsis\">{{title}}</label>\n        <pep-button\n            styleType=\"weak\"\n            styleStateType=\"system\"\n            sizeType=\"xs\"\n            classNames=\"roundCorners\"\n            [disabled]=\"false\"\n            iconName=\"system_close\"\n            iconPosition=\"end\"\n            [visible]=\"true\"\n            (buttonClick)=\"closeClick($event)\">\n        </pep-button>\n    </div>\n    <div class=\"panel-content\">\n        <ul>\n            <ng-container *ngFor=\"let file of filesList\">\n            <li *ngIf=\"file?.status !== 'hidden'\">\n               \n                <span class=\"color-dimmed body-sm ellipsis\">{{file.name}}</span>\n                <pep-button\n                    styleType=\"weak-invert\"\n                    styleStateType=\"system\"\n                    classNames=\"xxs-btn\"\n                    [disabled]=\"false\"\n                    iconName=\"arrow_right_alt\">\n                </pep-button>\n                <span class=\"body-sm\">{{file.status}}</span>\n            \n            </li>\n        </ng-container>\n        </ul>\n    </div>\n</div>\n"
        },
        {
            "name": "GenericListComponent",
            "id": "component-GenericListComponent-c7561e5855f28c5c3be86b9d42b6ccff4fcbffa42556c90ed15a9e407cc033734a216083e1cecc6c2a61aab88799c5dc8d0a8459ccb5a71ec8146a4ec9075b8f",
            "file": "projects/ngx-composite-lib/generic-list/generic-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-generic-list",
            "styleUrls": [
                "./generic-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./generic-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actions",
                    "defaultValue": "{\n        get: async (data: any) => {\n            return []\n        }\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "IPepGenericListActions",
                    "decorators": []
                },
                {
                    "name": "addPadding",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "breadCrumbsItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 131,
                    "type": "PepBreadCrumbItem[]",
                    "decorators": []
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "inline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 102,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "noDataFoundMsg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 108,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "pager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 123,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "selectionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 113,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "showSearch",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showTopBar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 128,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "supportSorting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 118,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 99,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "uuidMapping",
                    "defaultValue": "'key'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "breadCrumbItemClick",
                    "defaultValue": "new EventEmitter<IPepBreadCrumbItemClickEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 140,
                    "type": "EventEmitter"
                },
                {
                    "name": "fieldClick",
                    "defaultValue": "new EventEmitter<IPepFormFieldClickEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 134,
                    "type": "EventEmitter"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<IPepFormFieldValueChangeEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 137,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_dataSource",
                    "defaultValue": "{\n        init: async (params: any) => {\n            return {\n                dataView: {\n                    Type: 'Grid'\n                },\n                totalCount: -1,\n                items: []\n            }\n        }\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListDataSource",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "_dataView",
                    "defaultValue": "{\n        Type: 'Grid'\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GridDataView",
                    "optional": false,
                    "description": "",
                    "line": 152,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_pepListContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef | undefined",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_resize$",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 150,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_sorting",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepListSortingChangeEvent | undefined",
                    "optional": false,
                    "description": "",
                    "line": 165,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_tableInputs",
                    "defaultValue": "{\n        supportSorting: false,\n        selectionType: 'single',\n        pager: {\n            type: 'scroll'\n        },\n        noDataFoundMsg: ''\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListTableInputs",
                    "optional": false,
                    "description": "",
                    "line": 155,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "menuActions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<PepMenuItem>",
                    "optional": false,
                    "description": "",
                    "line": 168
                },
                {
                    "name": "menuHandlers",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 167
                },
                {
                    "name": "searchString",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 164
                },
                {
                    "name": "totalRowCount",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 163
                }
            ],
            "methodsClass": [
                {
                    "name": "convertToPepRowData",
                    "args": [
                        {
                            "name": "object",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dataView",
                            "type": "GridDataView",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 308,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataView",
                            "type": "GridDataView",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToUiControlField",
                    "args": [
                        {
                            "name": "field",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ ApiName: any; FieldType: any; Title: any; ReadOnly: any; ColumnWidth: any; ColumnWidthType: number; Layout: { X: any; Y: any; Width: any; Height: any; XAlignment: any; YAlignment: any; }; }",
                    "typeParameters": [],
                    "line": 334,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMenuActions",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<PepMenuItem[]>",
                    "typeParameters": [],
                    "line": 353,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ]
                },
                {
                    "name": "getMenuObjects",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 372,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getUiControl",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UIControl",
                    "typeParameters": [],
                    "line": 291,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasProperty",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 266,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks if the object contains property\n",
                    "description": "<p>checks if the object contains property</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7979,
                                "end": 7982,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "obj"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7973,
                                "end": 7978,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>object</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8003,
                                "end": 8007,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "prop"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7997,
                                "end": 8002,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>property name</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 8029,
                                "end": 8036,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if contains, false otherwise</p>\n"
                        }
                    ]
                },
                {
                    "name": "initTable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ]
                },
                {
                    "name": "loadData",
                    "args": [
                        {
                            "name": "fromIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "toIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<IPepGenericListInitData>",
                    "typeParameters": [],
                    "line": 419,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "fromIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadMenuItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loadTableInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 274,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nloads callback inputs in case they are provided and merge with selector inputs\n",
                    "description": "<p>loads callback inputs in case they are provided and merge with selector inputs</p>\n",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 8301,
                                "end": 8308,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>merged pep-list inputs</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 479,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBreadCrumbItemClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepBreadCrumbItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 406,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepBreadCrumbItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCustomizeFieldClick",
                    "args": [
                        {
                            "name": "fieldClickEvent",
                            "type": "IPepFormFieldClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 402,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldClickEvent",
                            "type": "IPepFormFieldClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLoadItems",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepListLoadItemsEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 462,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nloads virtual scroll items from api\n",
                    "description": "<p>loads virtual scroll items from api</p>\n",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepListLoadItemsEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLoadPage",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepListLoadPageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 471,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nloads paging bulk from api\n",
                    "description": "<p>loads paging bulk from api</p>\n",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepListLoadPageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMenuItemClicked",
                    "args": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 386,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepSearchClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 393,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepSearchClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectedRowsChanged",
                    "args": [
                        {
                            "name": "selectedRowsCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 398,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedRowsCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSortingChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepListSortingChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 414,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepListSortingChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onValueChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepFormFieldValueChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 410,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepFormFieldValueChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDataList",
                    "args": [
                        {
                            "name": "fromIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "toIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageIndex",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 439,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "fromIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageIndex",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    OnInit,\n    ViewChild,\n    Input,\n    Output,\n    EventEmitter,\n    ViewContainerRef,\n    ComponentFactoryResolver\n} from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n    PepDataConvertorService,\n    PepLayoutService,\n    PepRowData,\n    ObjectsDataRow,\n    PepGuid,\n    UIControl,\n} from '@pepperi-addons/ngx-lib';\nimport { IPepFormFieldClickEvent } from '@pepperi-addons/ngx-lib/form';\nimport {\n    PepListComponent,\n    PepSelectionData,\n    IPepListLoadPageEvent,\n    PepListSelectionType,\n    IPepListSortingChangeEvent,\n    DEFAULT_PAGE_SIZE,\n    IPepListLoadItemsEvent\n} from '@pepperi-addons/ngx-lib/list';\nimport {\n    PepMenuItem,\n    IPepMenuItemClickEvent,\n} from '@pepperi-addons/ngx-lib/menu';\nimport { IPepFormFieldValueChangeEvent } from '@pepperi-addons/ngx-lib/form';\nimport {\n    PepBreadCrumbItem,\n    IPepBreadCrumbItemClickEvent\n} from '@pepperi-addons/ngx-lib/bread-crumbs';\nimport { IPepSearchClickEvent } from '@pepperi-addons/ngx-lib/search';\n\nimport { GridDataViewField, DataViewFieldTypes, GridDataView } from '@pepperi-addons/papi-sdk/dist/entities/data-view';\nimport {\n    IPepGenericListInitData,\n    IPepGenericListDataSource,\n    IPepGenericListPager,\n    IPepGenericListActions,\n    IPepGenericListTableInputs,\n} from './generic-list.model';\nimport { DataViewConverter } from '@pepperi-addons/data-views';\nimport { Subscription } from 'rxjs';\nimport { PepGenericListService } from './generic-list.service';\n\n\n@Component({\n    selector: 'pep-generic-list',\n    templateUrl: './generic-list.component.html',\n    styleUrls: ['./generic-list.component.scss']\n})\nexport class GenericListComponent implements OnInit {\n    private _pepListContainer: ViewContainerRef | undefined;\n    @ViewChild('pepListContainer', { read: ViewContainerRef })\n    set pepListContainer(val: ViewContainerRef) {\n        this._pepListContainer = val;\n    }\n\n    _dataSource: IPepGenericListDataSource = {\n        init: async (params: any) => {\n            return {\n                dataView: {\n                    Type: 'Grid'\n                },\n                totalCount: -1,\n                items: []\n            }\n        }\n    }\n    @Input()\n    set dataSource(val: IPepGenericListDataSource) {\n        this._dataSource = val;\n        this.searchString = '';\n        this._sorting = undefined;\n        this.initTable();\n    }\n\n    @Input()\n    actions: IPepGenericListActions = {\n        get: async (data: any) => {\n            return []\n        }\n    };\n\n    @Input()\n    uuidMapping = 'key';\n\n    @Input()\n    addPadding = false;\n\n    @Input()\n    title = '';\n\n    @Input()\n    inline = false;\n\n    @Input()\n    showSearch = false;\n\n    @Input()\n    set noDataFoundMsg(val: string) {\n        this._tableInputs.noDataFoundMsg = val;\n    }\n\n    @Input()\n    set selectionType(val: PepListSelectionType) {\n        this._tableInputs.selectionType = val;\n    }\n\n    @Input()\n    set supportSorting(val: boolean) {\n        this._tableInputs.supportSorting = val;\n    }\n\n    @Input()\n    set pager(val: IPepGenericListPager) {\n        this._tableInputs.pager = val;\n    }\n\n    @Input()\n    showTopBar = false;\n\n    @Input()\n    breadCrumbsItems: PepBreadCrumbItem[] = [];//new Array<PepBreadCrumbItem>();\n\n    @Output()\n    fieldClick = new EventEmitter<IPepFormFieldClickEvent>();\n\n    @Output()\n    valueChange = new EventEmitter<IPepFormFieldValueChangeEvent>();\n\n    @Output()\n    breadCrumbItemClick = new EventEmitter<IPepBreadCrumbItemClickEvent>();\n\n    set pepList(val: PepListComponent) {\n        this._genericListService.pepList = val;\n    }\n\n    get pepList() {\n        return this._genericListService.pepList;\n    }\n\n    private _resize$: Subscription = new Subscription();\n\n    private _dataView: GridDataView = {\n        Type: 'Grid'\n    };\n    private _tableInputs: IPepGenericListTableInputs = {\n        supportSorting: false,\n        selectionType: 'single',\n        pager: {\n            type: 'scroll'\n        },\n        noDataFoundMsg: ''\n    };\n    totalRowCount = -1;\n    searchString = '';\n    private _sorting: IPepListSortingChangeEvent | undefined = undefined;\n\n    menuHandlers: { [key: string]: (obj: any) => Promise<void> } = {};\n    menuActions: Array<PepMenuItem> = [];\n\n    constructor(\n        private _resolver: ComponentFactoryResolver,\n        private _genericListService: PepGenericListService,\n        private _dataConvertorService: PepDataConvertorService,\n        private _layoutService: PepLayoutService,\n        private _translate: TranslateService\n    ) {\n        this._resize$ = this._layoutService.onResize$.pipe().subscribe((size) => {\n            //            \n        });\n    }\n\n    ngOnInit() {\n        //\n    }\n\n    private async initTable() {\n        setTimeout(async () => {\n            if (this._dataSource &&\n                this._pepListContainer) {\n\n                if (this._pepListContainer.length > 0) {\n                    this._pepListContainer.remove();\n                }\n                const factory = this._resolver.resolveComponentFactory(PepListComponent);\n                const componentRef = this._pepListContainer.createComponent(factory);\n                this.pepList = componentRef.instance;\n\n                //merge selector inputs with callback inputs\n                const tableInputs = await this.loadTableInputs();\n\n                const fromIndex = 0;\n                let toIndex = 0;\n\n                if (tableInputs.pager?.type === 'pages') {\n                    toIndex = fromIndex + (tableInputs.pager?.size || DEFAULT_PAGE_SIZE) - 1;\n                } else {\n                    toIndex = 100;//TO DO - get reesult from - this.customList.getTopItems()\n                }\n\n                const data = await this.loadData(fromIndex, toIndex);\n                this.totalRowCount = data?.totalCount || 0;\n\n                componentRef.instance.viewType = 'table';\n                componentRef.instance.supportSorting = tableInputs.supportSorting;\n                componentRef.instance.selectionTypeForActions = tableInputs.selectionType;\n                componentRef.instance.pagerType = tableInputs.pager.type;\n                if (tableInputs.pager.type === 'pages') {\n                    componentRef.instance.pageSize = tableInputs.pager?.size || DEFAULT_PAGE_SIZE;\n                    componentRef.instance.pageIndex = tableInputs.pager?.index || 0;\n                }\n                componentRef.instance.noDataFoundMsg = tableInputs.noDataFoundMsg;\n                \n                componentRef.instance.fieldClick.subscribe(($event) => {\n                    this.onCustomizeFieldClick($event);\n                });\n\n                componentRef.instance.selectedItemsChange.subscribe(($event) => {\n                    this.onSelectedRowsChanged($event);\n                })\n\n                componentRef.instance.loadItems.subscribe(($event) => {\n                    this.onLoadItems($event);\n                });\n\n                componentRef.instance.loadPage.subscribe(($event) => {\n                    this.onLoadPage($event);\n                });\n\n                componentRef.instance.valueChange.subscribe(($event) => {\n                    this.onValueChanged($event)\n                });\n\n                componentRef.instance.sortingChange.subscribe(($event) => {\n                    this.onSortingChange($event);\n                });\n\n                let convertedList: ObjectsDataRow[] = [];\n                if (data) {\n                    if (data?.items?.length > 0) {\n                        convertedList = this._dataConvertorService.convertListData(data.items);\n                    }\n                    const uiControl = this.getUiControl(DataViewConverter.toUIControlData(data.dataView));\n                    componentRef.instance.initListData(uiControl, data.totalCount, convertedList);\n                }\n            }\n        }, 0);\n\n    }\n\n    /**\n    * checks if the object contains property\n    * @param obj object\n    * @param prop property name\n    * @returns true if contains, false otherwise\n    */\n    private hasProperty(obj: any, prop: string) {\n        return Object.prototype.hasOwnProperty.call(obj, prop);\n    }\n\n    /**\n     * loads callback inputs in case they are provided and merge with selector inputs\n     * @returns merged pep-list inputs\n     */\n    private async loadTableInputs() {\n        const tableInputs: any = { ...this._tableInputs };\n\n        if (this._dataSource.inputs) {\n            const inputs: IPepGenericListTableInputs = await this._dataSource.inputs();\n            if (inputs) {\n                Object.entries(inputs).forEach((item: any) => {\n                    if (this.hasProperty(tableInputs, item[0])) {\n                        tableInputs[item[0]] = item[1];\n                    }\n                });\n            }\n        }\n\n        return tableInputs;\n    }\n  \n    private getUiControl(data: any): UIControl {\n        const uiControl = new UIControl();\n        uiControl.ControlFields = [];\n\n        if (data?.ControlFields) {\n            uiControl.ControlFields = data.ControlFields.map((field: any) => this.convertToUiControlField(field));\n        }\n\n        return uiControl;\n    }\n\n    private loadMenuItems(): void {\n        if (this._tableInputs.selectionType !== 'none') {\n            this.getMenuActions().then(x => this.menuActions = x);\n        }\n    }\n\n    private convertToPepRowData(object: any, dataView: GridDataView) {\n        const row = new PepRowData();\n        row.UUID = object[this.uuidMapping] || undefined;\n        row.Fields = [];\n\n        if (dataView?.Fields && dataView.Columns) {\n            for (let index = 0; index < dataView.Fields.length; index++) {\n                const field = dataView.Fields[index] as GridDataViewField\n                row.Fields.push({\n                    ApiName: field.FieldID,\n                    Title: this._translate.instant(field.Title),\n                    XAlignment: 1,\n                    FormattedValue: (object[field.FieldID] || '').toString(),\n                    Value: (object[field.FieldID] || '').toString(),\n                    ColumnWidth: dataView.Columns[index].Width,\n                    AdditionalValue: '',\n                    OptionalValues: [],\n                    FieldType: DataViewFieldTypes[field.Type],\n                    ReadOnly: field.ReadOnly,\n                    Enabled: !field.ReadOnly\n                })\n            }\n        }\n        return row;\n    }\n\n    private convertToUiControlField(field: any) {\n        return {\n            ApiName: field.ApiName,\n            FieldType: field.FieldType,\n            Title: field.Title,\n            ReadOnly: field.ReadOnlyField,\n            ColumnWidth: field.ColumnWidth,\n            ColumnWidthType: 1,\n            Layout: {\n                X: field.Layout.X,\n                Y: field.Layout.Y,\n                Width: field.Layout.Width,\n                Height: field.Layout.Field_Height,\n                XAlignment: field.Layout.xAlignment,\n                YAlignment: field.Layout.yAlignment,\n            }\n        }\n    }\n\n    private async getMenuActions(): Promise<PepMenuItem[]> {\n        const res: PepMenuItem[] = [];\n        const result = this.getMenuObjects();\n        if (result.success) {\n            const actions = await this.actions.get(result.data);\n            this.menuHandlers = {};\n            actions?.forEach(item => {\n                const uuid = PepGuid.newGuid();\n                this.menuHandlers[uuid] = item.handler;\n                res.push({\n                    key: uuid,\n                    text: item.title\n                })\n            })\n        }\n\n        return res;\n    }\n\n    private getMenuObjects() {\n        const menuObjects: any = {\n            success: false,\n            data: new PepSelectionData()\n        };\n\n        if (this.pepList) {\n            menuObjects.success = true;\n            menuObjects.data = this.pepList.getSelectedItemsData();\n        }\n      \n        return menuObjects;\n    }\n\n    onMenuItemClicked(action: IPepMenuItemClickEvent): void {\n        const result = this.getMenuObjects();\n        if (result.success) {\n            this.menuHandlers[action.source.key](result.data);\n        }\n    }\n\n    onSearchChanged(event: IPepSearchClickEvent) {\n        this.searchString = event.value;\n        this.initTable();\n    }\n\n    onSelectedRowsChanged(selectedRowsCount: number) {\n        this.loadMenuItems();\n    }\n\n    onCustomizeFieldClick(fieldClickEvent: IPepFormFieldClickEvent) {\n        this.fieldClick.emit(fieldClickEvent);\n    }\n\n    onBreadCrumbItemClick(event: IPepBreadCrumbItemClickEvent) {\n        this.breadCrumbItemClick.emit(event);\n    }\n\n    onValueChanged(event: IPepFormFieldValueChangeEvent) {\n        this.valueChange.emit(event);\n    }\n\n    onSortingChange(event: IPepListSortingChangeEvent) {\n        this._sorting = event;\n        this.initTable();\n    }\n\n    private async loadData(fromIndex: number, toIndex: number): Promise<IPepGenericListInitData> {\n        const data: IPepGenericListInitData = await this._dataSource.init({\n            searchString: this.searchString || undefined,\n            sorting: this._sorting || undefined,\n            fromIndex: fromIndex,\n            toIndex: toIndex\n        });\n\n        if (data) {\n            this._dataView = data.dataView;\n\n            if (data.items?.length > 0) {\n                data.items = data.items.map(item => this.convertToPepRowData(item, data.dataView));\n            }\n        }\n\n        return data;\n    }\n\n\n    private async updateDataList(fromIndex: number, toIndex: number, pageIndex: number | undefined = undefined) {\n        if (this._dataSource.update) {\n            const dataList = await this._dataSource.update({\n                searchString: this.searchString || undefined,\n                sorting: this._sorting || undefined,\n                fromIndex: fromIndex,\n                toIndex: toIndex,\n                pageIndex: pageIndex\n            });\n\n            if (dataList?.length > 0) {\n                return dataList.map(item => this.convertToPepRowData(item, this._dataView));\n            } else {\n                return [];\n            }\n        } else {\n            return [];\n        }\n    }\n\n    /**\n     * loads virtual scroll items from api\n     */\n    async onLoadItems(event: IPepListLoadItemsEvent) {\n        const list = await this.updateDataList(event.fromIndex, event.toIndex);\n        const convertedList = this._dataConvertorService.convertListData(list);\n        this.pepList.updateItems(convertedList, event);\n    }\n\n    /**\n     * loads paging bulk from api\n     */\n    async onLoadPage(event: IPepListLoadPageEvent) {\n        const fromIndex = event.pageIndex * event.pageSize;\n        const toIndex = Math.min(fromIndex + event.pageSize - 1, this.totalRowCount - 1);\n        const list = await this.updateDataList(fromIndex, toIndex, event.pageIndex);\n        const convertedList = this._dataConvertorService.convertListData(list);\n        this.pepList.updatePage(convertedList, event);\n    }\n\n    ngOnDestroy() {\n        if (this._resize$) {\n            this._resize$.unsubscribe();\n        }\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n@use '~@pepperi-addons/ngx-lib/src/core/style/abstracts/variables' as ngx-variables;\r\n\r\n:host {\r\n    height: inherit;\r\n    display: block;\r\n}\r\n\r\n.main-area-container {\r\n    display: grid;\r\n    height: inherit;\r\n}\r\n\r\n.list-container {\r\n    height: 100%;\r\n}\r\n\r\n.inline-container {\r\n    height: inherit;\r\n    display: grid;\r\n    grid-template-rows: auto 1fr;\r\n\r\n    &.add-padding {\r\n        padding-inline: ngx-variables.$content-padding;\r\n    }\r\n\r\n    ::ng-deep.pep-top-bar-container.inline {\r\n        height: auto;\r\n        overflow: hidden;\r\n    }\r\n    \r\n}\r\n\r\n.noDataFoundMsg{\r\n    height: 100%;\r\n    width: 100%;\r\n    background: hsla(0, 0%, 10%, 0.12);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.bread-crumbs {\r\n   padding: ngx-variables.$spacing-lg 0 ngx-variables.$spacing-sm 0;\r\n}\r\n",
                    "styleUrl": "./generic-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_resolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_genericListService",
                        "type": "PepGenericListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_dataConvertorService",
                        "type": "PepDataConvertorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 168,
                "jsdoctags": [
                    {
                        "name": "_resolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_genericListService",
                        "type": "PepGenericListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_dataConvertorService",
                        "type": "PepDataConvertorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_layoutService",
                        "type": "PepLayoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "pepListContainer": {
                    "name": "pepListContainer",
                    "setSignature": {
                        "name": "pepListContainer",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "ViewContainerRef",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 62,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "ViewContainerRef",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "dataSource": {
                    "name": "dataSource",
                    "setSignature": {
                        "name": "dataSource",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "IPepGenericListDataSource",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 78,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "IPepGenericListDataSource",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "noDataFoundMsg": {
                    "name": "noDataFoundMsg",
                    "setSignature": {
                        "name": "noDataFoundMsg",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 108,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "selectionType": {
                    "name": "selectionType",
                    "setSignature": {
                        "name": "selectionType",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "PepListSelectionType",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 113,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "PepListSelectionType",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "supportSorting": {
                    "name": "supportSorting",
                    "setSignature": {
                        "name": "supportSorting",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 118,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "pager": {
                    "name": "pager",
                    "setSignature": {
                        "name": "pager",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "IPepGenericListPager",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 123,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "IPepGenericListPager",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "pepList": {
                    "name": "pepList",
                    "setSignature": {
                        "name": "pepList",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "PepListComponent",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 142,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "PepListComponent",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "pepList",
                        "type": "",
                        "returnType": "",
                        "line": 146
                    }
                }
            },
            "templateData": "<div *ngIf=\"inline\" class=\"inline-container\" [ngClass]=\"{ 'add-padding': addPadding }\">\n    <div>\n        <div *ngIf=\"showTopBar\" class=\"inline-top-bar-container\">\n            <ng-container *ngTemplateOutlet=\"topBarTemplate\"></ng-container>\n        </div>\n        <ng-container *ngIf=\"breadCrumbsItems.length > 0\">\n            <ng-container *ngTemplateOutlet=\"breadCrumbsTemplate\"></ng-container>\n        </ng-container>\n    </div>\n    <ng-container *ngTemplateOutlet=\"listTemplate\"></ng-container>\n</div>\n\n<pep-page-layout *ngIf=\"!inline\" [addPadding]=\"addPadding\">\n    <ng-container *ngIf=\"showTopBar\" pep-top-area>\n        <ng-container *ngTemplateOutlet=\"topBarTemplate\"></ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"breadCrumbsItems.length > 0\" pep-top-area>\n        <ng-container *ngTemplateOutlet=\"breadCrumbsTemplate\"></ng-container>\n    </ng-container>\n    <div pep-main-area class=\"main-area-container\">\n        <ng-container *ngTemplateOutlet=\"listTemplate\"></ng-container>\n    </div>\n</pep-page-layout>\n\n<ng-template #topBarTemplate>\n    <pep-top-bar [title]=\"title\" [inline]=\"inline\">\n        <div header-start-content>\n            <ng-content select=\"[left-buttons]\"></ng-content>\n        </div>\n        <div header-end-content>\n            <ng-content select=\"[right-buttons]\"></ng-content>\n        </div>\n\n        <!-- <ng-content header-start-content select=\"[header-start-content]\"></ng-content>\n        \n        <div *ngIf=\"footerState === 'hidden'\" left-buttons>\n            <pep-button [value]=\"'toggle menu'\" [classNames]=\"'pep-spacing-element'\" (click)=\"toggleMenu()\">\n            </pep-button>\n            <pep-button [classNames]=\"'pep-spacing-element '\" [value]=\"'Add filters'\" [iconName]=\"'system_bolt'\"\n                (click)=\"addFilters()\">\n            </pep-button>\n        </div> \n\n        <div header-end-content>\n            <ng-content select=\"[header-end-content]\"></ng-content>\n        </div>-->\n        <pep-list-actions [sizeType]=\"inline ? 'sm' : 'md'\" [actions]=\"menuActions\"\n            (actionClick)=\"onMenuItemClicked($event)\"></pep-list-actions>\n        <pep-list-total [sizeType]=\"inline ? 'sm' : 'md'\" [totalRows]=\"totalRowCount\">\n        </pep-list-total>\n\n        <pep-search *ngIf=\"showSearch\" [value]=\"searchString\" [sizeType]=\"inline ? 'sm' : 'md'\"\n            (search)=\"onSearchChanged($event)\">\n        </pep-search>\n    </pep-top-bar>\n</ng-template>\n\n<ng-template #breadCrumbsTemplate>\n    <pep-bread-crumbs class=\"bread-crumbs\" [items]=\"breadCrumbsItems\" [addSpacing]=\"true\" [displayType]=\"'items'\"\n        (itemClick)=\"onBreadCrumbItemClick($event)\"></pep-bread-crumbs>\n</ng-template>\n\n<ng-template #listTemplate>\n    <div class=\"list-container\">\n        <ng-container #pepListContainer></ng-container>\n    </div>\n</ng-template>"
        },
        {
            "name": "GenericListExampleComponent",
            "id": "component-GenericListExampleComponent-c7cbb6526c5be4ebff426b9014d18596ffc772142aba677cdf52e54c48bd583895fe57eb9bee5e5ee2898409b8b7daf1e4dd920d046d077088e9e38844731c57",
            "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/generic-list-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-generic-list-example",
            "styleUrls": [
                "./generic-list-example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./generic-list-example.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "defaultValue": "{\n        get: async (data: PepSelectionData) => {\n            if (data?.rows.length === 1 && data?.selectionType !== 0) {\n                return [\n                    {\n                        title: 'Edit',\n                        handler: async (ddd) => {\n                            alert('edit');\n                        }\n                    },\n                    {\n                        title: 'Delete',\n                        handler: async (ddd) => {\n                            alert('delete');\n                        }\n                    }\n                ]\n            } else if (data?.rows.length > 1 || data?.selectionType === 0) {\n                return [\n                    {\n                        title: 'Delete',\n                        handler: async (ddd) => {\n                            alert('delete');\n                        }\n                    }\n                ]\n            } else return [];\n        }\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListActions",
                    "optional": false,
                    "description": "",
                    "line": 177
                },
                {
                    "name": "breadCrumbsItems",
                    "defaultValue": "new Array<PepBreadCrumbItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "dataSource",
                    "defaultValue": "{\n        init: async (params: any) => {\n            return {\n                dataView: {\n                    Type: 'Grid'\n                },\n                totalCount: -1,\n                items: []\n            }\n        }\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListDataSource",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "firstFieldAsLink",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "menuItems",
                    "defaultValue": "new Array<PepMenuItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "pager",
                    "defaultValue": "{\n        type: 'pages',\n        size: 10,\n        index: 0\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPepGenericListPager",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "selectionType",
                    "defaultValue": "'multi'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "supportSorting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "getDataSource",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepGenericListDataSource",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDataSourceEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "IPepGenericListDataSource",
                    "typeParameters": [],
                    "line": 325,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLinkColumn",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRegularReadOnlyColumn",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadBreadCrumbs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBreadCrumbClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepBreadCrumbItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepBreadCrumbItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMenuItemClicked",
                    "args": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "IPepMenuItemClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, AfterViewInit, ViewChild } from '@angular/core';\nimport { IPepMenuItemClickEvent, PepMenuItem } from '@pepperi-addons/ngx-lib/menu';\nimport {\n    IPepGenericListDataSource,\n    IPepGenericListPager,\n    IPepGenericListActions, IPepGenericListInitData, PepGenericListService\n\n} from '@pepperi-addons/ngx-composite-lib/generic-list';\n\nimport { PepSelectionData, DEFAULT_PAGE_SIZE } from '@pepperi-addons/ngx-lib/list';\nimport { TranslateService } from '@ngx-translate/core';\nimport { GenericListComponent } from '@pepperi-addons/ngx-composite-lib/generic-list';\nimport { PepBreadCrumbItem, IPepBreadCrumbItemClickEvent } from '@pepperi-addons/ngx-lib/bread-crumbs';\nimport { FakeData } from './fake-data';\n\n\n@Component({\n    selector: 'app-generic-list-example',\n    templateUrl: './generic-list-example.component.html',\n    styleUrls: ['./generic-list-example.component.scss']\n})\nexport class GenericListExampleComponent implements OnInit {\n    //@ViewChild(GenericListComponent) pList: GenericListComponent | undefined;\n    dataSource: IPepGenericListDataSource = {\n        init: async (params: any) => {\n            return {\n                dataView: {\n                    Type: 'Grid'\n                },\n                totalCount: -1,\n                items: []\n            }\n        }\n    };\n    menuItems = new Array<PepMenuItem>();\n    breadCrumbsItems = new Array<PepBreadCrumbItem>();\n\n    pager: IPepGenericListPager = {\n        type: 'pages',\n        size: 10,\n        index: 0\n    };\n    selectionType: any = 'multi';\n    supportSorting = false;\n    firstFieldAsLink = false;\n    //private selectedRowID = '';\n\n\n    constructor(private translate: TranslateService, private genericListService: PepGenericListService) {\n        //\n    }\n\n    ngOnInit(): void {\n        this.menuItems.push({\n            key: 'test',\n            text: 'test'\n        });\n\n        this.loadBreadCrumbs();\n\n        this.dataSource = this.getDataSource();\n\n    }\n    /*\n\n    ngAfterViewInit(): void {\n        this.pList?.initDataList(\n            {\n                Context: {\n                    Name: '',\n                    Profile: { InternalID: 0 },\n                    ScreenSize: 'Landscape'\n                },\n                Type: 'Grid',\n                Title: '',\n                Fields: [\n                    this.getRegularReadOnlyColumn('UUID'),\n                    this.getRegularReadOnlyColumn('Description'),\n                    this.getRegularReadOnlyColumn('Version'),\n                    this.getRegularReadOnlyColumn('Type'),\n                    this.getRegularReadOnlyColumn('CreationDate')\n                ],\n                Columns: [\n                    { Width: 15 },\n                    { Width: 30 },\n                    { Width: 15 },\n                    { Width: 20 },\n                    { Width: 20 }\n                ],\n                FrozenColumnsCount: 0,\n                MinimumColumnWidth: 0\n            }\n            , this.getBulk({ fromIndex: 0, toIndex: 9 })\n            , FakeData.Addons.length\n\n        ); \n    } */\n\n    private getRegularReadOnlyColumn(columnId: string): any {\n        return {\n            FieldID: columnId,\n            Type: 'TextBox',\n            Title: columnId,\n            Mandatory: false,\n            ReadOnly: true\n        }\n    }\n\n    private getLinkColumn(columnId: string): any {\n        return {\n            FieldID: columnId,\n            Type: 'Link',\n            Title: columnId,\n            Mandatory: false,\n            ReadOnly: true\n        }\n    }\n\n   \n    /*dataSource: any = {\n       init: (params : any) => {\n            const dataList = FakeData.Addons;\n            const filteredData = dataList.slice(params.fromIndex, params.toIndex + 1);\n            console.log('filteredData', filteredData.length);\n            const res = filteredData.map(addon => ({\n                UUID: addon.UUID,\n                Description: addon.Addon.Description,\n                Version: addon.Version,\n                Type: addon.Type,\n                CreationDate: addon.CreationDate,\n            }));\n            return Promise.resolve({\n                dataView: {\n                    Context: {\n                        Name: '',\n                        Profile: { InternalID: 0 },\n                        ScreenSize: 'Landscape'\n                    },\n                    Type: 'Grid',\n                    Title: '',\n                    Fields: [\n                        this.getRegularReadOnlyColumn('UUID'),\n                        this.getRegularReadOnlyColumn('Description'),\n                        this.getRegularReadOnlyColumn('Version'),\n                        this.getRegularReadOnlyColumn('Type'),\n                        this.getRegularReadOnlyColumn('CreationDate')\n                    ],\n                    Columns: [\n                        { Width: 15 },\n                        { Width: 30 },\n                        { Width: 15 },\n                        { Width: 20 },\n                        { Width: 20 }\n                    ],\n                    FrozenColumnsCount: 0,\n                    MinimumColumnWidth: 0 \n                },\n                totalCount: res.length * 2,\n                items: res\n            });\n        }, \n        update: (params: any) => {\n            console.log('update',params);\n            const dataList = FakeData.Addons;\n            const filteredData = dataList.slice(params.fromIndex, params.toIndex + 1);\n            const res = filteredData.map(addon => ({\n                UUID: addon.UUID,\n                Description: addon.Addon.Description,\n                Version: addon.Version,\n                Type: addon.Type,\n                CreationDate: addon.CreationDate,\n            }));\n            return Promise.resolve(res);\n        } \n    }*/\n\n    actions: IPepGenericListActions = {\n        get: async (data: PepSelectionData) => {\n            if (data?.rows.length === 1 && data?.selectionType !== 0) {\n                return [\n                    {\n                        title: 'Edit',\n                        handler: async (ddd) => {\n                            alert('edit');\n                        }\n                    },\n                    {\n                        title: 'Delete',\n                        handler: async (ddd) => {\n                            alert('delete');\n                        }\n                    }\n                ]\n            } else if (data?.rows.length > 1 || data?.selectionType === 0) {\n                return [\n                    {\n                        title: 'Delete',\n                        handler: async (ddd) => {\n                            alert('delete');\n                        }\n                    }\n                ]\n            } else return [];\n        }\n    }\n\n\n    loadBreadCrumbs() {\n        this.breadCrumbsItems.push(new PepBreadCrumbItem({\n            key: '1',\n            text: 'Crumb1',\n            title: 'Title1'\n        }));\n        this.breadCrumbsItems.push(new PepBreadCrumbItem({\n            key: '2',\n            text: 'Crumb2',\n            title: 'Title2'\n        }));\n\n    }\n\n    onMenuItemClicked(action: IPepMenuItemClickEvent): void {\n        alert(action.source.key);\n    }\n\n    onBreadCrumbClick(event: IPepBreadCrumbItemClickEvent) {\n        console.log('onBreadCrumbClick', event);\n        if (event?.source?.text === 'Crumb1') {\n            this.pager.type = 'pages';\n            this.selectionType = 'multi';\n            this.firstFieldAsLink = false;\n            this.supportSorting = false;\n            this.dataSource = this.getDataSource();\n           \n\n        } else {\n            this.pager.type = 'scroll';\n            //this.selectionType = 'single';\n            //this.firstFieldAsLink = true;\n            \n            this.supportSorting = true;\n            this.dataSource = this.getDataSourceEmpty();\n\n        }\n    }\n\n    onClick() {\n        console.log('item', this.genericListService.getItemById('2e51566e-7035-42dd-a7c2-fb92bc4ed135'));\n        console.log('selected itens', this.genericListService.getSelectedItems());\n        //PepGenericListService\n        //this.dataSource = this.getDataSourceEmpty();\n    }\n\n    getDataSource() {\n        return {\n            init: async (params: any) => {\n                const dataList = FakeData.Addons;\n                const filteredData = dataList.slice(params.fromIndex, params.toIndex + 1);\n                //const filteredData = dataList.slice(0, 5);\n                console.log('filteredData', filteredData.length);\n                const res = filteredData.map(addon => ({\n                    UUID: addon.UUID,\n                    Description: addon.Addon.Description,\n                    Version: addon.Version,\n                    Type: addon.Type,\n                    CreationDate: addon.CreationDate,\n                }));\n                return Promise.resolve({\n                    dataView: {\n                        Context: {\n                            Name: '',\n                            Profile: { InternalID: 0 },\n                            ScreenSize: 'Landscape'\n                        },\n                        Type: 'Grid',\n                        Title: '',\n                        Fields: [\n                            this.getRegularReadOnlyColumn('UUID'),\n                            this.getRegularReadOnlyColumn('Description'),\n                            this.getRegularReadOnlyColumn('Version'),\n                            this.getLinkColumn('Type'),\n                            this.getRegularReadOnlyColumn('CreationDate')\n                        ],\n                        Columns: [\n                            { Width: 15 },\n                            { Width: 30 },\n                            { Width: 15 },\n                            { Width: 20 },\n                            { Width: 20 }\n                        ],\n                        FrozenColumnsCount: 0,\n                        MinimumColumnWidth: 0\n                    },\n                    totalCount: res.length * 2,\n                    items: res\n                });\n            },\n            inputs: () => {\n                return Promise.resolve(\n                    {\n                        pager: {\n                            type: 'scroll'\n                        },\n                        selectionType: 'multi'\n                    }\n                );\n            }, \n            update: async (params: any) => {\n                console.log('update', params);\n                const dataList = FakeData.Addons;\n                const filteredData = dataList.slice(params.fromIndex, params.toIndex + 1);\n                //const filteredData = dataList.slice(5, 10);\n                const res = filteredData.map(addon => ({\n                    UUID: addon.UUID,\n                    Description: addon.Addon.Description,\n                    Version: addon.Version,\n                    Type: addon.Type,\n                    CreationDate: addon.CreationDate,\n                }));\n                return Promise.resolve(res);\n            } \n        } as IPepGenericListDataSource\n    }\n\n    getDataSourceEmpty() {\n        return {\n            init: (params: any) => {\n                const dataList = FakeData.Addons;\n                //const filteredData = dataList.slice(params.fromIndex, params.toIndex + 1);\n                const filteredData = dataList.slice(10, 15);\n                console.log('filteredData 2', filteredData.length);\n                const res = filteredData.map(addon => ({\n                    UUID: addon.UUID,\n                    Description: addon.Addon.Description,\n                    Version: addon.Version,\n                    Type: addon.Type,\n                    CreationDate: addon.CreationDate,\n                }));\n                return Promise.resolve({\n                    dataView: {\n                        Context: {\n                            Name: '',\n                            Profile: { InternalID: 0 },\n                            ScreenSize: 'Landscape'\n                        },\n                        Type: 'Grid',\n                        Title: '',\n                        Fields: [\n                            this.getRegularReadOnlyColumn('UUID'),\n                            this.getRegularReadOnlyColumn('Description'),\n                            this.getRegularReadOnlyColumn('Version'),\n                            this.getRegularReadOnlyColumn('Type'),\n                            this.getRegularReadOnlyColumn('CreationDate')\n                        ],\n                        Columns: [\n                            { Width: 15 },\n                            { Width: 30 },\n                            { Width: 15 },\n                            { Width: 20 },\n                            { Width: 20 }\n                        ],\n                        FrozenColumnsCount: 0,\n                        MinimumColumnWidth: 0\n                    },\n                    totalCount: res.length * 2,\n                    items: res\n                });\n            },\n            inputs: () => {\n                return Promise.resolve(\n                    {\n                        selectionType: 'single',\n                        firstFieldAsLink: true\n                    }\n                );\n            },\n            update: (params: any) => {\n                console.log('update', params);\n                const dataList = FakeData.Addons;\n                //const filteredData = dataList.slice(params.fromIndex, params.toIndex + 1);\n                const filteredData = dataList.slice(15, 20);\n                const res = filteredData.map(addon => ({\n                    UUID: addon.UUID,\n                    Description: addon.Addon.Description,\n                    Version: addon.Version,\n                    Type: addon.Type,\n                    CreationDate: addon.CreationDate,\n                }));\n                return Promise.resolve(res);\n            }\n        } as IPepGenericListDataSource\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-wrapper {\r\n    height: inherit;\r\n    display: grid ;\r\n    grid-template-rows: 1fr;\r\n    gap: 2rem;\r\n    padding-inline: 1rem;\r\n}",
                    "styleUrl": "./generic-list-example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "genericListService",
                        "type": "PepGenericListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "genericListService",
                        "type": "PepGenericListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"example-wrapper\">\n    <pep-generic-list [dataSource]=\"dataSource\" [actions]=\"actions\" [showTopBar]=\"true\" title=\"Generic list title\"\n        [showSearch]=\"true\" [breadCrumbsItems]=\"breadCrumbsItems\" [uuidMapping]=\"'UUID'\" [selectionType]=\"selectionType\"\n        [pager]=\"pager\" [supportSorting]=\"supportSorting\" (breadCrumbItemClick)=\"onBreadCrumbClick($event)\">\n        <ng-container right-buttons>\n            <pep-menu class=\"pep-spacing-element\" [items]=\"menuItems\" [sizeType]=\"'md'\"\n                (menuItemClick)=\"onMenuItemClicked($event)\">\n            </pep-menu>\n            <pep-button class=\"pep-spacing-element\" [value]=\"'New'\" [sizeType]=\"'md'\" [styleType]=\"'strong'\">\n            </pep-button>\n        </ng-container>\n    </pep-generic-list>\n\n    <!-- <pep-generic-list [data]=\"dataSource\" [actions]=\"actions\" [inline]=\"true\" [breadCrumbsItems]=\"breadCrumbsItems\" [pager]=\"pager\"\n        title=\"Generic list inline title\" [showSearch]=\"true\" (breadCrumbItemClick)=\"onBreadCrumbClick($event)\">\n        <ng-container right-buttons>\n            <pep-menu class=\"pep-spacing-element\" [items]=\"menuItems\" [sizeType]=\"'sm'\"\n                (menuItemClick)=\"onMenuItemClicked($event)\">\n            </pep-menu>\n            <pep-button class=\"pep-spacing-element\" [value]=\"'New'\" [sizeType]=\"'sm'\" [styleType]=\"'strong'\">\n            </pep-button>\n        </ng-container>\n    </pep-generic-list> -->\n</div>\n<pep-button class=\"pep-spacing-element\" [value]=\"'Try me'\" [sizeType]=\"'sm'\" [styleType]=\"'strong'\" (click)=\"onClick()\">\n</pep-button>"
        },
        {
            "name": "GroupButtonsSettingsComponent",
            "id": "component-GroupButtonsSettingsComponent-ab08ee35b074ede35320d7834483345fb85a798aa4c90d30dcd6497c9a1cbd6417c04bd5f8f86d528f96fd80630c4038c69a87c14381e0810a35323110cd7c2f",
            "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-group-buttons-settings",
            "styleUrls": [
                "./group-buttons-settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group-buttons-settings.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "btnKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "btnsArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "Array<PepButton>",
                    "decorators": []
                },
                {
                    "name": "dir",
                    "defaultValue": "'ltr'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "\"rtl\" | \"ltr\"",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "excludeKeys",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "Array<string>",
                    "decorators": []
                },
                {
                    "name": "groupType",
                    "defaultValue": "'sizes'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "PepGroupbuttonsTypes",
                    "decorators": []
                },
                {
                    "name": "header",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "subHeader",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "useNone",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "btnkeyChange",
                    "defaultValue": "new EventEmitter<IPepButtonClickEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "EventEmitter<IPepButtonClickEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_btnKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "none",
                    "defaultValue": "{key: 'none'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepButton",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "sizes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<PepButton>",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "arrayMerge",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getButtonsArray",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onKeyChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPepButtonClickEvent | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPepButtonClickEvent | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { PepSizeType } from '@pepperi-addons/ngx-lib';\nimport { IPepButtonClickEvent, PepButton } from '@pepperi-addons/ngx-lib/button';\nimport { PepGroupbuttonsTypes } from './group-buttons-settings.model';\n\n@Component({\n    selector: 'pep-group-buttons-settings',\n    templateUrl: './group-buttons-settings.component.html',\n    styleUrls: ['./group-buttons-settings.component.scss']\n})\nexport class GroupButtonsSettingsComponent implements OnInit {\n\n    @Input() header = '';\n    @Input() subHeader = '';\n\n    @Input() groupType: PepGroupbuttonsTypes = 'sizes'; \n    @Input() btnsArray: Array<PepButton> = [];\n    @Input() excludeKeys: Array<string> = []; // for example ['xs','xl']\n\n    @Input() useNone = false;\n    @Input() disabled = false;\n    @Input() dir: 'rtl' | 'ltr' = 'ltr';\n    \n    private _btnKey: any;\n    @Input()\n    set btnKey(value: any) {\n        if (!value) {\n            this._btnKey = '';\n        } else {\n            this._btnKey = value;\n        }\n    }\n    get btnKey(): any {\n        return this._btnKey;\n    }\n\n    @Output()\n    btnkeyChange: EventEmitter<IPepButtonClickEvent> = new EventEmitter<IPepButtonClickEvent>();\n    \n    \n    none: PepButton = {key: 'none'};\n    \n    sizes: Array<PepButton> = [];\n    \n    // pepB: PepSizeType | 'none' = \"xs\";\n\n    constructor(\n        private translate: TranslateService,\n    ) {\n    }\n\n    ngOnInit(): void { \n        // Get the first translation for load all translations.\n        this.translate.get('SHADOW_SETTINGS.INTENSITY_SOFT').toPromise().then((typeSoft) => {\n            \n            this.none = { key: 'none', value: this.translate.instant('GENERAL.NONE'), callback: () => this.onKeyChange(null) };\n            \n            this.arrayMerge();\n        });\n    }\n\n    arrayMerge(){\n\n        this.btnsArray = this.getButtonsArray();\n        \n        // check if need to remove items from the buttons array\n        if(this.excludeKeys){\n            this.btnsArray = this.btnsArray.filter(i => !this.excludeKeys.find(f => f === i.key));\n        }\n        // check if need to add the None button\n        if(this.useNone){\n            this.btnsArray = [this.none].concat(this.btnsArray);\n        }\n    }\n\n    onKeyChange(event: IPepButtonClickEvent | null) {\n        this.btnKey = event?.source?.key || 'none';\n        this.btnkeyChange.emit(this.btnKey);\n    }\n\n    getButtonsArray() {\n        switch(this.groupType){\n            case 'custom':{\n                return this.btnsArray;\n            }\n            case 'sizes':{\n                return [\n                    { key: 'xs', value: this.translate.instant('GENERAL.XS'), callback: (event: any) => this.onKeyChange(event) },\n                    { key: 'sm', value: this.translate.instant('GENERAL.SM'), callback: (event: any) => this.onKeyChange(event) },\n                    { key: 'md', value: this.translate.instant('GENERAL.MD'), callback: (event: any) => this.onKeyChange(event) },\n                    { key: 'lg', value: this.translate.instant('GENERAL.LG'), callback: (event: any) => this.onKeyChange(event) },\n                    { key: 'xl', value: this.translate.instant('GENERAL.XL'), callback: (event: any) => this.onKeyChange(event) }\n                ];\n            }\n            case 'vertical-align':{\n                return [\n                    { key: 'start', value: this.translate.instant('GENERAL.VERTICAL_ALIGN.TOP'), callback: (event: IPepButtonClickEvent) => this.onKeyChange(event) },\n                    { key: 'center', value: this.translate.instant('GENERAL.VERTICAL_ALIGN.MIDDLE'), callback: (event: IPepButtonClickEvent) => this.onKeyChange(event) },\n                    { key: 'end', value: this.translate.instant('GENERAL.VERTICAL_ALIGN.BOTTOM'), callback: (event: IPepButtonClickEvent) => this.onKeyChange(event) }\n                ];\n            }\n            case 'horizontal-align': {\n                return [\n                    { key: 'left', iconName: 'text_align_right', callback: (event: any) => this.onKeyChange(event) },\n                    { key: 'center', iconName: 'text_align_center', callback: (event: any) => this.onKeyChange(event) },\n                    { key: 'right', iconName: 'text_align_left', callback: (event: any) => this.onKeyChange(event) },\n                ];\n            }\n            case 'font-weight':{\n                return [\n                    { key: 'normal', value: this.translate.instant('GENERAL.FONT_WEIGHT.NORMAL'), callback: (event: any) => this.onKeyChange(event) },\n                    { key: 'bold', value: this.translate.instant('GENERAL.FONT_WEIGHT.BOLD'), callback: (event: any) => this.onKeyChange(event) },\n                    { key: 'bolder', value: this.translate.instant('GENERAL.FONT_WEIGHT.BOLDER'), callback: (event: any) => this.onKeyChange(event) }\n                ]\n            }\n            case 'width-sizes':{\n                return [\n                        { key: 'narrow', value: this.translate.instant('GENERAL.WIDTH_SIZE.NARROW'), callback: (event: any) => this.onKeyChange(event) },\n                        { key: 'regular', value: this.translate.instant('GENERAL.WIDTH_SIZE.REGULAR'), callback: (event: any) => this.onKeyChange(event) },\n                        { key: 'wide', value: this.translate.instant('GENERAL.WIDTH_SIZE.WIDE'), callback: (event: any) => this.onKeyChange(event) }\n                ];\n            }\n\n            default: {\n                return [];\n            }\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@pepperi-addons/ngx-lib/src/core/style/abstracts/variables' as ngx-variables;\r\n\r\n:host {\r\n    width: 100%;\r\n    // max-width: 200px;\r\n\r\n    .shadow-size-group,\r\n    .shadow-type-group {\r\n        display: block;\r\n        margin-bottom: ngx-variables.$form-spacing;\r\n    }\r\n}",
                    "styleUrl": "./group-buttons-settings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "btnKey": {
                    "name": "btnKey",
                    "setSignature": {
                        "name": "btnKey",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "btnKey",
                        "type": "any",
                        "returnType": "any",
                        "line": 34
                    }
                }
            },
            "templateData": "<label *ngIf=\"header != ''\" class=\"body-xl bold ellipsis\">{{header}}</label>\n<pep-field-title *ngIf=\"subHeader !=''\" [label]=\"subHeader\" [disabled]=\"disabled\" [xAlignment]=\"dir === 'rtl' ? 'right' : 'left'\"></pep-field-title>\n<pep-group-buttons [buttons]=\"btnsArray\" \n                   [selectedButtonKey]=\"btnKey\" \n                   [stretch]=\"true\" \n                   buttonsClass=\"md regular\" \n                   [buttonsDisabled]=\"disabled\" \n                   viewType=\"toggle\">\n</pep-group-buttons>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-0cd94fbc94a83702e45bf987cb3b3f9074d69cd27e6ca2e4fbac0dc5b5047bd4dc3a9ce8a77f6bd9ab7ae3e6ca8e49b34bed529ca0da0fa428fec544a0324870",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-432c9ae0bcf6e2e1f46701f7565a67376cb10145b7d049c5fe930cf8f075c6e02e24151589750b18cbaa8266f7c61393b95c4d833fbfd71ee228904aa014349f",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ShadowSettingsComponent",
            "id": "component-ShadowSettingsComponent-44184213543f666aadbfb238242834cda54ad5831583aea3bceff620913b5f079943cbed93acdca88607e51574d047f150ad93a698c854eaa4c937a79697e071",
            "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pep-shadow-settings",
            "styleUrls": [
                "./shadow-settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shadow-settings.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "shadow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "shadowChange",
                    "defaultValue": "new EventEmitter<PepShadowSettings>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<PepShadowSettings>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_shadow",
                    "defaultValue": "new PepShadowSettings()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PepShadowSettings",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "shadowIntensities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<PepButton>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "shadowSizes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<PepButton>",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onIntensityChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "PepShadowIntensityType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "PepShadowIntensityType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSizeChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "PepSizeType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "PepSizeType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUseChanged",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "raiseShadowChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { PepSizeType } from '@pepperi-addons/ngx-lib';\nimport { IPepButtonClickEvent, PepButton } from '@pepperi-addons/ngx-lib/button';\nimport { PepShadowIntensityType, PepShadowSettings } from './shadow-settings.model';\n\n@Component({\n    selector: 'pep-shadow-settings',\n    templateUrl: './shadow-settings.component.html',\n    styleUrls: ['./shadow-settings.component.scss']\n})\nexport class ShadowSettingsComponent implements OnInit {\n\n    private _shadow: PepShadowSettings = new PepShadowSettings();\n    @Input()\n    set shadow(value: PepShadowSettings) {\n        if (!value) {\n            this._shadow = new PepShadowSettings();\n        } else {\n            this._shadow = value;\n        }\n    }\n    get shadow(): PepShadowSettings {\n        return this._shadow;\n    }\n\n    @Output()\n    shadowChange: EventEmitter<PepShadowSettings> = new EventEmitter<PepShadowSettings>();\n    \n    shadowSizes: Array<PepButton> = [];\n    shadowIntensities: Array<PepButton> = [];\n\n    constructor(\n        private translate: TranslateService,\n    ) {\n    }\n\n    ngOnInit(): void { \n        // Get the first translation for load all translations.\n        this.translate.get('SHADOW_SETTINGS.INTENSITY_SOFT').toPromise().then((typeSoft) => {\n            this.shadowSizes = [\n                { key: 'sm', value: this.translate.instant('GENERAL.SM'), callback: () => this.onSizeChange('sm') },\n                { key: 'md', value: this.translate.instant('GENERAL.MD'), callback: () => this.onSizeChange('md') },\n                { key: 'lg', value: this.translate.instant('GENERAL.LG'), callback: () => this.onSizeChange('lg') },\n                { key: 'xl', value: this.translate.instant('GENERAL.XL'), callback: () => this.onSizeChange('xl') }\n            ];\n\n            this.shadowIntensities = [\n                { key: 'soft', value: typeSoft, callback: () => this.onIntensityChange('soft') },\n                { key: 'regular', value: this.translate.instant('SHADOW_SETTINGS.INTENSITY_REGULAR'), callback: () => this.onIntensityChange('regular') },\n                { key: 'hard', value: this.translate.instant('SHADOW_SETTINGS.INTENSITY_HARD'), callback: () => this.onIntensityChange('hard') }\n            ];\n        });\n    }\n\n\n    private raiseShadowChange() {\n        this.shadowChange.emit(this.shadow);\n    }\n\n    onUseChanged(value: boolean) {\n        this.shadow.use = value;\n        this.raiseShadowChange();\n    }\n\n    onSizeChange(value: PepSizeType) {\n        this.shadow.size = value;\n        this.raiseShadowChange();\n    }\n\n    onIntensityChange(value: PepShadowIntensityType) {\n        this.shadow.intensity = value;\n        this.raiseShadowChange();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '~@pepperi-addons/ngx-lib/src/core/style/abstracts/variables' as ngx-variables;\r\n\r\n:host {\r\n    width: 100%;\r\n    // max-width: 200px;\r\n\r\n    .shadow-size-group,\r\n    .shadow-type-group {\r\n        display: block;\r\n        margin-bottom: ngx-variables.$form-spacing;\r\n    }\r\n}",
                    "styleUrl": "./shadow-settings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "shadow": {
                    "name": "shadow",
                    "setSignature": {
                        "name": "shadow",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "PepShadowSettings",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "PepShadowSettings",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "shadow",
                        "type": "",
                        "returnType": "PepShadowSettings",
                        "line": 23
                    }
                }
            },
            "templateData": "<pep-checkbox class=\"checkbox-as-title\" [label]=\"'SHADOW_SETTINGS.TITLE' | translate\" [renderTitle]=\"false\" [value]=\"shadow.use\" (valueChange)=\"onUseChanged($event)\"></pep-checkbox>\n<pep-field-title [label]=\"'SHADOW_SETTINGS.SIZE' | translate\" [disabled]=\"!shadow.use\"></pep-field-title>\n<pep-group-buttons class=\"shadow-size-group\" [buttons]=\"shadowSizes\" [selectedButtonKey]=\"shadow.size\" [stretch]=\"true\" buttonsClass=\"md regular\" [buttonsDisabled]=\"!shadow.use\" viewType=\"toggle\">\n</pep-group-buttons>\n<pep-field-title [label]=\"'SHADOW_SETTINGS.INTENSITY' | translate\" [disabled]=\"!shadow.use\"></pep-field-title>\n<pep-group-buttons class=\"shadow-intensity-group\" [buttons]=\"shadowIntensities\" [selectedButtonKey]=\"shadow.intensity\" [stretch]=\"true\" buttonsClass=\"md regular\" [buttonsDisabled]=\"!shadow.use\" viewType=\"toggle\">\n</pep-group-buttons>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-4af69d2e75010d3e736fc997b2c814f268b43a51b0fe83d0b649bfc51928b9f1b67c47fa6fa4d6a96663b5e469961de28b3111e588136921c6f72e8823a4fd3e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib-tester/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { PepAddonService } from '@pepperi-addons/ngx-lib';\nimport { NgxLibHelperModule } from './common/ngx-helper.module';\n\nimport { PepNgxCompositeLibModule } from '@pepperi-addons/ngx-composite-lib';\nimport { PepColorSettingsModule } from '@pepperi-addons/ngx-composite-lib/color-settings';\nimport { PepShadowSettingsModule } from '@pepperi-addons/ngx-composite-lib/shadow-settings';\nimport { PepGroupButtonsSettingsModule } from '@pepperi-addons/ngx-composite-lib/group-buttons-settings';\nimport { PepFileStatusPanelModule } from '@pepperi-addons/ngx-composite-lib/file-status-panel';\nimport { PepGenericListModule } from '@pepperi-addons/ngx-composite-lib/generic-list';\nimport { PepDIMXModule } from 'projects/ngx-composite-lib/dimx-export';\nimport { ComponentsExampleComponent } from './components-example/components-example.component';\nimport { GenericListExampleComponent } from './generic-list-example/generic-list-example.component';\n\nimport {\n    TranslateModule,\n    TranslateLoader,\n    TranslateService,\n} from '@ngx-translate/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        ComponentsExampleComponent,\n        GenericListExampleComponent\n    ],\n    imports: [\n        CommonModule,\n        BrowserModule,\n        BrowserAnimationsModule,\n        AppRoutingModule,\n        NgxLibHelperModule,\n        PepNgxCompositeLibModule,\n        PepColorSettingsModule,\n        PepShadowSettingsModule,\n        PepGroupButtonsSettingsModule,\n        PepDIMXModule,\n        PepFileStatusPanelModule,\n        PepGenericListModule,\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: (addonService: PepAddonService) => \n                    PepAddonService.createMultiTranslateLoader(addonService, ['ngx-lib', 'ngx-composite-lib']),\n                deps: [PepAddonService]\n            }\n        }),\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { \n    constructor(\n        translate: TranslateService,\n        private pepAddonService: PepAddonService\n    ) {\n        this.pepAddonService.setDefaultTranslateLang(translate);\n    }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ComponentsExampleComponent"
                        },
                        {
                            "name": "GenericListExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "NgxLibHelperModule"
                        },
                        {
                            "name": "PepColorSettingsModule"
                        },
                        {
                            "name": "PepDIMXModule"
                        },
                        {
                            "name": "PepFileStatusPanelModule"
                        },
                        {
                            "name": "PepGenericListModule"
                        },
                        {
                            "name": "PepGroupButtonsSettingsModule"
                        },
                        {
                            "name": "PepNgxCompositeLibModule"
                        },
                        {
                            "name": "PepShadowSettingsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-10f7402b29993dac9cc5ea7ad9b2cf0ba41c461e41bc708a3c974902ed2790fe6759a4c4cb641470f4febd8a0d865cbdb61bc0e046831dc41adafb67d030aafd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib-tester/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ComponentsExampleComponent } from './components-example/components-example.component';\nimport { GenericListExampleComponent } from './generic-list-example/generic-list-example.component';\n\nconst routes: Routes = [\n    {\n        path: `generic-list-example`,\n        component: GenericListExampleComponent,\n    },\n    {\n        path: '**',\n        component: ComponentsExampleComponent,\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgxLibHelperModule",
            "id": "module-NgxLibHelperModule-ef6b649c4dba8d8fb5b1902c75ea2e76410864a98368f5f53e45191907c60e23c022deea6a8a3df3938afef508370067c06b029a282134d51d9bfd094e6d75aa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\n\nimport {\n    PepNgxLibModule,\n    PepAddonService,\n    PepCustomizationService,\n    PepFileService,\n} from '@pepperi-addons/ngx-lib';\nimport { PepAttachmentModule } from '@pepperi-addons/ngx-lib/attachment';\nimport { PepBreadCrumbsModule } from '@pepperi-addons/ngx-lib/bread-crumbs';\nimport { PepButtonModule } from '@pepperi-addons/ngx-lib/button';\nimport { PepCarouselModule } from '@pepperi-addons/ngx-lib/carousel';\nimport { PepCheckboxModule } from '@pepperi-addons/ngx-lib/checkbox';\nimport { PepColorModule } from '@pepperi-addons/ngx-lib/color';\nimport { PepDateModule } from '@pepperi-addons/ngx-lib/date';\nimport { PepGroupButtonsModule } from '@pepperi-addons/ngx-lib/group-buttons';\nimport { PepImageModule } from '@pepperi-addons/ngx-lib/image';\nimport { PepImagesFilmstripModule } from '@pepperi-addons/ngx-lib/images-filmstrip';\nimport { PepQuantitySelectorModule } from '@pepperi-addons/ngx-lib/quantity-selector';\nimport { PepRichHtmlTextareaModule } from '@pepperi-addons/ngx-lib/rich-html-textarea';\nimport { PepSearchModule } from '@pepperi-addons/ngx-lib/search';\nimport { PepSelectModule } from '@pepperi-addons/ngx-lib/select';\nimport { PepSliderModule } from '@pepperi-addons/ngx-lib/slider';\nimport { PepSeparatorModule } from '@pepperi-addons/ngx-lib/separator';\nimport { PepSideBarModule } from '@pepperi-addons/ngx-lib/side-bar';\nimport { PepSignatureModule } from '@pepperi-addons/ngx-lib/signature';\nimport { PepSizeDetectorModule } from '@pepperi-addons/ngx-lib/size-detector';\nimport { PepTextareaModule } from '@pepperi-addons/ngx-lib/textarea';\nimport { PepTextboxModule } from '@pepperi-addons/ngx-lib/textbox';\nimport { PepListModule } from '@pepperi-addons/ngx-lib/list';\nimport { PepMenuModule } from '@pepperi-addons/ngx-lib/menu';\nimport { PepTopBarModule } from '@pepperi-addons/ngx-lib/top-bar';\nimport { PepPageLayoutModule } from '@pepperi-addons/ngx-lib/page-layout';\n\nimport { PepFormModule } from '@pepperi-addons/ngx-lib/form';\n\nimport { PepSmartFiltersModule } from '@pepperi-addons/ngx-lib/smart-filters';\n\nimport {\n    PepIconModule,\n    PepIconRegistry,\n    pepIconSystemBolt,\n    pepIconNoImage,\n    pepIconNoImage2,\n    pepIconArrowTwoWaysVerT,\n    pepIconArrowDown,\n    pepIconArrowUp,\n    pepIconArrowRightAlt,\n    pepIconArrowLeftAlt,\n    pepIconArrowDownAlt,\n    pepIconArrowUpAlt,\n    pepIconNumberNumber,\n    pepIconNumberPlus,\n    pepIconSystemBin,\n    pepIconSystemEdit,\n    pepIconSystemClose,\n    pepIconSystemFilter,\n    pepIconSystemMenu,\n    pepIconSystemHome,\n    pepIconSystemSettings,\n    pepIconSystemQuestion,\n    pepIconSystemAvatar,\n    pepIconSystemDoor,\n    pepIconSystemPrint,\n    pepIconSystemSearch,\n    pepIconSystemSpinner,\n    pepIconSystemInfo,\n    pepIconShoppingCart,\n    pepIconTimeCal,\n    pepIconViewCardLg,\n    pepIconViewCardMd,\n    pepIconViewCardSm,\n    pepIconViewTable,\n    pepIconViewMatrix,\n    pepIconViewLine,\n} from '@pepperi-addons/ngx-lib/icon';\nconst pepIcons = [\n    pepIconSystemBolt,\n    pepIconNoImage,\n    pepIconNoImage2,\n    pepIconArrowTwoWaysVerT,\n    pepIconArrowDown,\n    pepIconArrowUp,\n    pepIconArrowRightAlt,\n    pepIconArrowLeftAlt,\n    pepIconArrowDownAlt,\n    pepIconArrowUpAlt,\n    pepIconNumberNumber,\n    pepIconNumberPlus,\n    pepIconSystemBin,\n    pepIconSystemEdit,\n    pepIconSystemClose,\n    pepIconSystemFilter,\n    pepIconSystemMenu,\n    pepIconSystemHome,\n    pepIconSystemSettings,\n    pepIconSystemQuestion,\n    pepIconSystemAvatar,\n    pepIconSystemDoor,\n    pepIconSystemPrint,\n    pepIconSystemSearch,\n    pepIconSystemSpinner,\n    pepIconSystemInfo,\n    pepIconShoppingCart,\n    pepIconTimeCal,\n    pepIconViewCardLg,\n    pepIconViewCardMd,\n    pepIconViewCardSm,\n    pepIconViewTable,\n    pepIconViewMatrix,\n    pepIconViewLine,\n];\n\nconst pepperiComponentsModules = [\n    PepAttachmentModule,\n    PepCarouselModule,\n    PepBreadCrumbsModule,\n    PepButtonModule,\n    PepCheckboxModule,\n    PepColorModule,\n    PepDateModule,\n    PepGroupButtonsModule,\n    PepImageModule,\n    PepImagesFilmstripModule,\n    PepListModule,\n    PepCheckboxModule,\n    PepQuantitySelectorModule,\n    PepRichHtmlTextareaModule,\n    PepSearchModule,\n    PepSelectModule,\n    PepSeparatorModule,\n    PepSliderModule,\n    PepSideBarModule,\n    PepSignatureModule,\n    PepSizeDetectorModule,\n    PepTextareaModule,\n    PepTextboxModule,\n    PepIconModule,\n    PepMenuModule,\n    PepTopBarModule,\n    PepPageLayoutModule,\n    PepSmartFiltersModule,\n    PepFormModule\n];\n\n@NgModule({\n    declarations: [],\n    imports: [\n        CommonModule,\n        PepNgxLibModule,\n        pepperiComponentsModules,\n    ],\n    exports: [PepNgxLibModule, pepperiComponentsModules],\n})\nexport class NgxLibHelperModule {\n    constructor(\n        private pepperiIconRegistry: PepIconRegistry,\n    ) {\n        this.pepperiIconRegistry.registerIcons(pepIcons);\n    }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepColorSettingsModule",
            "id": "module-PepColorSettingsModule-83aad0eb095d7a890f7cdbea13430560f79cd6c391ded69c44248a3020427a4c31654d7d620184c2358bacd61433261c4bf6192205f890b370e5ff40f3a6edc4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/color-settings/color-settings.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\nimport { PepColorModule } from '@pepperi-addons/ngx-lib/color';\nimport { PepCheckboxModule } from '@pepperi-addons/ngx-lib/checkbox';\nimport { PepSliderModule } from '@pepperi-addons/ngx-lib/slider';\n\nimport { ColorSettingsComponent } from './color-settings.component';\n\n@NgModule({\n    declarations: [\n        ColorSettingsComponent\n    ],\n    imports: [\n        CommonModule,\n        PepNgxLibModule,\n        PepCheckboxModule,\n        PepColorModule,\n        PepSliderModule\n    ],\n    exports: [ColorSettingsComponent],\n})\nexport class PepColorSettingsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ColorSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ColorSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepDIMXModule",
            "id": "module-PepDIMXModule-f07af3e2e142c6bf179126c7bee664e44d1196301f556408205e6cd7b013e72fdd03c17afbd67e48ffa2106e021db4d3c5e16aab5d2537ae90b9b4eb9fb4e351",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/dimx-export/dimx.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\nimport { DIMXComponent } from './dimx.component';\nimport { PepIconRegistry, pepIconSystemDoc } from '@pepperi-addons/ngx-lib/icon';\nimport { PepButtonModule } from '@pepperi-addons/ngx-lib/button';\nimport { PepIconModule } from '@pepperi-addons/ngx-lib/icon';\nimport { PepFileStatusPanelModule } from '@pepperi-addons/ngx-composite-lib/file-status-panel';\n\nconst pepIcons = [\n    pepIconSystemDoc,\n]\n\n@NgModule({\n    declarations: [\n        DIMXComponent\n    ],\n    imports: [\n        CommonModule,\n        PepNgxLibModule,\n        PepButtonModule,\n        PepIconModule,\n        PepFileStatusPanelModule,\n    ],\n    exports: [DIMXComponent]\n})\nexport class PepDIMXModule { \n    constructor(\n        private pepIconRegistry: PepIconRegistry,\n    ) {\n        this.pepIconRegistry.registerIcons(pepIcons);\n    }\n\n\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DIMXComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PepFileStatusPanelModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DIMXComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepFileStatusPanelModule",
            "id": "module-PepFileStatusPanelModule-c16cec804592e30e25a87ef7914b35207a1d79d5a42e1a59d1702d4c7d267e48d51293a6c335570b2b0e2e8281b5e8125b1ef798fb75a7820a44dcd794a5fc65",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PepFileService, PepAddonService, PepNgxLibModule } from '@pepperi-addons/ngx-lib';\nimport { FileStatusPanelComponent } from './file-status-panel.component';\nimport { PepTextboxModule } from '@pepperi-addons/ngx-lib/textbox';\nimport { PepTopBarModule } from '@pepperi-addons/ngx-lib/top-bar';\nimport { PepDialogModule } from '@pepperi-addons/ngx-lib/dialog';\nimport { PepButtonModule } from '@pepperi-addons/ngx-lib/button';\n\n\n@NgModule({\n    declarations: [\n        FileStatusPanelComponent\n    ],\n    imports: [\n        CommonModule,\n        PepTopBarModule,\n        PepTextboxModule,\n        PepButtonModule,\n        PepDialogModule,\n    ],\n    exports: [FileStatusPanelComponent]\n})\n\nexport class PepFileStatusPanelModule { \n    \n}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FileStatusPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FileStatusPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepGenericListModule",
            "id": "module-PepGenericListModule-48dfd2ecde4bbe4f403b0bd8bafcf7e935d3c9e3baec267cc283a1e9454b9f1ef325b71e1e64912c6760b0cbfa53abf0abaec74bf60d89f7439cfaa49acbaf58",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/generic-list/generic-list.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GenericListComponent } from './generic-list.component';\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\nimport { PepListModule } from '@pepperi-addons/ngx-lib/list';\nimport { PepFormModule } from '@pepperi-addons/ngx-lib/form';\nimport { PepMenuModule } from '@pepperi-addons/ngx-lib/menu';\nimport { PepPageLayoutModule } from '@pepperi-addons/ngx-lib/page-layout';\nimport { PepTopBarModule } from '@pepperi-addons/ngx-lib/top-bar';\nimport { PepSearchModule } from '@pepperi-addons/ngx-lib/search';\nimport { PepBreadCrumbsModule } from '@pepperi-addons/ngx-lib/bread-crumbs';\nimport { PepGenericListService } from './generic-list.service';\n\n@NgModule({\n    declarations: [\n        GenericListComponent\n    ],\n    imports: [\n        CommonModule,\n        PepNgxLibModule,\n        PepListModule,\n        PepFormModule,\n        PepMenuModule,\n        PepPageLayoutModule,\n        PepTopBarModule,\n        PepSearchModule,\n        PepBreadCrumbsModule\n    ],\n    exports: [\n        GenericListComponent\n    ],\n    providers: [\n        PepGenericListService\n    ]\n})\nexport class PepGenericListModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "PepGenericListService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GenericListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GenericListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepGroupButtonsSettingsModule",
            "id": "module-PepGroupButtonsSettingsModule-68e9f16c844d06a7a1fc57aef7af75680a485ed03ad406b3ed4c79f6a33cf16365d10d96cbd247bfaca30b7ce4d329c151882726bd5320eae377d739038ea254",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GroupButtonsSettingsComponent } from './group-buttons-settings.component';\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\nimport { PepFieldTitleModule } from '@pepperi-addons/ngx-lib/field-title';\nimport { PepGroupButtonsModule } from '@pepperi-addons/ngx-lib/group-buttons';\nimport { PepIconRegistry, pepIconTextAlignCenter, pepIconTextAlignLeft, pepIconTextAlignRight } from '@pepperi-addons/ngx-lib/icon';\n\nconst pepIcons = [\n    pepIconTextAlignCenter, \n    pepIconTextAlignLeft, \n    pepIconTextAlignRight\n]\n\n@NgModule({\n    declarations: [\n        GroupButtonsSettingsComponent\n    ],\n    imports: [\n        CommonModule,\n        PepNgxLibModule,\n        PepFieldTitleModule,\n        PepGroupButtonsModule,\n    ],\n    exports: [GroupButtonsSettingsComponent]\n})\nexport class PepGroupButtonsSettingsModule { \n    constructor(\n        private pepIconRegistry: PepIconRegistry,\n    ) {\n        this.pepIconRegistry.registerIcons(pepIcons);\n    }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GroupButtonsSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GroupButtonsSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepNgxCompositeLibModule",
            "id": "module-PepNgxCompositeLibModule-96344411fb85e4835daddadb8a6e0b6d035c2da3ae32ecbfd76238e4e20827529b2175c7f27b88ef63caf91bcc9792679af9925622ca0c50cc361064ed3b1144",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/src/ngx-composite-lib.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n// import { TranslateModule } from '@ngx-translate/core';\n// import { CommonModule } from '@angular/common';\n// import { HttpClientModule } from '@angular/common/http';\n// import { ReactiveFormsModule } from '@angular/forms';\nimport { PepResetConfigurationFieldDirective } from './core/common/directives/reset-configuration-field.directive';\n\n\nconst utilitiesList = [\n    PepResetConfigurationFieldDirective\n];\n\n@NgModule({\n    declarations: [\n        utilitiesList\n    ],\n    imports: [\n        // CommonModule, HttpClientModule, ReactiveFormsModule\n    ],\n    exports: [\n        utilitiesList\n        // TranslateModule\n    ]\n})\nexport class PepNgxCompositeLibModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PepResetConfigurationFieldDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PepResetConfigurationFieldDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepNgxHelperModule",
            "id": "module-PepNgxHelperModule-50e116fb05cede7c0b6e936acdc7affa9f29e63f8f84545e8d898a528088bc1767a51afb9cae97463b6896fc445e2933eaf32f96193b8241a1fd21143803c917",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/src/core/common/modules/ngx-helper-module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClient } from '@angular/common/http';\n\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\n\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\n\nexport function HttpLoaderFactory(httpClient: HttpClient) {\n    return new TranslateHttpLoader(httpClient, '/assets/ngx-lib/i18n/', '.ngx-lib.json');\n}\n\n@NgModule({\n    declarations: [],\n    imports: [\n        CommonModule,\n        BrowserAnimationsModule,\n        PepNgxLibModule,       \n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: HttpLoaderFactory,\n                deps: [HttpClient],\n            },\n        }),\n    ]\n})\nexport class PepNgxHelperModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PepShadowSettingsModule",
            "id": "module-PepShadowSettingsModule-a1b44c4dc1f4dab0ef6c9268df5edef976021ecf5d5f68aba664bd4bb0aa0f37389a8b9d880605abe3824b3d1086a657160b2b58670c59a8bd973c7f2c0c8c42",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ShadowSettingsComponent } from './shadow-settings.component';\nimport { PepNgxLibModule } from '@pepperi-addons/ngx-lib';\nimport { PepCheckboxModule } from '@pepperi-addons/ngx-lib/checkbox';\nimport { PepFieldTitleModule } from '@pepperi-addons/ngx-lib/field-title';\nimport { PepGroupButtonsModule } from '@pepperi-addons/ngx-lib/group-buttons';\nimport { PepSliderModule } from '@pepperi-addons/ngx-lib/slider';\n\n@NgModule({\n    declarations: [\n        ShadowSettingsComponent\n    ],\n    imports: [\n        CommonModule,\n        PepNgxLibModule,\n        PepCheckboxModule,\n        PepFieldTitleModule,\n        PepGroupButtonsModule,\n        PepSliderModule\n    ],\n    exports: [ShadowSettingsComponent],\n})\nexport class PepShadowSettingsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ShadowSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ShadowSettingsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    production: false\n}"
            },
            {
                "name": "FakeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    Addons: [\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '2e51566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '31f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd701',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: 'ba0adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '1c24db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '2251566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '33f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '44fb64d8-2b2c-4dec-8563-ac9fa98cd701',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '50adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '6c24db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '7e51566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '81f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '94fb64d8-2b2c-4dec-8563-ac9fa98cd701',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '100adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '1124db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '1251566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '13f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd731',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '150adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '1624db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        }\r\n    ],\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "pepIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/dimx-export/dimx.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    pepIconSystemDoc,\n]"
            },
            {
                "name": "pepIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    pepIconTextAlignCenter, \n    pepIconTextAlignLeft, \n    pepIconTextAlignRight\n]"
            },
            {
                "name": "pepIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    pepIconSystemBolt,\n    pepIconNoImage,\n    pepIconNoImage2,\n    pepIconArrowTwoWaysVerT,\n    pepIconArrowDown,\n    pepIconArrowUp,\n    pepIconArrowRightAlt,\n    pepIconArrowLeftAlt,\n    pepIconArrowDownAlt,\n    pepIconArrowUpAlt,\n    pepIconNumberNumber,\n    pepIconNumberPlus,\n    pepIconSystemBin,\n    pepIconSystemEdit,\n    pepIconSystemClose,\n    pepIconSystemFilter,\n    pepIconSystemMenu,\n    pepIconSystemHome,\n    pepIconSystemSettings,\n    pepIconSystemQuestion,\n    pepIconSystemAvatar,\n    pepIconSystemDoor,\n    pepIconSystemPrint,\n    pepIconSystemSearch,\n    pepIconSystemSpinner,\n    pepIconSystemInfo,\n    pepIconShoppingCart,\n    pepIconTimeCal,\n    pepIconViewCardLg,\n    pepIconViewCardMd,\n    pepIconViewCardSm,\n    pepIconViewTable,\n    pepIconViewMatrix,\n    pepIconViewLine,\n]"
            },
            {
                "name": "pepperiComponentsModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    PepAttachmentModule,\n    PepCarouselModule,\n    PepBreadCrumbsModule,\n    PepButtonModule,\n    PepCheckboxModule,\n    PepColorModule,\n    PepDateModule,\n    PepGroupButtonsModule,\n    PepImageModule,\n    PepImagesFilmstripModule,\n    PepListModule,\n    PepCheckboxModule,\n    PepQuantitySelectorModule,\n    PepRichHtmlTextareaModule,\n    PepSearchModule,\n    PepSelectModule,\n    PepSeparatorModule,\n    PepSliderModule,\n    PepSideBarModule,\n    PepSignatureModule,\n    PepSizeDetectorModule,\n    PepTextareaModule,\n    PepTextboxModule,\n    PepIconModule,\n    PepMenuModule,\n    PepTopBarModule,\n    PepPageLayoutModule,\n    PepSmartFiltersModule,\n    PepFormModule\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib-tester/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<GenericListComponent>",
                "defaultValue": "(args: GenericListComponent) => ({\n    props: args,\n    /*props: {\n        fieldClick: action('fieldClick'),\n        valueChange: action('valueChange'),\n        breadCrumbItemClick: action('breadCrumbItemClick')\n    } */\n})"
            },
            {
                "name": "utilitiesList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-composite-lib/src/ngx-composite-lib.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    PepResetConfigurationFieldDirective\n]"
            }
        ],
        "functions": [
            {
                "name": "HttpLoaderFactory",
                "file": "projects/ngx-composite-lib/src/core/common/modules/ngx-helper-module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "fileStatus",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"uploading\" | \"downloading\" | \"done\" | \"failed\" | \"hidden\"",
                "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "fileStatus",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"uploading\" | \"downloading\" | \"done\" | \"failed\" | \"hidden\"",
                "file": "projects/ngx-composite-lib/dimx-export/dimx.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "PepGroupbuttonsTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sizes\" | \"font-weight\" | \"width-sizes\" | \"vertical-align\" | \"horizontal-align\" | \"custom\"",
                "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "PepShadowIntensityType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"soft\" | \"regular\" | \"hard\"",
                "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/ngx-composite-lib/generic-list/generic-list.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<GenericListComponent>",
                    "defaultValue": "(args: GenericListComponent) => ({\n    props: args,\n    /*props: {\n        fieldClick: action('fieldClick'),\n        valueChange: action('valueChange'),\n        breadCrumbItemClick: action('breadCrumbItemClick')\n    } */\n})"
                }
            ],
            "projects/ngx-composite-lib-tester/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/ngx-composite-lib/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/ngx-composite-lib-tester/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    production: true\n}"
                }
            ],
            "projects/ngx-composite-lib-tester/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    production: false\n}"
                }
            ],
            "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts": [
                {
                    "name": "FakeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    Addons: [\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '2e51566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '31f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd701',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: 'ba0adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '1c24db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '2251566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '33f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '44fb64d8-2b2c-4dec-8563-ac9fa98cd701',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '50adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '6c24db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '7e51566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '81f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '94fb64d8-2b2c-4dec-8563-ac9fa98cd701',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '100adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '1124db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '1251566e-7035-42dd-a7c2-fb92bc4ed135',\r\n            Addon: {\r\n                UUID: 'e738c47c-ed34-49a9-9c02-f8fb5209d151',\r\n                Name: 'Add-ons Manager',\r\n                Description: 'Manage your add-ons',\r\n                SystemData:\r\n                    '{\"Versions\":[\"v1.0\"],\"EditorName\":\"addons_manager\",\"AngularPlugin\":true}',\r\n                Hidden: true,\r\n                Type: 1,\r\n                CreationDate: '2020-04-22T11:56:09.863Z',\r\n                ModificationDate: '2020-06-08T10:34:40.417Z',\r\n            },\r\n            Version: 'v1.0',\r\n            SystemData:\r\n                '{\"Version\":\"v1.0\",\"Editors\":[{\"ParentPackageName\":\"Configuration\",\"PackageName\":\"addons_manager\",\"Description\":\"Manage Addons\"}]}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/e738c47c-ed34-49a9-9c02-f8fb5209d151/v1.0/',\r\n            CreationDate: '2020-04-22T11:58:42.443Z',\r\n            ModificationDate: '2020-04-22T11:58:50.587Z',\r\n        },\r\n        {\r\n            Type: 'OverwriteExisting',\r\n            UUID: '13f078b4-e368-4f95-b512-15cb3d2d6fac',\r\n            Addon: {\r\n                UUID: 'bd629d5f-a7b4-4d03-9e7c-67865a6d82a9',\r\n                Name: 'Addons Manager',\r\n                Description: 'Manage the addons (install, uninstall, upgrade)',\r\n                SystemData:\r\n                    '{\"AngularPlugin\":true,\"EditorName\":\"addons_manager\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-08T09:39:08.703Z',\r\n                ModificationDate: '2020-08-05T13:19:45.87Z',\r\n            },\r\n            Version: '0.3.3',\r\n            SystemData: '{\"Version\":\"0.3.3\",\"AutomaticUpgrade\":\"true\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/bd629d5f-a7b4-4d03-9e7c-67865a6d82a9/0.3.3/',\r\n            CreationDate: '2020-06-21T13:19:14.54Z',\r\n            ModificationDate: '2020-08-03T08:19:09.013Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '14fb64d8-2b2c-4dec-8563-ac9fa98cd731',\r\n            Addon: {\r\n                UUID: 'fcb7ced2-4c81-4705-9f2b-89310d45e6c7',\r\n                Name: 'Automated Jobs',\r\n                Description: 'Run, Schedule and Audit your jobs',\r\n                SystemData: '{\"AngularPlugin\":true,\"EditorName\":\"scheduler\"}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-09T07:44:49.883Z',\r\n                ModificationDate: '2020-06-10T09:14:07.817Z',\r\n            },\r\n            Version: '1.0.53',\r\n            SystemData: '{\"Version\":\"1.0.53\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/fcb7ced2-4c81-4705-9f2b-89310d45e6c7/1.0.53/',\r\n            CreationDate: '2020-06-09T09:20:16.427Z',\r\n            ModificationDate: '2020-08-30T12:01:12.083Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '150adbdc-52e2-4049-816b-41d67b4a5bb7',\r\n            Addon: {\r\n                UUID: '1e66237b-b604-450e-92cf-81bcd171185a',\r\n                Name: 'CPI Node',\r\n                Description: 'Manages the embeded Node.js app in the CPI',\r\n                SystemData:\r\n                    '{ \"Versions\": [\"1.0.0\"], \"AngularPlugin\":true, \"EditorName\":\"editor\"  }',\r\n                Hidden: true,\r\n                Type: 2,\r\n                CreationDate: '2020-05-25T08:31:44.01Z',\r\n                ModificationDate: '2020-06-23T10:19:45.763Z',\r\n            },\r\n            Version: '0.0.3',\r\n            SystemData: '{\"Version\":\"0.0.3\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/1e66237b-b604-450e-92cf-81bcd171185a/0.0.3/',\r\n            CreationDate: '2020-06-17T14:16:31.71Z',\r\n            ModificationDate: '2020-08-27T11:17:12.67Z',\r\n        },\r\n        {\r\n            Type: 'UseExisting',\r\n            UUID: '1624db9d-3c6f-4814-a92f-ac45a991df74',\r\n            Addon: {\r\n                UUID: '00000000-0000-0000-0000-000000abcdef',\r\n                Name: 'Cross Platforms API',\r\n                Description: 'Cross Platforms API (CPAPI)',\r\n                SystemData: '{}',\r\n                Hidden: false,\r\n                Type: 1,\r\n                CreationDate: '2020-06-02T09:16:49.223Z',\r\n                ModificationDate: '2020-08-05T13:29:18.277Z',\r\n            },\r\n            Version: 'V106',\r\n            SystemData: '{\"Version\":\"V106\"}',\r\n            AdditionalData: '{}',\r\n            Hidden: false,\r\n            PublicBaseURL:\r\n                'https://cdn.staging.pepperi.com/Addon/Public/00000000-0000-0000-0000-000000abcdef/V106/',\r\n            CreationDate: '2020-06-17T20:04:02.857Z',\r\n            ModificationDate: '2020-08-05T08:48:45.45Z',\r\n        }\r\n    ],\r\n}"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "projects/ngx-composite-lib/dimx-export/dimx.module.ts": [
                {
                    "name": "pepIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/dimx-export/dimx.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    pepIconSystemDoc,\n]"
                }
            ],
            "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.module.ts": [
                {
                    "name": "pepIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    pepIconTextAlignCenter, \n    pepIconTextAlignLeft, \n    pepIconTextAlignRight\n]"
                }
            ],
            "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts": [
                {
                    "name": "pepIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    pepIconSystemBolt,\n    pepIconNoImage,\n    pepIconNoImage2,\n    pepIconArrowTwoWaysVerT,\n    pepIconArrowDown,\n    pepIconArrowUp,\n    pepIconArrowRightAlt,\n    pepIconArrowLeftAlt,\n    pepIconArrowDownAlt,\n    pepIconArrowUpAlt,\n    pepIconNumberNumber,\n    pepIconNumberPlus,\n    pepIconSystemBin,\n    pepIconSystemEdit,\n    pepIconSystemClose,\n    pepIconSystemFilter,\n    pepIconSystemMenu,\n    pepIconSystemHome,\n    pepIconSystemSettings,\n    pepIconSystemQuestion,\n    pepIconSystemAvatar,\n    pepIconSystemDoor,\n    pepIconSystemPrint,\n    pepIconSystemSearch,\n    pepIconSystemSpinner,\n    pepIconSystemInfo,\n    pepIconShoppingCart,\n    pepIconTimeCal,\n    pepIconViewCardLg,\n    pepIconViewCardMd,\n    pepIconViewCardSm,\n    pepIconViewTable,\n    pepIconViewMatrix,\n    pepIconViewLine,\n]"
                },
                {
                    "name": "pepperiComponentsModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    PepAttachmentModule,\n    PepCarouselModule,\n    PepBreadCrumbsModule,\n    PepButtonModule,\n    PepCheckboxModule,\n    PepColorModule,\n    PepDateModule,\n    PepGroupButtonsModule,\n    PepImageModule,\n    PepImagesFilmstripModule,\n    PepListModule,\n    PepCheckboxModule,\n    PepQuantitySelectorModule,\n    PepRichHtmlTextareaModule,\n    PepSearchModule,\n    PepSelectModule,\n    PepSeparatorModule,\n    PepSliderModule,\n    PepSideBarModule,\n    PepSignatureModule,\n    PepSizeDetectorModule,\n    PepTextareaModule,\n    PepTextboxModule,\n    PepIconModule,\n    PepMenuModule,\n    PepTopBarModule,\n    PepPageLayoutModule,\n    PepSmartFiltersModule,\n    PepFormModule\n]"
                }
            ],
            "projects/ngx-composite-lib/src/ngx-composite-lib.module.ts": [
                {
                    "name": "utilitiesList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-composite-lib/src/ngx-composite-lib.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    PepResetConfigurationFieldDirective\n]"
                }
            ]
        },
        "groupedFunctions": {
            "projects/ngx-composite-lib/src/core/common/modules/ngx-helper-module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "projects/ngx-composite-lib/src/core/common/modules/ngx-helper-module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "httpClient",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpClient",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/ngx-composite-lib/file-status-panel/file-status-panel.model.ts": [
                {
                    "name": "fileStatus",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"uploading\" | \"downloading\" | \"done\" | \"failed\" | \"hidden\"",
                    "file": "projects/ngx-composite-lib/file-status-panel/file-status-panel.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/ngx-composite-lib/dimx-export/dimx.model.ts": [
                {
                    "name": "fileStatus",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"uploading\" | \"downloading\" | \"done\" | \"failed\" | \"hidden\"",
                    "file": "projects/ngx-composite-lib/dimx-export/dimx.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.model.ts": [
                {
                    "name": "PepGroupbuttonsTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sizes\" | \"font-weight\" | \"width-sizes\" | \"vertical-align\" | \"horizontal-align\" | \"custom\"",
                    "file": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/ngx-composite-lib/shadow-settings/shadow-settings.model.ts": [
                {
                    "name": "PepShadowIntensityType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"soft\" | \"regular\" | \"hard\"",
                    "file": "projects/ngx-composite-lib/shadow-settings/shadow-settings.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "projects/ngx-composite-lib-tester/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/common/ngx-helper.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepperiComponentsModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/components-example/components-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentsExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-list-example/fake-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FakeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/app/generic-list-example/generic-list-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenericListExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib-tester/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/color-settings/color-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/color-settings/color-settings.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepColorSettings",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/dimx-export/dimx.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DIMXComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/dimx-export/dimx.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IFile",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/dimx-export/dimx.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/dimx-export/dimx.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DIMXService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/file-status-panel/file-status-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileStatusPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/file-status-panel/file-status-panel.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IFile",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GenericListComponent",
                "coveragePercent": 8,
                "coverageCount": "4/50",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListActions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListDataSource",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListInitData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListPager",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPepGenericListTableInputs",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepGenericListService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/generic-list/generic-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupButtonsSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/group-buttons-settings/group-buttons-settings.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pepIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/shadow-settings/shadow-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShadowSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/shadow-settings/shadow-settings.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PepShadowSettings",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/directives/reset-configuration-field.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PepResetConfigurationFieldDirective",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/modules/ngx-helper-module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/core/common/services/utilities.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PepCompositeLibUtilitiesService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/ngx-composite-lib.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "utilitiesList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-composite-lib/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}